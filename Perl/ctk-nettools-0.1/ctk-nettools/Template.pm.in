#!@bin_perl@ -w

# $Revision: 1.1.1.1 $

# ctk-nettools: a perl module to deal with templates by http
# Copyright (C) 2000 Cyril Bouthors (cyril@bouthors.org)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

##########################################################
# This package 
#

package nettools::Template;

use strict  qw(subs vars refs);

require LWP;
require LWP::UserAgent;
require HTTP::Status;
require HTTP::Date;

use nettools::Log;

@nettools::Template::ISA = qw(Exporter);
@nettools::Template::EXPORT = qw(printtpl httpreadfile);

my $templates_url = '@TEMPLATES_URL@';
my $cache_dir = '@cache_dir@';


#####################################################
# Function that gets a template from an HTTPServer and
# fill up all the variables in the template then returns it as
# a string . 
# Note there's a cache handling. On the first request for a file
# it's copied locally then next time it is asked we compared date
# between the copy and the original's header. 
#####################################################

sub printtpl {
    my ($template, %assoc) = @_;
    
    my $template_path = "$templates_url/".$template;
    mylog("asking for template $template_path","ctk-nettools::printtpl",2);

    my($key);

    my $ua = new LWP::UserAgent;  # we create a global UserAgent object

    my $request = HTTP::Request->new(HEAD => "$templates_url/$template");
    my $response = $ua->request($request);

    my $date=0;
    $date = HTTP::Date::str2time($response->header('Last-Modified')) if ($response->is_success);
    $date = 0 if ! $date;

    if ($response->{'_rc'} =~ /4\d\d/i)
    {

     $date = 0;

    };


    my $mtime = (stat($cache_dir.'/'.$template))[9];

    mylog ("url_date= $date cache_date=$mtime",'ctk-nettools::printtpl',0);

#if cache newer get it

    my $content;

    mylog("cache date is $mtime","ctk-nettools::Template",2);

    if ((! $mtime) || ($date > $mtime))
    {
    	$content= httpreadfile ($template_path);
	writeFile("$cache_dir","$template",$content);
    }
    else
    {
    	$content= readFile("$cache_dir/$template");
	
    }
    
    foreach $key (keys(%assoc)) {
	$content =~ s/$key/$assoc{$key}/g;
    }

    return $content;
}

####################################################
# Function that gets a document from an HTTP Server and
# returns it as a string.
####################################################

sub httpreadfile {
    my ($adresse) = @_;

    my $hdrs = new HTTP::Headers('Accept' => 'text/plain',
			      'User-Agent' => 'ChezCGI/1.0');
    my $url = new URI::URL($adresse);
    my $req = new HTTP::Request('GET', $url, $hdrs);
    my $ua = new LWP::UserAgent;
    my $resp = $ua->request($req);
    if ($resp->is_success) {
	return ($resp->content);
    } else {
	return ($resp->message);
    }
}

sub readFile
{
    my ($filename)=@_;
    my $line;
    my $out='';

    mylog("Using dir_cache $filename","ctk-syscgi::libsyscgi",0);
    open (F,$filename) || die "cannot open $filename for reading !!!!";
    while($line = <F>)
    {
	#chop $line;
	$out = $out . $line;
    };

    close F;
    return($out);
}


sub writeFile
{
        my ($dir,$filename,$data)=@_;
        
        if (!(-e $dir))
        {
          my $ret = `mkdir -p $dir`;
          mylog("mkdir $dir :$ret","ctk-syscgi::libsyscgi",0);          
        
        };
        
        open (FSOR,"> $dir/$filename") or die ("Cannot open $filename for writing !!!!");

        print (FSOR "$data");
        close FSOR;

        mylog("Writing cache in $dir/$filename","ctk-syscgi::libsyscgi",0);
}




1;

