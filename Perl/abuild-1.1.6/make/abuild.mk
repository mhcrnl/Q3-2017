# Assign a default target before doing anything else so that we don't
# end up with the default being whatever target happens to be defined
# first.  Abuild never invokes make without explicitly providing a
# target.

.PHONY: default
default: ;
	@$(PRINT) abuild invoked make with no target or default target
	false

# If QTC_MK_DIR is set, we're running abuild's test suite, so we
# should include makefile coverage support.  Otherwise, set QTC.TC to
# empty so that calls to it will expand to nothing and have negligible
# impact on build times.
ifdef QTC_MK_DIR
  include $(QTC_MK_DIR)/QTC.mk
else
  QTC.TC=
endif

# Set convenience variables for accessing other abuild files
abMK := $(ABUILD_TOP)/make
abBIN := $(ABUILD_TOP)/private/bin

# Include abuild's dynamically computed information.  This is
# generated by abuild before it invokes gmake.
include .ab-dynamic.mk

# Global setup, utility functions
include $(abMK)/global.mk

# Determine the compiler toolchain, if applicable
ifeq ($(ABUILD_TARGET_TYPE), object-code)
CCXX_TOOLCHAIN = $(ABUILD_PLATFORM_COMPILER)
endif

VPATH := ..
SRCDIR := ..

# Support for the automated test framework is loaded for all types
# of rules.
include $(abMK)/qtest-support.mk

# Load the base rule
include $(call load_rule,_base)

# Load any pre-plugin initialization files
include $(wildcard $(foreach P,$(ABUILD_PLUGINS),$(P)/preplugin.mk))

# Include the current directory's build rules, remembering that the
# source directory is actually this directory's parent.
include $(SRCDIR)/Abuild.mk

# Load any plugin files
include $(wildcard $(foreach P,$(ABUILD_PLUGINS),$(P)/plugin.mk))

RULES ?=
LOCAL_RULES ?=
ALL_RULES = $(RULES) $(LOCAL_RULES)

ifeq ($(ABUILD_SUPPORT_1_0),1)
  BUILD_ITEM_RULES ?=
  ifdef BUILD_ITEM_RULES
    $(call deprecate,1.1,BUILD_ITEM_RULES is deprecated; use named rules from the rules directory instead)
    _UNDEFINED := $(call undefined_items,BUILD_ITEM_RULES)
    ifneq ($(words $(_UNDEFINED)),0)
      $(error These build items from BUILD_ITEM_RULES in are unknown: $(_UNDEFINED))
    endif
    ALL_RULES += $(BUILD_ITEM_RULES)
  endif
endif

ifeq ($(words $(ALL_RULES)), 0)
  $(error No rules defined.)
endif

ifeq ($(filter _base,$(RULES)), _base)
  $(error The _base rule may not be specified explicitly.)
endif

# Documentation support -- users are expected to provide documentation
# functionality in a plugin.
doc:: all ;

# Make sure check, test, and test-only are defined and that check and
# test depend on all.  Individual test implementations still have to
# do this same thing -- see qtest-support.mk.
check test:: all ;
test-only:: ;

# Include base rule and user-specified built-in rules
include $(foreach RULE,$(RULES),$(call load_rule,$(RULE)))

ifeq ($(ABUILD_SUPPORT_1_0),1)
  # Include any build-item-specific rules
  ifneq ($(words $(BUILD_ITEM_RULES)),0)
    _qtx_dummy := $(call QTC.TC,abuild,abuild.mk BUILD_ITEM_RULES,0)
    include $(foreach BI,$(BUILD_ITEM_RULES),$(abDIR_$(BI))/Rules.mk)
  endif
endif

# Finally, include any local rules
ifneq ($(words $(LOCAL_RULES)),0)
  _qtx_dummy := $(call QTC.TC,abuild,abuild.mk LOCAL_RULES,0)
  include $(foreach R,$(LOCAL_RULES),$(SRCDIR)/$(R))
endif
