#!/usr/bin/env perl
require 5.008;
use warnings;
use strict;
use File::Basename;

my $whoami = basename($0);

die "Usage: $whoami x.qfl x.fl\n" unless @ARGV == 2;

my ($qfl, $fl) = @ARGV;
my $base = basename($qfl, '.qfl');

my $lineno = 1;
open(IN, "<$qfl") or die "$whoami: can't open $qfl: $!\n";
open(OUT, ">$fl.tmp") or die "$whoami: can't create $fl.tmp: $!\n";

output("#line $lineno \"$qfl\"\n");

my @tokens = ();
my %kw_tokens = ();
while (<IN>)
{
    if (m/^tok_(\S+)\t/)
    {
	my $tok = $1;
	push(@tokens, $tok);
	if ($tok =~ m/^kw_/)
	{
	    $kw_tokens{$tok} = 1;
	}
    }
    output($_);
}
open(Y, "<../$base.yy") or die "$whoami: can't open ../$base.yy: $!\n";
{ # local scope
    my $in_keyword = 0;
    while (<Y>)
    {
	if (! $in_keyword)
	{
	    if (m/^keyword/)
	    {
		$in_keyword = 1;
	    }
	}
	if ($in_keyword)
	{
	    if (m/^\s+;/)
	    {
		$in_keyword = 0;
	    }
	    elsif (m/tok_(kw_\S+)/)
	    {
		my $tok = $1;
		if (exists $kw_tokens{$tok})
		{
		    delete $kw_tokens{$tok};
		}
		else
		{
		    # This must be an invalid token, so it will get
		    # its own error message from bison.
		}
	    }
	}
    }
    close(Y);
    if (scalar keys %kw_tokens)
    {
	my $toks = join(' ', (sort keys %kw_tokens));
	die "$whoami: tokens missing from keywords in $base.yy: $toks\n";
    }
}

output("#line $lineno \"$fl\"\n");
output("\n%%\n");

foreach my $token (@tokens)
{
    output("\n");
    output("{tok_$token} {\n");
    if ($token eq 'comment')
    {
	# special case: don't return comments to the parser
	output("    yyextra->createToken(yytext);\n");
    }
    else
    {
	output("    yyextra->setToken(yyextra->createToken(yytext));\n");
	output("    return tok_$token;\n");
    }
    output("}\n");
}

output("\n%%\n");
output("\n");
output("static FlexCaller flex_caller(yy_interface_lex_init_extra,\n");
output("			      yy_interface_set_in,\n");
output("			      yy_interface_lex,\n");
output("			      yy_interface_lex_destroy);\n");
output("\n");
output("FlexCaller& interfaceGetFlexCaller()\n");
output("{\n");
output("    return flex_caller;\n");
output("}\n");

close(OUT) or die "$whoami: can't close $fl.tmp: $!\n";
close(IN);
rename "$fl.tmp", "$fl" or die "$whoami: can't rename $fl.tmp to $fl: $!\n";

sub output
{
    my $line = shift;
    print OUT $line;
    while ($line =~ m,\n,gs)
    {
	++$lineno;
    }
}
