#!/usr/bin/env perl
require 5.008;
use warnings;
use strict;

require TestDriver;
require abuild_test_utils;

chdir("compiler-verification") or die;

my $td = new TestDriver("compiler verification");
test_setup();

my $top = get_top();
my $abuild_top = get_abuild_top();
my $filters = get_filters();
my $platform_native = get_native_platform();

cleanup();

$ENV{'ABUILD_COMPAT_LEVEL'} = '1.1';

# Test compiler verification program
mkdir "work", 0777;
cd("work");

$td->runtest("compiler verification",
	     {$td->COMMAND =>
		  "$abuild_top/misc/compiler-verification/verify-compiler",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/compiler-verification.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

if (in_windows())
{
    # Also verify mingw if we can.
    open(P, "MINGW=1 perl $abuild_top/private/list_platforms --windows|")
	or die;
    my $have_mingw = 0;
    while (<P>)
    {
	if (m/mingw/)
	{
	    $have_mingw = 1;
	    last;
	}
    }
    close(P);
    if ($platform_native =~ m/\.mingw$/)
    {
	$td->runtest("mingw is default compiler",
		     {$td->STRING => "yes"},
		     {$td->STRING => "yes"});
    }
    elsif ($have_mingw)
    {
	$td->runtest("mingw compiler verification",
		     {$td->COMMAND =>
			  "MINGW=1" .
			  " $abuild_top/misc/compiler-verification/verify-compiler" .
			  " --compiler mingw",
			  $td->FILTER => "perl $filters/filter-abuild.pl"},
		     {$td->FILE => "$top/compiler-verification.mingw.out",
		      $td->EXIT_STATUS => 0},
		     $td->NORMALIZE_NEWLINES);
    }
    else
    {
	$td->runtest("mingw not available",
		     {$td->STRING => "no"},
		     {$td->STRING => "no"});
    }
}

if ($platform_native !~ m/[^\.]+\.[^\.]+\.[^\.]+\.([^\.]+)/)
{
    die "unable to parse native platform\n";
}
my $native_compiler = $1;

$td->runtest("native compiler plugin",
	     {$td->COMMAND =>
		  "QRW_COMPILER=$native_compiler" .
		  " $abuild_top/misc/compiler-verification/verify-compiler" .
		  " --plugin-tree-location $top/plugins" .
		  " --plugin-tree-name compiler-plugins" .
		  " --plugin-name native" .
		  " --compiler qrw",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/native-plugin.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("cross compiler plugin",
	     {$td->COMMAND =>
		  "$abuild_top/misc/compiler-verification/verify-compiler" .
		  " </dev/null" .
		  " --plugin-tree-location $top/plugins" .
		  " --plugin-tree-name compiler-plugins" .
		  " --plugin-name cross" .
		  " --platform-type crosstype" .
		  " --compiler xcc",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/cross-compiler-plugin.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("nested type compiler plugin",
	     {$td->COMMAND =>
		  "$abuild_top/misc/compiler-verification/verify-compiler" .
		  " </dev/null" .
		  " --plugin-tree-location $top/plugins" .
		  " --plugin-tree-name compiler-plugins" .
		  " --plugin-name cross" .
		  " --platform-type nested" .
		  " --compiler xcc",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/nested-type.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("pseudo-cross compiler plugin",
	     {$td->COMMAND =>
		  " $abuild_top/misc/compiler-verification/verify-compiler" .
		  " </dev/null" .
		  " --plugin-tree-location $top/plugins" .
		  " --plugin-tree-name compiler-plugins" .
		  " --plugin-name pseudo-cross" .
		  " --cross" .
		  " --compiler zyx",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/pseudo-cross-plugin.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("1.0 compatibility",
	     {$td->COMMAND =>
		  "ABUILD_COMPAT_LEVEL=1.0" .
		  " $abuild_top/misc/compiler-verification/verify-compiler" .
		  " </dev/null" .
		  " --plugin-tree-location $top/plugins" .
		  " --plugin-name cross" .
		  " --platform-type crosstype" .
		  " --compiler xcc",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/cross-compiler-plugin-1.0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cleanup();

$td->report(6 + (in_windows() ? 1 : 0));
