#!/usr/bin/env perl
require 5.008;
use warnings;
use strict;

require TestDriver;
require abuild_test_utils;

chdir("abuild-multithreading") or die;

my $td = new TestDriver("multithreading");
test_setup();

my $top = get_top();
my $filters = get_filters();
my ($test_java, $test_junit, $jar, $java) = @{get_java_information()};

# These tests attempt to exercise abuild's multithreaded build
# capability.  Although the mutlithreaded nature of the dependency
# evaluator and dependency runner are well exercised in their own test
# suites, there are other considerations, such as race condition
# opportunities or proper mutex protection in abuild's own internals,
# that should be exercised.  These tests are designed to create
# situations in which lots of things can happen as close to
# simultaneously as possible.  The output is not deterministic, so we
# have a special filter that makes sure we see what we are expecting.
# Also, we repeat each test several times to try to make sure that we
# have consistent results.

my $nreps = 10;
my $savecount = 0;

setup($td);

cd("work/delays");
if ($test_java)
{
    # This test would fail if a multithreaded build actually ran all
    # the builds serially in a single thread.  It does have a little
    # bit of a timing issue in it: it will fail if more than the delay
    # in the "sleep" build item (two seconds at the initial writing)
    # elapses between the start of building the first item and the
    # last item.  This build builds four items that all print a before
    # and after string.  There are two make-based items and two
    # java-based items.  The sequence groups in the test output ensure
    # that the before of one of the make-based items precedes the
    # after of an earlier java-based item and that the before of one
    # of the java-based items precedes the after of an earlier
    # make-based item.  In a single threaded build, the output would
    # alternate between before and after.  In a multithreaded build,
    # all the befores precede all the afters.  There's one extra build
    # item in the mix that is java-based and that all the others
    # depend on.  This is just to make sure the java builder
    # application is running so that the delay of starting it up
    # doesn't count toward the overall delay.
    $td->runtest("uses multiple threads",
		 {$td->COMMAND =>
		      "abuild --interleaved-output -b all --silent -j4",
		      $td->FILTER => "perl $top/remove-interleave-prefix.pl"},
		 {$td->FILE => "$top/multiple-threads.out",
		  $td->EXIT_STATUS => 0,
		  $td->THREAD_DATA =>
		  {$td->TD_THREADS => [qw(start-java a s d f)],
		   $td->TD_SEQGROUPS => [qw(s1 s2)]}},
		 $td->NORMALIZE_NEWLINES);
}
else
{
    system("(tar cf - . | cat > /dev/null)");
}

cd("work/output-capture");
my @output_capture_tests = (
    ['raw, j1', 'output-capture-raw-j1.out',
     []
    ],
    ['interleaved, j1', 'output-capture-interleaved-j1.out',
     ['--output-prefix=O ']	# interleaved is implicit
    ],
    ['buffered, j1', 'output-capture-buffered-j1.out',
     ['--error-prefix=E ', '--buffered-output']
    ],
    ['raw j2', 'output-capture-raw-j2.out',
     ['--silent', '--raw-output', '-j2']
    ],
    ['interleaved j2', 'output-capture-interleaved-j2.out',
     ['--silent', '--interleaved-output', '-j2', '--error-prefix=E '],
    ],
    ['silent buffered j2', 'output-capture-silent-buffered-j2.out',
     ['--silent', '-j2', '--buffered-output', '--output-prefix=O '],
    ],
    ['buffered j2', 'output-capture-buffered-j2.out',
     ['-j2', '--output-prefix=O ', '--buffered-output', '--error-prefix=E '],
    ],
    );
foreach my $d (@output_capture_tests)
{
    # This test case would also fail if abuild's multithreaded mode
    # didn't run in multiple threads.  They also have a minor timing
    # concern with sleep.

    my ($description, $outfile, $args) = @$d;

    my $input = +{$td->COMMAND => [qw(abuild -b all), @$args]};
    if (grep { m/^-j/ } @$args)
    {
	$input->{$td->FILTER} = "perl $top/filter-output-capture.pl";
    }
    else
    {
	$input->{$td->FILTER} = "perl $filters/filter-abuild.pl";
    }

    $td->runtest("output capture: $description",
		 $input,
		 {$td->FILE => "$top/$outfile", $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);
}

cd("work/basic");
runtest("mixed success and failure", "mixed.out", 3);

cd("work/fails");
runtest("multiple failures", "failures.out");

cd("work/java");

if ($test_java)
{
    runtest("premature java exit", "premature-java-exit.out", 1);
    runtest("java startup failure", "java-startup-failure.out", 2);

    # It's not deterministic which Abuild.groovy files will be accessed.
    system("cat ?/Abuild.groovy > /dev/null");
}
else
{
    system("(tar cf - . | cat > /dev/null)");
}

check_work_accessed($td, "not-accessed.out");

$td->report(1 + ($test_java ? 10 : 0) +
	    ($nreps * (2 + ($test_java ? 2 : 0))) +
	    (scalar(@output_capture_tests)));

sub runtest
{
    my ($description, $out, $flag) = @_;
    $flag = 0 unless defined $flag;
    my $xargs = ($flag == 2 ? "' --test-java-builder-bad-java'" : "");
    my $fargs = ($flag == 1 ? '--no-failure' : "");
    my $j = ($flag == 3 ? "-j12" : "-j4"); # -j12 gives more threads than items
    for (my $i = 0; $i < $nreps; ++$i)
    {
	if (! $td->runtest("$description ($i)",
			   {$td->COMMAND =>
				"abuild --buffered-output -b all -k $j $xargs",
			    $td->FILTER =>
				"perl $top/filter.pl f.tmp $fargs"},
			   {$td->FILE => "$top/$out", $td->EXIT_STATUS => 2},
			   $td->NORMALIZE_NEWLINES))
	{
	    my $save = "$top/failure." . ++$savecount . ".save";
	    $td->emphasize("actual output in $save");
	    rename("f.tmp", $save);
	}
    }
}
