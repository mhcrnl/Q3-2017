#!/usr/bin/env perl
require 5.008;
use warnings;
use strict;

require TestDriver;
require abuild_test_utils;

chdir("abuild-ant") or die;

my $td = new TestDriver("ant framework");
test_setup();

my $top = get_top();
my $filters = get_filters();
my ($test_java, $test_junit, $jar, $java) = @{get_java_information()};
if (! $test_java)
{
    $td->runtest("skipping ant tests",
		 {$td->STRING => "skip"},
		 {$td->STRING => "skip"});
    fake_qtc($td, 'infer (ANT|JAVA)_HOME');
    fake_qtc($td, 'ERR ant unknown');
    $td->report(1);
    exit 0;
}

# This test suite tests the ant framework.

setup($td);

cd("work/java");

my $java_cygwin = ($^O eq 'cygwin');

if ($java_cygwin)
{
    # Test to make sure a java build will work if we don't have perl.
    my $opath = $ENV{'PATH'};
    my @path = ();
    foreach my $p (split(':', $opath))
    {
	if ((-e "$p/perl") || (-e "$p/perl.exe") ||
	    (-e "$p/uname") || (-e "$p/uname.exe"))
	{
	    # exclude from path
	}
	else
	{
	    push(@path, $p);
	}
    }
    $ENV{'PATH'} = join(':', @path);
    system("abuild --build=all > abuild-java.out 2>&1");
    $ENV{'PATH'} = $opath;
    $td->runtest("build java without perl in path",
		 {$td->FILE => "abuild-java.out",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/java-no-perl.out"},
		 $td->NORMALIZE_NEWLINES);

    # Access the unused Abuild.mk
    system("cat native/Abuild.mk > /dev/null");
}
else
{
    # Make sure these files are accessed.
    system("(tar cf - . | cat > /dev/null)");
}

cd("work/basic/other-executable");

$td->runtest("ant",
	     {$td->COMMAND => "abuild --build=deptrees test",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/basic.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

sleep 1;
my $now = time;
utime $now, $now, "../library/src/java/com/example/library/Library.java"
    or die;

$td->runtest("ant test-only",
	     {$td->COMMAND => "abuild --build=deptrees test-only",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test-only.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("ant recheck",
	     {$td->COMMAND => "abuild --build=deptrees test",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/basic2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Test different archive types

cd("work/archive-types");

$td->runtest("archive types",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/archive-types.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("jar contents",
	     {$td->COMMAND =>
		  [$jar, 'tf', "jar/abuild-java/dist/jar-example.jar"],
		  $td->FILTER => "perl $filters/filter-jar.pl"},
	     {$td->FILE => "$top/jar-contents.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("har contents",
	     {$td->COMMAND =>
		  [$jar, 'tf', "har/abuild-java/dist/har-example.har"],
		  $td->FILTER => "perl $filters/filter-jar.pl"},
	     {$td->FILE => "$top/har-contents.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("war contents",
	     {$td->COMMAND =>
		  [$jar, 'tf', "war/abuild-java/dist/war-example.war"],
		  $td->FILTER => "perl $filters/filter-jar.pl"},
	     {$td->FILE => "$top/war-contents.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("client war contents",
	     {$td->COMMAND =>
		  [$jar, 'tf',
		   "client-war/abuild-java/dist/client-war-example.war"],
		  $td->FILTER => "perl $filters/filter-jar.pl"},
	     {$td->FILE => "$top/client-war-contents.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("ear contents",
	     {$td->COMMAND =>
		  [$jar, 'tf', "ear/abuild-java/dist/ear-example.ear"],
		  $td->FILTER => "perl $filters/filter-jar.pl"},
	     {$td->FILE => "$top/ear-contents.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("other ear contents",
	     {$td->COMMAND =>
		  [$jar, 'tf',
		   "other-ear/abuild-java/dist/other-ear-example.ear"],
		  $td->FILTER => "perl $filters/filter-jar.pl"},
	     {$td->FILE => "$top/other-ear-contents.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Alternative ant

cd("work/basic/alternative");

$td->runtest("alternative ant support",
	     {$td->COMMAND => "abuild --no-deps run",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/alternative-ant.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/ant-qtest");

# Test failing qtest test suite from ant

$td->runtest("failing qtest from ant",
	     {$td->COMMAND => "abuild check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/ant-qtest-failure.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/plugin/java/code");

$td->runtest("java plugin",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/plugin-ant.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("run java program",
	     {$td->COMMAND => [$java, "-classpath",
			       "abuild-java/dist/code.jar",
			       "com.example.Main"]},
	     {$td->STRING => "What am I supposed to say again?\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/junit");

if ($test_junit)
{
    $td->runtest("junit with failure",
		 {$td->COMMAND => "abuild -b all test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/junit-failure.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES);

    $td->runtest("junit with failure and -k",
		 {$td->COMMAND => "abuild -k -b all test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/junit-failure-k.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES);

    $td->runtest("junit with no failures",
		 {$td->COMMAND => "abuild -d test -C test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/junit-okay.out",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);
}
else
{
    # Make sure these files are accessed.
    system("(tar cf - . | cat > /dev/null)");
}

cd("work/defines");

$td->runtest("command-line property definition",
	     {$td->COMMAND => ['abuild', 'potato.salad=one two three'],
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/defines.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no-op",
	     {$td->COMMAND => "abuild -n",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/no-op.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no ANT_HOME or JAVA_HOME, --ant",
	     {$td->COMMAND => "unset ANT_HOME; unset JAVA_HOME;" .
		  " abuild --compat-level 1.0" .
		  " --ant -Dpotato.salad='four five six' -e",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/defines2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("--ant with 1.1",
	     {$td->COMMAND => ['abuild', '--ant', '-Da=b', '-e'],
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/no-ant-1_1.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/missing-hook-file/user");

$td->runtest("missing hook file",
	     {$td->COMMAND => "abuild local",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/new-target.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/stdin");

$td->runtest("use System.in",
	     {$td->COMMAND => "echo quack | abuild test",
	      $td->FILTER => "grep input:"},
	     {$td->REGEXP => ".*input: quack\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

$td->report(21 +
	    ($java_cygwin ? 1 : 0) +
	    ($test_junit ? 3 : 0));
