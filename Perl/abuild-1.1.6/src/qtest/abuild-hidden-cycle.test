#!/usr/bin/env perl
require 5.008;
use warnings;
use strict;

require TestDriver;
require abuild_test_utils;

chdir("abuild-hidden-cycle") or die;

my $td = new TestDriver("hidden cycle");
test_setup();

my $top = get_top();
my $filters = get_filters();
my $native_out = get_native_out();

# These tests exercise resolving a circular dependency by separating
# interfaces and implementations.  This is a dangerous technique
# frought with pitfalls.  See documentation on separation of
# interfaces and implementations for details.  This used to test
# static build items before they were removed from the software, but
# the test was left in place to demonstrate that the same problem can
# be solved in the same way without static dependencies.

setup($td);

cd("work/good/prog");

$td->runtest("cyclic dependency: deps",
	     {$td->COMMAND => "abuild --build=deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/depitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/good");

$td->runtest("cyclic dependency: all",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/allitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check program",
	     {$td->COMMAND => "prog/$native_out/main"},
	     {$td->STRING => "a\nb\na\nb\na\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("cyclic dependency: clean",
	     {$td->COMMAND => "abuild --clean=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/allclean0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no more .ab-dyanmic.mk files",
	     {$td->COMMAND =>
		  "find . -type f -name .ab-dynamic.mk -print | wc -l"},
	     {$td->REGEXP => "\\s*0\\s*",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

$td->report(6);
