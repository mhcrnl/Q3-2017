<?xml version="1.0"?>

<!--

 These comments describe implementation details for this file.  For
 user-oriented help, please see properties-help.txt, and
 hooks-help.txt.  These can be viewed by invoking the properties-help
 and hooks-help targets.  When editing the help files, please keep
 lines no wider than 60 columns so that the files display cleanly on
 an 80-column display when prefixed by ant's [concat] prefix.

 When modifying this file to create new user-defined properties, new
 interface properties, or new hooks, please update the appropriate
 help files as needed.

 This is the top-level build file used by abuild when it invokes ant.
 It defines several targets and also handles loading additional
 targets from external files.

 The basic design of abuild's use of ant is based on the following
 principles:

  * Abuild's ant builds are property-driven.  That is, we use a
    generic ant framework that does things based on the values of a
    minimal set of user-defined properties and some additional
    properties set through Abuild.interface files or set internally by
    abuild.

  * This top-level entry point defines targets to perform the standard
    targets required for generating code, compiling code, creating
    packages (jars, etc.), deploying, analyzing, and testing.  (Other
    functions may be supported as well; see comments throughout the
    file and the list of supported targets for an authoritative list.)
    Hooks are provided to allow users or build items to register
    additional targets to be run before or after predefined targets.
    The mechanism for supporting this is described below and in
    hooks-help.txt.

  * Abuild's standard ant targets make use of standard, documented,
    directory structures.  In this case, we favor uniformity over
    flexibility.

  * Very little, if any, behavior is enabled by default so that an
    abuild-driven ant-based build that sets no properties should
    produce no results.  This makes it possible for the default
    behavior to be overridden to a large extent in those rare
    instances where doing so is appropriate.

 Since ant is not a scripting language and was not really designed for
 creation of generic targets, abuild's ant configuration files make
 use of antcontrib.  Even so, there are a few somewhat convoluted
 things happening here that require some additional information.
 Foremost among these is the mechanism that abuild's ant configuration
 files use to implement hooks.

 Ant offers no way for a build file to supply a target and "register"
 that target as a dependency of something else, and it offers no way
 to ask a build file whether it provides a target or, for that matter,
 to run a target conditionally upon its being defined.  In order to
 avoid the situation of every build file that provides hooks to
 provide a long list of empty targets and, furthermore, to create a
 situation in which adding a new hook to this file causes a ripple
 effect throughout existing build files, we have provided code that
 can be used to ask whether a specific build file contains a
 given target.  When we want to invoke a hook named "hook" from a
 specific file, we simply ask that file if it has a target called
 "-hook", and if it does, we execute it.

 In addition, the special target "all" is defined.  The "all" target
 performs all steps required to make a build item usable by things
 that depend upon it.  The "all" target is an empty target that
 depends on "init,package".  There are no hooks for the "all" target.

 By convention, properties used by abuild start with "abuild.".
 Properties used by abuild that are not intended to be set by users in
 interface or properties files start with "abuild.private.".

-->

<project name="abuild" default="all">

 <!-- Load task definitions -->
 <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
 <taskdef resource="org/abuild/ant/tasks.properties"/>
 <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy"/>

 <!--

  Set private properties to support various directory layout
  convetions.  Since abuild invokes ant with basedir set to its output
  directory.  Relative paths therefore are treated as relative to that
  directory.

  Note: if changing this, please ensure that the abuild manual is
  updated accordingly.

  There appears to be no clean way of adding something to a fileset
  conditionally upon its existence.  In order to avoid forcing the
  user to create empty directories, we create an empty directory and
  assign the property that names each optional directory to the empty
  directory if the real one doesn't exist.  An earlier implementation
  created an empty fileset and used refid to point to it.  Although
  this alleviated the need to create the empty directory, filesets and
  paths don't inherit through calls to ant and antcall which prevents
  their use from hooks.  The "empty" directory is created by the init
  task.

  By convention, the "dir" properties always point to the path we are
  actually using.  The "optional" properties point to the real
  location of the optional directories.  Only this initialization code
  should ever refer to the "optional" properties.  We use this level
  of indirection so that we can use the "location" attribute to set
  the absolute path.

 -->

 <!--  build item directory: where Abuild.conf, etc. reside        -->
 <property name="abuild.private.dir.item" location=".."/>

 <property name="abuild.private.dir.empty" location="empty"/>

 <!--  Create properties for the optional directories as           -->
 <!--  described above.                                            -->

 <!--  location of source files                                    -->
 <property name="abuild.private.optional.jsrc"
           location="${abuild.private.dir.item}/src/java"/>
 <condition property="abuild.private.dir.jsrc"
            value="${abuild.private.optional.jsrc}"
            else="${abuild.private.dir.empty}">
  <available type="dir" file="${abuild.private.optional.jsrc}"/>
 </condition>
 <!--  location of other static resources to be included in the    -->
 <!--  jar file                                                    -->
 <property name="abuild.private.optional.resources"
           location="${abuild.private.dir.item}/src/resources"/>
 <condition property="abuild.private.dir.resources"
            value="${abuild.private.optional.resources}"
            else="${abuild.private.dir.empty}">
  <available type="dir" file="${abuild.private.optional.resources}"/>
 </condition>
 <!--  location of other static files to be included in the war    -->
 <!--  file                                                        -->
 <property name="abuild.private.optional.web"
           location="${abuild.private.dir.item}/src/web"/>
 <condition property="abuild.private.dir.web"
            value="${abuild.private.optional.web}"
            else="${abuild.private.dir.empty}">
  <available type="dir" file="${abuild.private.optional.web}"/>
 </condition>
 <!--  location of other static files to be included in the        -->
 <!--  META-INF directory                                          -->
 <property name="abuild.private.optional.conf"
           location="${abuild.private.dir.item}/src/conf"/>
 <condition property="abuild.private.dir.conf"
            value="${abuild.private.optional.conf}"
            else="${abuild.private.dir.empty}">
  <available type="dir" file="${abuild.private.optional.conf}"/>
 </condition>

 <!--  Create properties for generated files.  We create these     -->
 <!--  directories, so we know they will exist and can avoid the   -->
 <!--  extra level of indirection.                                 -->

 <!--  location of generated source files                          -->
 <property name="abuild.private.dir.generated-jsrc" location="src/java"/>
 <!--  location of other generated resources to be included in     -->
 <!--  the jar file                                                -->
 <property name="abuild.private.dir.generated-resources"
           location="src/resources"/>
 <!--  location of other generated resources to be included in     -->
 <!--  the war file                                                -->
 <property name="abuild.private.dir.generated-web"
           location="src/web"/>
 <!--  location of other generated resources to be included in     -->
 <!--  the META-INFO directory                                     -->
 <property name="abuild.private.dir.generated-conf"
           location="src/conf"/>
 <!--  location of compiled class files                            -->
 <property name="abuild.private.dir.classes" location="classes"/>
 <!--  location of exported files                                  -->
 <property name="abuild.private.dir.dist" location="dist"/>
 <!--  location of copied classpath files for ear and war          -->
 <!--  generation                                                  -->
 <property name="abuild.private.dir.classpath" location="classpath"/>

 <!--  Load dynamic Abuild information file                        -->
 <property file=".ab-dynamic-ant.properties"/>

 <!--  Load Abuild build files                                     -->
 <groovy src="${abuild.top}/ant/ImportPreplugins.groovy"/>
 <import file="${basedir}/.abuild-load.xml"/>

 <property file="${abuild.private.dir.item}/Abuild-ant.properties"/>
 <if>
  <and>
   <isset property="abuild.use-local-hooks"/>
   <isset property="abuild.private.support-1_0"/>
  </and>
  <then>
   <deprecate version="1.1" message="abuild.use-local-hooks is no longer needed; abuild now always behaves as if this is set"/>
  </then>
 </if>

 <if>
  <isset property="abuild.local-buildfile"/>
  <then>
   <import file="${abuild.private.dir.item}/${abuild.local-buildfile}"/>
  </then>
 </if>

 <abuild-setup/>

 <condition property="ant.build.javac.target"
            value="${abuild.java-target-version}">
  <isset property="abuild.java-target-version"/>
 </condition>
 <condition property="ant.build.javac.source"
            value="${abuild.java-source-version}">
  <isset property="abuild.java-source-version"/>
 </condition>
 <!--  If the source version wasn't specified but the target       -->
 <!--  version was, explicitly use the target version as the       -->
 <!--  source version.  This will have no effect if both were      -->
 <!--  set.                                                        -->
 <condition property="ant.build.javac.source"
            value="${abuild.java-target-version}">
  <isset property="abuild.java-target-version"/>
 </condition>

 <!--  Assume we should only compile if a jar or war file name is  -->
 <!--  defined.                                                    -->
 <condition property="abuild.private.need-compile">
  <or>
   <isset property="abuild.jar-name"/>
   <isset property="abuild.war-name"/>
  </or>
 </condition>

 <condition property="abuild.private.jar-name-has-suffix">
  <and>
   <isset property="abuild.jar-name"/>
   <matches string="${abuild.jar-name}" pattern="\."/>
  </and>
 </condition>

 <!--  Define special "all" target                                 -->
 <target name="all" depends="package"
         description="Build anything needed by items that depend on this item"/>

 <!--  For compatibility with make-based backends                  -->
 <target name="check" depends="test"/>

 <!--  Help targets                                                -->

 <filterchain id="help-filter">
  <linecontainsregexp negate="true">
   <regexp pattern="^#"/>
  </linecontainsregexp>
 </filterchain>

 <target name="properties-help"
    description="Show abuild-specific help for Abuild-ant.properties files">
  <concat>
   <fileset dir="${abuild.top}/ant" includes="properties-help.txt"/>
   <filterchain refid="help-filter"/>
  </concat>
  <run-hooks name="properties-help"/>
 </target>

 <target name="hooks-help"
         description="Show abuild-specific help for ant-hooks.xml files">
  <concat>
   <fileset dir="${abuild.top}/ant" includes="hooks-help.txt"/>
   <filterchain refid="help-filter"/>
  </concat>
 </target>

 <!--  If users' Abuild.interface files have been created          -->
 <!--  correctly, this path includes all items that were built in  -->
 <!--  this build tree or one of its backing areas or externals.   -->
 <!--  The only place built-classpath should be used is in the     -->
 <!--  construction of ear files.  For anything that needs to      -->
 <!--  know about the actual compile-time or run-time classpath,   -->
 <!--  use complete-classpath instead.                             -->
 <path id="built-classpath">
  <pathelement path="${abuild.classpath}"/>
 </path>
 <!--  This path class includes all external jar files as well.    -->
 <path id="complete-classpath">
  <pathelement path="${abuild.classpath}"/>
  <pathelement path="${abuild.classpath.external}"/>
 </path>
 <!--  The abuild.private.complete-classpath-jar property and      -->
 <!--  complete-classpath-jar path contains each element of the    -->
 <!--  complete classpath except that any element that does end    -->
 <!--  with .jar has .jar appended to it.  This enables us to      -->
 <!--  have har, sar, and other archive types in our classpath     -->
 <!--  even though some versions of javac ignore them if           -->
 <!--  specified in the compile classpath.  This code precludes    -->
 <!--  our adding directories to abuild.classpath.  This is        -->
 <!--  documented.                                                 -->
 <pathconvert property="abuild.private.complete-classpath-jar"
              refid="complete-classpath">
  <chainedmapper>
   <globmapper from="*" to="*.jar"/>
   <regexpmapper from="^(.*?)(\.jar(?:\.jar)?)$" to="\1.jar"/>
  </chainedmapper>
 </pathconvert>
 <path id="complete-classpath-jar">
  <pathelement path="${abuild.private.complete-classpath-jar}"/>
 </path>
 <!--  This is the same transformation but only for the built      -->
 <!--  classpath, not the complete classpath.                      -->
 <pathconvert property="abuild.private.built-classpath-jar"
              refid="built-classpath">
  <chainedmapper>
   <globmapper from="*" to="*.jar"/>
   <regexpmapper from="^(.*?)(\.jar(?:\.jar)?)$" to="\1.jar"/>
  </chainedmapper>
 </pathconvert>
 <path id="built-classpath-jar">
  <pathelement path="${abuild.private.built-classpath-jar}"/>
 </path>

 <!--  Perform some additional validations.                        -->

 <condition property="multiple-archive-types">
  <!--  It would be nice if there were a better way of testing     -->
  <!--  whether at most one of these properties is set.            -->
  <or>
   <and>
    <isset property="abuild.jar-name"/>
    <isset property="abuild.war-name"/>
   </and>
   <and>
    <isset property="abuild.jar-name"/>
    <isset property="abuild.ear-name"/>
   </and>
   <and>
    <isset property="abuild.war-name"/>
    <isset property="abuild.ear-name"/>
   </and>
  </or>
 </condition>

 <!--  Define standard targets.  Each calls hooks as needed        -->

 <target name="init">
  <fail message="at most one of abuild.jar-name, abuild-war-name, and abuild.ear-name may be set"
        if="multiple-archive-types"/>
  <!--  Create directories that are potentially needed by          -->
  <!--  numerous targets and hooks.                                -->
  <mkdir dir="${abuild.private.dir.empty}"/>
  <mkdir dir="${abuild.private.dir.classes}"/>
  <mkdir dir="${abuild.private.dir.dist}"/>
  <mkdir dir="${abuild.private.dir.generated-jsrc}"/>
  <mkdir dir="${abuild.private.dir.generated-resources}"/>
  <mkdir dir="${abuild.private.dir.generated-web}"/>
  <mkdir dir="${abuild.private.dir.generated-conf}"/>
  <run-hooks name="init"/>
 </target>

 <target name="generate" depends="init"
         description="Create automatically generated sources">
  <run-hooks name="generate"/>
 </target>

 <target name="compile" depends="generate,-pre-compile,-do-compile,-copy-classpath,-post-compile"
         description="Compile sources"/>

 <target name="-pre-compile">
  <run-hooks name="pre-compile"/>
 </target>

 <target name="-post-compile">
  <run-hooks name="post-compile"/>
 </target>

 <target name="-do-compile" if="abuild.private.need-compile">
  <property name="debug" value="true"/>
  <property name="deprecation" value="on"/>
  <condition property="abuild.private.includeantruntime" value="yes" else="no">
   <isset property="abuild.include-ant-runtime"/>
  </condition>
  <!--  Source and target may be overridden by setting properties  -->
  <!--  in Abuild-ant.properties.  See properties-help.txt for     -->
  <!--  details.                                                   -->
  <javac debug="${debug}"
         deprecation="${deprecation}"
         destdir="${abuild.private.dir.classes}"
         includeantruntime="${abuild.private.includeantruntime}"
         classpathref="complete-classpath-jar">
   <src path="${abuild.private.dir.jsrc}"/>
   <src path="${abuild.private.dir.generated-jsrc}"/>
   <compilerarg value="-Xlint"/>
   <compilerarg value="-Xlint:-path"/>
  </javac>
 </target>

 <condition property="abuild.private.classpath-to-copy"
            value="built-classpath">
  <isset property="abuild.ear-name"/>
 </condition>
 <condition property="abuild.private.classpath-to-copy.exception"
            value="${abuild.ear-name}">
  <isset property="abuild.ear-name"/>
 </condition>
 <condition property="abuild.private.classpath-to-copy"
            value="built-classpath-jar">
  <isset property="abuild.war-name"/>
 </condition>
 <condition property="abuild.private.classpath-to-copy.exception"
            value="${abuild.war-name}.jar">
  <isset property="abuild.war-name"/>
 </condition>

 <target name="-copy-classpath" if="abuild.private.classpath-to-copy">
  <delete dir="${abuild.private.dir.classpath}"/>
  <mkdir dir="${abuild.private.dir.classpath}"/>
  <copy flatten="true" todir="${abuild.private.dir.classpath}">
   <restrict xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors">
    <path refid="${abuild.private.classpath-to-copy}"/>
    <rsel:not>
     <rsel:name name="${abuild.private.dir.dist}/${abuild.private.classpath-to-copy.exception}"/>
    </rsel:not>
   </restrict>
  </copy>
 </target>

 <condition property="abuild.private.need-ear">
  <and>
   <isset property="abuild.ear-name"/>
   <isset property="abuild.application-xml"/>
  </and>
 </condition>

 <condition property="abuild.private.ear-name-has-suffix">
  <and>
   <isset property="abuild.ear-name"/>
   <matches string="${abuild.ear-name}" pattern="\."/>
  </and>
 </condition>

 <condition property="abuild.private.need-package">
  <or>
   <isset property="abuild.private.need-compile"/>
   <isset property="abuild.private.need-ear"/>
  </or>
 </condition>

 <target name="package"
         depends="compile,-pre-package,-do-package,-post-package"
         if="abuild.private.need-package"
         description="Create jar, ear, or other package files"/>

 <target name="-pre-package">
  <run-hooks name="pre-package"/>
 </target>

 <target name="-do-package" depends="jar,war,ear,wrapper"
         if="abuild.private.need-package"/>

 <target name="-post-package">
  <run-hooks name="post-package"/>
 </target>

 <target name="-define-jar-macro">
  <macrodef name="build-jar-using-manifest-attributes">
   <element name="manifest-attributes" implicit="true" optional="true"/>
   <sequential>
    <pathconvert refid="complete-classpath-jar" dirsep="/" pathsep=" "
                 property="manifest-classpath">
     <mapper type="flatten"/>
    </pathconvert>
    <fail message="abuild.jar-name must have a filename extension"
          unless="abuild.private.jar-name-has-suffix"/>
    <jar destfile="${abuild.private.dir.dist}/${abuild.jar-name}">
     <fileset dir="${abuild.private.dir.classes}">
      <include name="**/*.class"/>
     </fileset>
     <fileset dir="${abuild.private.dir.resources}"/>
     <fileset dir="${abuild.private.dir.generated-resources}"/>
     <metainf dir="${abuild.private.dir.conf}"/>
     <metainf dir="${abuild.private.dir.generated-conf}"/>
     <manifest>
      <attribute name="Class-Path" value="${manifest-classpath}"/>
      <manifest-attributes/>
     </manifest>
    </jar>
    <if>
     <not>
      <matches string="${abuild.jar-name}" pattern="\.jar$"/>
     </not>
     <then>
      <copy file="${abuild.private.dir.dist}/${abuild.jar-name}"
            tofile="${abuild.private.dir.dist}/${abuild.jar-name}.jar"/>
     </then>
    </if>
   </sequential>
  </macrodef>
 </target>

 <condition property="abuild.private.jar-with-main-class">
  <and>
   <isset property="abuild.jar-name"/>
   <isset property="abuild.main-class"/>
  </and>
 </condition>

 <target name="-jar-with-main-class" if="abuild.private.jar-with-main-class"
         depends="-define-jar-macro">
  <build-jar-using-manifest-attributes>
   <attribute name="Main-Class" value="${abuild.main-class}"/>
  </build-jar-using-manifest-attributes>
 </target>

 <condition property="abuild.private.jar-without-main-class">
  <and>
   <isset property="abuild.jar-name"/>
   <not>
    <isset property="abuild.main-class"/>
   </not>
  </and>
 </condition>

 <target name="-jar-without-main-class"
         if="abuild.private.jar-without-main-class"
         depends="-define-jar-macro">
  <build-jar-using-manifest-attributes/>
 </target>

 <target name="jar"
         depends="compile,-jar-with-main-class,-jar-without-main-class"
         if="abuild.jar-name"/>

 <condition property="abuild.private.need-war">
  <and>
   <isset property="abuild.war-name"/>
   <isset property="abuild.web-xml"/>
  </and>
 </condition>

 <condition property="abuild.private.war-name-has-suffix">
  <and>
   <isset property="abuild.war-name"/>
   <matches string="${abuild.war-name}" pattern="\."/>
  </and>
 </condition>

 <!--  The achieves this simple goal: if abuild.war-type is        -->
 <!--  client, copy the classpath to the root of the war file.     -->
 <!--  If it is server, copy it to WEB-INF/lib.                    -->
 <condition property="abuild.private.war-classpath-lib"
            value="${abuild.private.dir.classpath}"
            else="${abuild.private.dir.empty}">
  <and>
   <isset property="abuild.war-type"/>
   <equals arg1="${abuild.war-type}" arg2="server"/>
  </and>
 </condition>
 <condition property="abuild.private.war-classpath-lib-exclude"
            value="" else="**">
  <and>
   <isset property="abuild.war-type"/>
   <equals arg1="${abuild.war-type}" arg2="server"/>
  </and>
 </condition>
 <condition property="abuild.private.war-classpath-root"
            value="${abuild.private.dir.classpath}"
            else="${abuild.private.dir.empty}">
  <and>
   <isset property="abuild.war-type"/>
   <equals arg1="${abuild.war-type}" arg2="client"/>
  </and>
 </condition>
 <condition property="abuild.private.valid-war-type">
  <or>
   <equals arg1="${abuild.war-type}" arg2="client"/>
   <equals arg1="${abuild.war-type}" arg2="server"/>
  </or>
 </condition>

 <target name="war" depends="compile" if="abuild.private.need-war">
  <fail message="abuild.war-name must have a filename extension"
        unless="abuild.private.war-name-has-suffix"/>
  <fail message="abuild.war-type must have the value &quot;client&quot; or &quot;server&quot;"
        unless="abuild.private.valid-war-type"/>
  <war destfile="${abuild.private.dir.dist}/${abuild.war-name}"
       webxml="${abuild.private.dir.item}/${abuild.web-xml}">
   <webinf dir="${abuild.private.dir.conf}"/>
   <webinf dir="${abuild.private.dir.generated-conf}"/>
   <classes dir="${abuild.private.dir.classes}">
    <include name="**/*.class"/>
   </classes>
   <lib dir="${abuild.private.war-classpath-lib}"
        excludes="${abuild.private.war-classpath-lib-exclude}"/>
   <fileset dir="${abuild.private.war-classpath-root}"/>
   <fileset dir="${abuild.private.dir.web}"/>
   <fileset dir="${abuild.private.dir.generated-web}"/>
  </war>
 </target>

 <target name="ear" depends="jar" if="abuild.private.need-ear">
  <fail message="abuild.ear-name must have a filename extension"
        unless="abuild.private.ear-name-has-suffix"/>
  <!--  Include all jars in the abuild.classpath property but not  -->
  <!--  those in the abuild.classpath.external property.  This     -->
  <!--  does not include any jars we built locally unless they     -->
  <!--  are also in the abuild.classpath variable.                 -->
  <ear destfile="${abuild.private.dir.dist}/${abuild.ear-name}"
       appxml="${abuild.private.dir.item}/${abuild.application-xml}">
   <fileset dir="${abuild.private.dir.classpath}"/>
   <fileset dir="${abuild.private.dir.resources}"/>
   <fileset dir="${abuild.private.dir.generated-resources}"/>
   <metainf dir="${abuild.private.dir.conf}"/>
   <metainf dir="${abuild.private.dir.generated-conf}"/>
  </ear>
 </target>

 <condition property="abuild.private.need-wrapper">
  <and>
   <isset property="abuild.main-class"/>
   <isset property="abuild.wrapper-name"/>
  </and>
 </condition>

 <target name="wrapper" description="create executable wrapper"
         if="abuild.private.need-wrapper">
  <pathconvert property="wrapper.classpath">
   <!--  This is likely to create command lines that are too long  -->
   <!--  because of the absolute path.                             -->
   <path refid="complete-classpath-jar"/>
   <fileset dir="${abuild.private.dir.dist}" includes="*.jar"/>
  </pathconvert>
  <if>
   <os family="windows"/>
   <then>
    <echo file="${abuild.wrapper-name}.bat">@echo off
java -classpath ${wrapper.classpath} ${abuild.main-class} %1 %2 %3 %4 %5 %6 %7 %8 %9
</echo>
    <!-- in case we're in cygwin... -->
    <echo file="${abuild.wrapper-name}">#!/bin/sh
exec `dirname $0`/`basename $0`.bat ${1+"$@"}
</echo>
    <chmod file="${abuild.wrapper-name}" perm="a+x"/>
   </then>
   <else>
    <echo file="${abuild.wrapper-name}">#!/bin/sh
exec java -classpath ${wrapper.classpath} ${abuild.main-class} ${1+"$@"}
</echo>
    <chmod file="${abuild.wrapper-name}" perm="a+x"/>
   </else>
  </if>
 </target>

 <!--  The qtest test framework tries to colorize its              -->
 <!--  PASSED/FAILED output and tries to right-justify its         -->
 <!--  output.  If we are running qtest-driver from ant and are    -->
 <!--  not in emacs mode, it will generate incorrect results       -->
 <!--  because ant adds extra margin on its own from the exec      -->
 <!--  task.  If ant is invoked from abuild with the -e or emacs   -->
 <!--  flag, then it passes the -e option to ant and also sets     -->
 <!--  the property abuild.private.emacs-mode.  Unless this is     -->
 <!--  set, we add 12 characters to qtest-driver's margin.  This   -->
 <!--  is an unfortunate workaround.                               -->
 <condition property="abuild.private.qtest_extra_margin"
            value="12" else="0">
  <not>
   <isset property="abuild.private.emacs-mode"/>
  </not>
 </condition>

 <target name="test" depends="all,test-only"
         description="Run test suites"/>

 <target name="test-only" depends="-pre-test,-do-test,-post-test"
         description="Run test suites; does not depend on 'all'"/>

 <target name="-pre-test">
  <run-hooks name="pre-test"/>
 </target>

 <target name="-post-test">
  <run-hooks name="post-test"/>
 </target>

 <target name="-do-test" depends="-test-junit,-test-qtest">
  <run-hooks name="test"/>
 </target>

 <condition property="abuild.private.need-junit">
  <isset property="abuild.junit.testsuite"/>
 </condition>

<!--  Note: the individual -test targets must not depend on "all"  -->
<!--  or "package" as that will prevent "test-only" from working   -->
<!--  to run tests without building first.  The idea is that an    -->
<!--  autobuilder could run "abuild -k -b all" and then "abuild    -->
<!--  -k -b all test-only" to avoid having to repeat all the       -->
<!--  "all" prerequisites when testing.                            -->

 <!--  Abuild is not distributed with JUnit.  The documentation    -->
 <!--  discusses this: it is the user's responsibility to make     -->
 <!--  sure that JUnit is present in the classpath.                -->
 <target name="-test-junit"
         if="abuild.private.need-junit">
  <mkdir dir="junit"/>
  <junit printsummary="yes" haltonfailure="yes" fork="true">
   <classpath>
    <path refid="complete-classpath-jar"/>
    <fileset dir="${abuild.private.dir.dist}" includes="*.jar"/>
   </classpath>
   <test name="${abuild.junit.testsuite}"
         todir="${abuild.private.dir.dist}">
    <formatter type="xml"/>
   </test>
  </junit>
  <junitreport todir="junit">
   <fileset dir="${abuild.private.dir.dist}">
    <include name="TEST-*.xml"/>
   </fileset>
   <report format="frames" todir="junit/html"/>
  </junitreport>
 </target>

 <available property="abuild.private.need-qtest"
            file="${abuild.private.dir.item}/qtest"/>

 <condition property="abuild.private.qtest.tty"
            value="true" else="false">
  <equals arg1="${ABUILD_STDOUT_IS_TTY}" arg2="1"/>
 </condition>

 <condition property="abuild.private.qtest.emacs"
            value="true" else="false">
  <equals arg1="${abuild.private.emacs-mode}" arg2="1"/>
 </condition>

 <target name="-test-qtest" if="abuild.private.need-qtest">
  <qtest emacsmode="${abuild.private.qtest.emacs}"
         stdoutistty="${abuild.private.qtest.tty}"/>
 </target>

 <target name="deploy" depends="all" description="Deploy packages">
  <run-hooks name="deploy"/>
 </target>

 <target name="doc" depends="all,-doc"/>

 <target name="-doc">
  <run-hooks name="doc"/>
 </target>

 <target name="other"
    description="Catch-all used to invoke local or build-item hooks">
  <run-hooks name="other"/>
 </target>

</project>
