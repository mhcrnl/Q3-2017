## ctk: description Enter list of options
## ctk: title Enter list of options
## ctk: application 'clickTk' 'C:/Dokumente und Einstellungen/marco/Projekte/ClickTk/lib'
## ctk: strict  1
## ctk: code  3
## ctk: testCode  0
## ctk: subroutineName thisDialog
## ctk: autoExtractVariables  1
## ctk: autoExtract2Local  1
## ctk: modalDialogClassName DialogBox
## ctk: modal 1
## ctk: buttons
## ctk: baseClass  Tk::DialogBox
## ctk: isolGeom 0
## ctk: version 4.11
## ctk: onDeleteWindow  sub{1}
## ctk: Toplevel  0
## ctk: argList -buttons,['Ok','Cancel']
## ctk: treewalk D
## ctk: 2009 12 03 - 17:48:50

use strict;
use Tk;
use Tk::Label;
use Tk::TextUndo;


package ctkDlgArrayList;
use vars qw($VERSION);
$VERSION = '1.01';
require Tk::DialogBox;
require Tk::Derived;
@ctkDlgArrayList::ISA = qw(Tk::Derived Tk::DialogBox);
Construct Tk::Widget 'ctkDlgArrayList';
## ctk: Globalvars
## ctk: Globalvars end
sub ClassInit {
	my $self = shift;
##
## 	init class
##
	$self->SUPER::ClassInit(@_);

}

sub Populate {
	my ($self,$args) = @_;
##
## ctk: Localvars

	my $options = delete $args->{-options} if (exists $args->{-options});
	$options = '' unless defined $options;

## ctk: Localvars end
## 	move args to local variables)
##
	$self->SUPER::Populate($args);
##
##
my $mw = $self;
## ctk: code generated by ctk_w version '4.11'
## ctk: lexically scoped variables for widgets
my (
$wr_001,
$wr_002
);
## ctk: instantiate and display widgets

## ctk: widgets generated using treewalk D
$wr_002 = $mw -> Label ( -anchor , 'nw' , -justify , 'left' , -relief , 'flat' , -text , 'Enter one option per line in the form -name , value'  ) -> pack(-anchor=>'nw', -side=>'top', -pady=>5, -fill=>'both', -expand=>1, -padx=>5);
$wr_001 = $mw -> Scrolled ( 'TextUndo' , -background , '#ffffff' , -width , 30 , -state , 'normal' , -takefocus , 1 , -height , 10 , -relief , 'sunken' , -scrollbars , 'osoe' , -wrap , 'none'  ) -> pack(-side=>'top', -anchor=>'nw', -pady=>5, -fill=>'both', -expand=>1, -padx=>5);
$self->bind('<Return>',''); ## do not unbind the <return> callbacks of the buttons !!!
$wr_001->menu(undef);

## ctk: end of gened Tk-code


	$self->ConfigSpecs('-dlm',['PASSIVE','dlm','Dlm',['','']]);
## ctk: public subwidgets
	$self->Advertise('options'=> $wr_001);
## ctk: public subwidgets end
## 	$self->Delegates(); 	(optional)
	$self->editOptions($options) if(defined $options);

	return $self;
}
## ctk: methods

sub onOK {
	my $self = shift;
	my ($wE) = @_;
	my $w = $self->Subwidget('options')->get('0.1','end');
	$w =~s /\n+$//;
	$w =~s /\n+/,/g;
	$w =~s /\t/ /g;
	my ($dlm1,$dlm2,$dlm3,$dlm4) = @{$self->cget('-dlm')};

	$dlm1 ='' unless defined $dlm1;
	$dlm2 ='' unless defined $dlm2;
	$dlm3 ='' unless defined $dlm3;
	$dlm4 ='' unless defined $dlm4;
	my @opt = ctkParser->parse_qw_array($w,0); ## accept qw//
	$w = ctkParser->quotatY(\@opt,'"');
	$wE->delete(0,'end');

	$w = $dlm1 . $w ;
	$w = $w . $dlm4 ;
	$wE->insert('end',$w);
	$wE->update();
}

sub editOptions {
	my $self =shift;
	my ($options) = @_;
	my $w = $self->Subwidget('options');

	my ($dlm1,$dlm2) = ($1,$2) if($options =~ s/^(\[*)((qw[\/\(]){0,1})//);
	my ($dlm3,$dlm4) = ($1,$2) if ($options =~ s/([\)\/]*)(\]*)$//);
	my @opt = ctkParser->parseStringQuotate($options);
	while (@opt) {
		my $v = shift @opt;
		$w->insert('end',"$v\n");
	}
	$self->configure(-dlm,[$dlm1,$dlm2,$dlm3,$dlm4]);
	return 1;
}

sub editArray {
	my $self =shift;
	my ($options) = @_;
	my $w = $self->Subwidget('options');
	my ($dlm1,$dlm2) = ($1,$2) if($options =~ s/^(\[*)((qw[\/\(]){0,1})//);
	my ($dlm3,$dlm4) = ($1,$2) if ($options =~ s/([\)\/]*)(\]*)$//);
	$self->configure(-dlm,[$dlm1,$dlm2,$dlm3,$dlm4]);
	my @array = ctkParser->parseStringQuotate($options);
	while (@array) {
		my $v = shift @array;
		$w->insert('end',"$v\n");
	}
	return 1;
}

## ctk: methods end
## ctk: other code
## ctk: eof 2009 12 03 - 17:48:50
1;	## make perl compiler happy...

=pod

=head1 ctkDlgGetCode

	Enter the items's list for options of type 'List'

	This class provides a composite widget which
	get used to enter the list of items by means of
	a scrolled TextUndo widget.

=head2 Maintenance

		History
			01.12.2007 first draft
			29.01.2008 version 1.03
			06.03.2008 version 1.04

=head3 Public interface

=over

=item Methods

	- ClassInit
	- Populate
	- onOK
	- editOptions

=item Subwidgets

	options

=back

=cut
