## ctk: description Hex Calculator,  compute address from base  and offset.
## ctk: title Hex calculator
## ctk: application 'dumpAnalysis' 'C:/Dokumente und Einstellungen/marco/Projekte/PL1V3R7/Dumps'
## ctk: strict  1
## ctk: code  3
## ctk: testCode  1
## ctk: subroutineName thisDialog
## ctk: autoExtractVariables  1
## ctk: autoExtract2Local  1
## ctk: modal 0
## ctk: buttons
## ctk: baseClass  Tk::Toplevel
## ctk: isolGeom 0
## ctk: version 4.11
## ctk: onDeleteWindow  sub{$mw->destroy}
## ctk: Toplevel  0
## ctk: argList -title , 'Hex calculator'
## ctk: treewalk B
## ctk: 2010 07 30 - 11:25:34

## ctk: uselib start

use lib 'C:/Dokumente und Einstellungen/marco/Projekte/PL1V3R7/Dumps';

## ctk: uselib end

use strict;
use Tk;
use Tk::Button;
use Tk::Entry;
use Tk::Frame;
use Tk::Label;
my  $mw=MainWindow->new(-title=>'Hex calculator');


package daCalculator;
use vars qw($VERSION);
$VERSION = '1.01';
require Tk::Toplevel;
require Tk::Derived;
@daCalculator::ISA = qw(Tk::Derived Tk::Toplevel);
Construct Tk::Widget 'daCalculator';
## ctk: Globalvars

my ($address,$baseAddress,$offset);

## ctk: Globalvars end
sub ClassInit {
	my $self = shift;
##
## 	init class
##
	$self->SUPER::ClassInit(@_);

## ctk: gcode
use daHex;
## ctk: gcode
}
sub Populate {
	my ($self,$args) = @_;
##
## ctk: Localvars
## ctk: Localvars end
## 	move args to local variables)
##
	$self->SUPER::Populate($self->arglist($args));
##
##
my $mw = $self;
## ctk: code generated by ctk_w version '4.11'
## ctk: lexically scoped variables for widgets

my (
$wr_001,
$wr_002,
$wr_003,
$wr_004,
$wr_006,
$wr_008,
$wr_010,
$wr_012,
$wr_013,
$wr_014,
$wr_016
);
## ctk: instantiate and display widgets

## ctk: widgets generated using treewalk B
$wr_001 = $mw -> Frame ( -borderwidth , 1 , -relief , 'sunken'  ) -> pack(-ipady=>5, -ipadx=>5, -anchor=>'nw', -side=>'top', -pady=>5, -fill=>'both', -expand=>1, -padx=>5);

$wr_012 = $mw -> Frame ( -borderwidth , 1 , -relief , 'sunken'  ) -> pack(-side=>'top', -anchor=>'nw', -fill=>'x', -expand=>1);

$wr_013 = $wr_012 -> Button ( -relief , 'raised' , -background , '#ffffff' , -command , \&_add , -state , 'normal' , -text , 'Add'  ) -> pack(-side=>'left', -anchor=>'nw', -pady=>5, -fill=>'x', -expand=>1, -padx=>5);

$wr_002 = $wr_001 -> Label ( -anchor , 'w' , -justify , 'left' , -text , 'Base address' , -relief , 'flat'  ) -> grid(-row=>0, -column=>0, -sticky=>'nse');

$wr_003 = $wr_001 -> Entry ( -relief , 'sunken' , -textvariable , \$baseAddress , -background , '#ffffff' , -width , 10 , -state , 'normal' , -justify , 'left'  ) -> grid(-row=>0, -column=>1, -sticky=>'nse');

$wr_004 = $wr_001 -> Label ( -anchor , 'w' , -justify , 'left' , -text , 'Offset' , -relief , 'flat'  ) -> grid(-row=>1, -column=>0, -sticky=>'nse');

$wr_006 = $wr_001 -> Entry ( -relief , 'sunken' , -textvariable , \$offset , -background , '#ffffff' , -state , 'normal' , -width , 10 , -justify , 'left'  ) -> grid(-row=>1, -column=>1, -sticky=>'nse');

$wr_008 = $wr_001 -> Label ( -anchor , 'w' , -justify , 'left' , -relief , 'flat' , -text , 'Address'  ) -> grid(-row=>2, -column=>0, -sticky=>'nse');

$wr_010 = $wr_001 -> Entry ( -relief , 'sunken' , -textvariable , \$address , -background , '#ffffff' , -state , 'normal' , -width , 10 , -justify , 'left'  ) -> grid(-row=>2, -column=>1, -sticky=>'nse');

$wr_014 = $wr_012 -> Button ( -relief , 'raised' , -background , '#ffffff' , -command , \&_subtract , -state , 'normal' , -text , 'Subtract'  ) -> pack(-side=>'left', -anchor=>'nw', -pady=>5, -fill=>'x', -expand=>1, -padx=>5);

$wr_016 = $wr_012 -> Button ( -relief , 'raised' , -background , '#ffffff' , -command , \&_clear , -state , 'normal' , -text , 'Clear'  ) -> pack(-side=>'left', -anchor=>'nw', -pady=>5, -fill=>'x', -expand=>1, -padx=>5);

## ctk: end of gened Tk-code

## 	ctkTargetComposite->ConfigSpecs();
## 	$self->Delegates(); 	(optional)
	return $self;
}
## ctk: methods

## prepare arglist for superclass and save args into local vars

sub arglist {
	my $self = shift;
	my ($args) = @_;
	$baseAddress = delete $args->{-baseAddress} if exists $args->{-baseAddress};
	$offset = delete $args->{-offset} if exists $args->{-offset};
	return $args
}
sub _add {
	my $self = shift;
	$address = daHex::xAdd($baseAddress,$offset);
	return $address;
}
sub _subtract {
	my $self = shift;
	$address = daHex::xSub($baseAddress,$offset);
	return $address;
}
sub _clear {
	my $self = shift;
	$address = $baseAddress = $offset = 0;
	return 1
}
## ctk: methods end

## ctk: testCode
# -----------------------------------------------
##
package main;
&main::init();
my (%args) =(-title , 'Hex calculator' , -baseAddress, 123, -offset, 45 );
my $instance = $mw->daCalculator(%args);
$instance->protocol('WM_DELETE_WINDOW',sub{$mw->destroy});
MainLoop;
##
## ctk: testCode end

## ctk: callbacks
sub init { 1 }
## ctk: other code
## ctk: eof 2010 07 30 - 11:25:34
1;	## make perl compiler happy...

