## ctk: description Test arglist method
## ctk: title Test arglist
## ctk: application '' ''
## ctk: strict  0
## ctk: code  3
## ctk: testCode  1
## ctk: subroutineName thisDialog
## ctk: autoExtractVariables  1
## ctk: autoExtract2Local  0
## ctk: modal 0
## ctk: buttons  
## ctk: baseClass  Tk::Frame
## ctk: isolGeom 0
## ctk: version 4.11
## ctk: onDeleteWindow  sub{1}
## ctk: Toplevel  1
## ctk: argList -label,"$0 - arglist",,-borderwidth,1,-opt1,1,-opt2,2,-opt3,3   
## ctk: treewalk D 
## ctk: 2010 07 30 - 17:57:49

## ctk: uselib start

## ctk: uselib end

use Tk;
use Tk::Button;
use Tk::Label;
 $mw=MainWindow->new(-title=>'Test arglist');


package tx_composite;
use vars qw($VERSION);
$VERSION = '1.01';
require Tk::Frame;
require Tk::Derived;
@tx_composite::ISA = qw(Tk::Derived Tk::Frame);
Construct Tk::Widget 'tx_composite';
## ctk: Globalvars

my ($text);

## ctk: Globalvars end
sub ClassInit {
	my $self = shift;
##
## 	init class
##
	$self->SUPER::ClassInit(@_);

}
sub Populate {
	my ($self,$args) = @_;
##
## ctk: Localvars

my (%args);

## ctk: Localvars end
## 	move args to local variables)
##
	$self->SUPER::Populate($self->arglist($args));
##
##
my $mw = $self;
## ctk: code generated by ctk_w version '4.11' 
## ctk: instantiate and display widgets 

## ctk: widgets generated using treewalk D
$wr_002 = $mw -> Label ( -anchor , 'w' , -background , '#00ffff' , -justify , 'left' , -relief , 'flat' , -textvariable , \$text  ) -> pack(-side=>'top', -anchor=>'nw', -pady=>5, -fill=>'x', -padx=>5);
## ctk: order start  wr_002
$self->configure(-relief, 'soli');
## ctk: order end

$wr_004 = $mw -> Button ( -relief , 'raised' , -background , '#ffffff' , -command , sub{exit(0)} , -state , 'normal' , -text , 'Exit test'  ) -> pack(-side=>'top', -anchor=>'nw', -pady=>5, -fill=>'x', -padx=>5);

## ctk: end of gened Tk-code

## 	ctkTargetComposite->ConfigSpecs();
## 	$self->Delegates(); 	(optional)
	return $self;
}
## ctk: methods
sub arglist {
	my $self = shift;
	my ($args) = @_;
	$opt1 = delete $args->{-opt1} if exists $args->{-opt1};
	$opt2 = delete $args->{-opt2} if exists $args->{-opt2};
	$opt3 = delete $args->{-opt3} if exists $args->{-opt3};
	$text = "-opt1 = $opt1, -opt2=$opt2, -opt3=$opt3.";
	return $args
}
## ctk: methods end

## ctk: testCode
# -----------------------------------------------
##
package main;
&main::init();
my (%args) =(-label,"$0 - arglist",,-borderwidth,1,-opt1,1,-opt2,2,-opt3,3  );
my $toplevel = $mw->Toplevel();
my $instance = $toplevel->tx_composite(%args)->pack();
$toplevel->protocol('WM_DELETE_WINDOW',sub{1});
MainLoop;
##
## ctk: testCode end

## ctk: callbacks
sub init { 1 }
## ctk: other code
## ctk: eof 2010 07 30 - 17:57:49
1;	## make perl compiler happy...

