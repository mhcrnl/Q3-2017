NAME
    Net::Twitter - A perl interface to the Twitter API

VERSION
    This document describes Net::Twitter version 3.14002

SYNOPSIS
      use Net::Twitter;
      use Scalar::Util 'blessed';

      # When no authentication is required:
      my $nt = Net::Twitter->new(legacy => 0);

      # As of 13-Aug-2010, Twitter requires OAuth for authenticated requests
      my $nt = Net::Twitter->new(
          traits   => [qw/OAuth API::REST/],
          consumer_key        => $consumer_key,
          consumer_secret     => $consumer_secret,
          access_token        => $token,
          access_token_secret => $token_secret,
      );

      my $result = $nt->update('Hello, world!');

      eval {
          my $statuses = $nt->friends_timeline({ since_id => $high_water, count => 100 });
          for my $status ( @$statuses ) {
              print "$status->{created_at} <$status->{user}{screen_name}> $status->{text}\n";
          }
      };
      if ( my $err = $@ ) {
          die $@ unless blessed $err && $err->isa('Net::Twitter::Error');

          warn "HTTP Response Code: ", $err->code, "\n",
               "HTTP Message......: ", $err->message, "\n",
               "Twitter error.....: ", $err->error, "\n";
      }

DESCRIPTION
    This module provides a perl interface to the Twitter APIs. See
    <http://dev.twitter.com/doc> for a full description of the Twitter APIs.

NOTICE! BASIC AUTHENTICATION IS DEAD
    As of 31-Aug-2010, Twitter no longer supports Basic Authentication.
    OAuth is now required for authenticated requests. For more information,
    please see
    <http://github.com/semifor/Net-Twitter/wiki/Net::Twitter-and-the-death-o
    f-Basic-Authentication>.

    Other Twitter compatible services may still accept Basic Authentication,
    so support for it remains in "Net::Twitter".

OMG! THE MOOSE!
    Net::Twitter is Moose based. Moose provides some advantages, including
    the ability for the maintainer of this module to respond quickly to
    Twitter API changes.

    See Net::Twitter::Lite if you need an alternative without Moose and its
    dependencies.

    Net::Twitter::Lite's API method definitions and documentation are
    generated from Net::Twitter. It is a related module, but does not depend
    on Net::Twitter or Moose for installation.

RETURN VALUES
    Net::Twitter decodes the data structures returned by the Twitter API
    into native perl data structures (HASH references and ARRAY references).
    The full layout of those data structures are not documented, here. They
    change often, usually with the addition of new elements, and documenting
    all of those changes would be a significant challenge.

    Instead, rely on the online Twitter API documentation and inspection of
    the returned data.

    The Twitter API online documentation is located at
    <http://dev.twitter.com/doc>.

    To inspect the data, use Data::Dumper or similar module of your choice.
    Here's a simple example using Data::Dumper:

        use Data::Dumper;

        my $r = $nt->search($search_term);
        print Dumper $r;

    For more information on perl data structures, see perlreftut, perldsc,
    and perllol.

METHODS AND ARGUMENTS
    new This constructs a "Net::Twitter" object. It takes several named
        parameters, all of them optional:

        traits
            An ARRAY ref of traits used to control which APIs the
            constructed "Net::Twitter" object will support and how it
            handles errors. Possible values are:

            API::REST
                Provides support for the Twitter REST API methods.

            API::Search
                Provides support for the Twitter Search API methods.

            API::TwitterVision
                Provides support for the TwitterVision API. See
                <http://twittervision.com/api.html>.

            WrapError
                "Net::Twitter" normally throws exceptions on error. When
                this trait is included, "Net::Twitter" returns undef when a
                method fails and makes the error available through method
                "get_error". This is the way all errors were handled in
                Net::Twitter versions prior to version 3.00.

            OAuth
                The "OAuth" trait provides OAuth authentication rather than
                the default Basic Authentication for Twitter API method
                calls. See the "Authentication" section and
                Net::Twitter::Role::OAuth for full documentation.

            InflateObjects
                When this optional trait is included, Net::Twitter inflates
                HASH refs returned by Twitter into objects with read
                accessors for each element. In addition, it inflates dates
                to DateTime objects and URLs to URI objects. Objects that
                include a "created_at" attribute also have a
                "relative_created_at" method.

                For example, with "InflateObjects" applied, the
                <friends_timeline> method returns an array of status
                objects:

                    $r = $nt->friends_timeline;
                    for my $status ( @$r ) {
                        $r->user->screen_name; # same as $r->{user}{screen_name}

                        # $created_at is a DateTime; $age is a DateTime::Duration
                        my $age = DateTime->now - $r->created_at;

                        # print an age in a similar style to the Twitter web site, e.g.:
                        # less than a minute ago
                        # about a minute ago
                        # 6 minutes ago
                        # 1 day ago
                        # etc.
                        print $r->relative_created_at;

            RateLimit
                The "RateLimit" trait adds utility methods that return
                information about the current rate limit status. See
                Net::Twitter::Role::RateLimit for details.

            Legacy
                This trait provides backwards compatibility to
                "Net::Twitter" versions prior to 3.00. It implies the traits
                "API::REST", "API::Search", "API::TwitterVision", and
                "API::WrapError". It also provides additional functionality
                to ensure consistent behavior for applications written for
                use with legacy versions of "Net::Twitter".

                In the current version, this trait is automatically included
                if the "traits" option is not specified. This ensures
                backwards compatibility for existing applications using
                "Net::Twitter" versions prior to 3.00. See section "LEGACY
                COMPATIBILITY" for more details.

            Some examples of using the "traits" parameter in "new":

                # provide support for *only* the REST API; throw exceptions on error
                $nt = Net::Twitter->new(traits => ['API::REST']);

                # provide support for both the REST and Search APIs; wrap errors
                $nt = Net::Twitter->new(traits => [qw/API::REST API::Search WrapError/]);

                # ensure full legacy support
                $nt = Net::Twitter->new(traits => ['Legacy']);

                # currently, these 2 calls to new are equivalent:
                $nt = Net::Twitter->new();
                $nt = Net::Twitter->new(traits => ['Legacy']);

        legacy
            A boolean. If set to 0, "new" constructs a "Net::Twitter" object
            implementing the REST API and throws exceptions on API method
            errors.

                Net::Twitter->new(legacy => 0);

            is a shortcut for:

                Net::Twitter->new(traits => ['API::REST']);

            If set to 1, "new" constructs a "Net::Twitter" object with the
            "Legacy" trait.

                Net::Twitter->new(legacy => 1);

            is a shortcut for:

                Net::Twitter->new(traits => ['Legacy']);

        username
            This is the username for Basic Authentication. NOTE: as of
            31-Aug-2010, Twitter no longer supports Basic Authentication.
            Use OAuth instead. Other Twitter compatible services may,
            however, accept Basic Authentication, so support for it remains
            in "Net::Twitter".

        password
            This is the password used for Basic Authentication.

        clientname
            The value for the "X-Twitter-Client-Name" HTTP header. It
            defaults to "Perl Net::Twitter". Note: This option has nothing
            to do with the "via" application byline.

        clientver
            The value for the "X-Twitter-Client-Version" HTTP header. It
            defaults to current version of the "Net::Twitter" module.

        clienturl
            The value for the "X-Twitter-Client-URL" HTTP header. It
            defaults to the search.cpan.org page for the "Net::Twitter"
            distribution.

        useragent_class
            The "LWP::UserAgent" compatible class used internally by
            "Net::Twitter". It defaults to "LWP::UserAgent". For POE based
            applications, consider using "LWP::UserAgent::POE".

        useragent_args
            An HASH ref of arguments to pass to constructor of the class
            specified with "useragent_class", above. It defaults to {} (an
            empty HASH ref).

        useragent
            The value for "User-Agent" HTTP header. It defaults to
            "Net::Twitter/$VERSION (Perl)", where $VERSION is the current
            version of "Net::Twitter".

        source
            Twitter on longer uses the "source" parameter. Support for it
            remains in "Net::Twitter" for any compatible services that may
            use it. It was originally used by Twitter to provide an "via"
            application byline.

        apiurl
            The URL for the Twitter API. This defaults to
            "http://api.twitter.com/1". This option is available when the
            "API::REST" trait is included.

        apihost
            DEPRECATED - Setting the "apiurl" is sufficient.

        apirealm
            A string containing the Twitter API realm used for Basic
            Authentication. It defaults to "Twitter API". This option is
            available when the "API::REST" trait is included.

        identica
            If set to 1, "Net::Twitter" overrides the defaults for "apiurl",
            "apihost", and "apirealm" to "http://identi.ca/api",
            "identi.ca:80", and "Laconica API" respectively. It defaults to
            0. This option is available when the "API::REST" trait is
            included.

        consumer_key
            A string containing the OAuth consumer key provided by Twitter
            when an application is registered. This option is available when
            the "OAuth" trait is included.

        consumer_secret
            A string containing the OAuth consumer secret. This option is
            available when the "OAuth" trait is included.

        ssl If set to 1, an SSL connection will be used for all API calls.
            Defaults to 0.

        netrc
            (Optional) Sets the *machine* key to look up in ".netrc" to
            obtain credentials. If set to 1, Net::Twitter will use the value
            of the "netrc_machine" option (below).

               # in .netrc
               machine api.twitter.com
                 login YOUR_TWITTER_USER_NAME
                 password YOUR_TWITTER_PASSWORD
               machine semifor.twitter.com
                 login semifor
                 password SUPERSECRET

               # in your perl program
               $nt = Net::Twitter->new(netrc => 1);
               $nt = Net::Twitter->new(netrc => 'semifor.twitter.com');

        netrc_machine
            (Optional) Sets the "machine" entry to look up in ".netrc" when
            "<netrc =" 1>> is used. Defaults to "api.twitter.com".

        decode_html_entities
            Twitter encodes HTML entities in the "text" field of statuses.
            Set this option to 1 to have them automatically decoded. Default
            0.

    credentials($username, $password)
        Set the credentials for Basic Authentication. This is helpful for
        managing multiple accounts.

    ua  Provides access to the constructed user agent object used internally
        by "Net::Twitter". Use it with caution.

AUTHENTICATION
    As of 31-Aug-2010, Twitter requires OAuth for authenticated requests.
    Other Twitter compatible services, like Identi.ca, accept Basic
    Authentication. So, "Net::Twitter" provides support for both.

    To set up OAuth, include the "OAuth" trait and include the
    "consumer_key" and "consumer_secret" options to "new". See
    Net::Twitter::Role::OAuth for more information on using OAuth, including
    examples.

    To set up Basic Authentication in "Net::Twitter", provide the "username"
    and "password" options to "new" or call the "credentials" method.

    In addition to the arguments specified for each API method described
    below, an additional "authenticate" parameter can be passed. To request
    an "Authorization" header, pass "authenticated => 1"; to suppress an
    authentication header, pass "authentication => 0". Even if requested, an
    Authorization header will not be added if there are no user credentials
    (username and password for Basic Authentication; access tokens for
    OAuth).

    This is probably only useful for the "rate_limit_status" method in the
    REST API, since it returns different values for an authenticated and a
    non-authenticated call.

API METHODS AND ARGUMENTS
    Most Twitter API methods take parameters. All Net::Twitter API methods
    will accept a HASH ref of named parameters as specified in the Twitter
    API documentation. For convenience, many Net::Twitter methods accept
    simple positional arguments. The positional parameter passing style is
    optional; you can always use the named parameters in a HASH reference if
    you prefer.

    You may pass any number of required parameters as positional parameters.
    You must pass them in the order specified in the documentation for each
    method. Optional parameters must be passed as named parameters in a HASH
    reference. The HASH reference containing the named parameters must be
    the final parameter to the method call. Any required parameters not
    passed as positional parameters, must be included in the named parameter
    HASH reference.

    For example, the REST API method "update" has one required parameter,
    "status". You can call "update" with a HASH ref argument:

        $nt->update({ status => 'Hello world!' });

    Or, you can use the convenient, positional parameter form:

        $nt->update('Hello world!');

    The "update" method also has an optional parameter,
    "in_reply_to_status_id". To use it, you must use the HASH ref form:

        $nt->update({ status => 'Hello world!', in_reply_to_status_id => $reply_to });

    You may use the convenient positional form for the required "status"
    parameter with the optional parameters specified in the named parameter
    HASH reference:

        $nt->update('Hello world!', { in_reply_to_status_id => $reply_to });

    Convenience form is provided for the required parameters of all API
    methods. So, these two calls are equivalent:

        $nt->friendship_exists({ user_a => $fred, user_b => $barney });
        $nt->friendship_exists($fred, $barney);

    Many API methods have aliases. You can use the API method name, or any
    of its aliases, as you prefer. For example, these calls are all
    equivalent:

        $nt->friendship_exists($fred, $barney);
        $nt->relationship_exists($fred, $barney);
        $nt->follows($fred, $barney);

    Aliases support both the HASH ref and convenient forms:

        $nt->follows({ user_a => $fred, user_b => $barney });

  Cursors and Paging
    Some methods return partial results a page at a time. Originally,
    methods that returned partial results used a "page" parameter. A more
    recent addition to the Twitter API for retrieving multiple pages uses
    the "cursor" parameter. Usually, a method uses either the "page"
    parameter or the "cursor" parameter, but not both. There have been
    exceptions to this rule when Twitter deprecates the use of "page" for a
    method in favor of "cursor". In that case, both methods may work during
    a transition period. So, if a method supports both, you should always
    use the "cursor" parameter.

   Paging
    For methods that support paging, the first page is returned by passing
    "page => 1", the second page by passing "page => 2", etc. If no "page"
    parameter is passed, the first page is returned.

    Here's an example that demonstrates how to obtain all favorites in a
    loop:

        my @favs;
        for ( my $page = 1; ; ++$page ) {
            my $r = $nt->favorites({ page => $page });
            last unless @$r;

            push @favs, @$r;
        }

   Cursors
    Cursoring employs a different strategy. To obtain the first page of
    results, pass "cursor => -1". Twitter returns a reference to a hash that
    includes entries "next_cursor", "previous_cursor", and an entry with a
    reference to an array containing a page of the requested items. The key
    for the array reference will be named "users", "ids", or something
    similar depending upon the type of returned items. For example, when
    "cursor" parameter is used with the "followers_ids" method, the returned
    in hash entry "ids".

    The "next_cursor" value can be used in a subsequent call to obtain the
    next page of results. When you have obtained the last page of results,
    "next_cursor" will be 0. Likewise, you can use the value for
    "previous_cursor" to obtain the previous page of results. When you have
    obtained the first page, "previous_cursor" will be 0.

    Here's an example that demonstrates how to obtain all follower IDs in a
    loop using the "cursor" parameter:

        my @ids;
        for ( my $cursor = -1, my $r; $cursor; $cursor = $r->{next_cursor} ) {
            $r = $nt->followers_ids({ cursor => $cursor });
            push @ids, @{ $r->{ids} };
        }

  Synthetic Arguments
    In addition to the arguments described in the Twitter API Documentation
    for each API method, Net::Twitter supports additional *synthetic*
    arguments.

    authenticate
        When set to 1, Net::Twitter will provide an Authorization header for
        the API call; when set to 0, it will suppress the Authentication
        header. This argument overrides the defined authentication behavior
        for the API method. It is probably only useful for the
        "rate_limit_satus" method which returns different values for
        authenticated and unauthenticated calls. See "AUTHENTICATION" for
        more details.

    since
        API methods that accept the "since_id" argument will also accept the
        synthetic "since" argument, instead. "since" may be a "Date::Time"
        object, an epoch time (the number of seconds since the system
        epoch), or a string in the same format returned by Twitter for the
        "created_at" attribute. Only statuses with a "created_at" time
        greater than "since" will be returned by the API call.

REST API Methods
    These methods are provided when trait "API::REST" is included in the
    "traits" option to "new".

  Common Parameters
    id  Several of these methods accept a user ID as the "id" parameter. The
        user ID can be either a screen name, or the users numeric ID. To
        disambiguate, use the "screen_name" or "user_id" parameters,
        instead.

        For example, These calls are equivalent:

            $nt->create_friend('perl_api');    # screen name
            $nt->create_friend(1564061);       # numeric ID
            $nt->create_friend({ id => 'perl_api' });
            $nt->create_friend({ screen_name => 'perl_api' });
            $nt->create_friend({ user_id     => 1564061 });

        However user_id 911 and screen_name 911 are separate Twitter
        accounts. These calls are NOT equivalent:

            $nt->create_friend(911); # interpreted as screen name
            $nt->create_friend({ user_id => 911 }); # screen name: richellis

        Whenever the "id" parameter is required and "user_id" and
        "screen_name" are also parameters, using any one of them satisfies
        the requirement.

    skip_user
        The timeline methods all accept an optional "skip_user" parameter.
        When set to a true value, the statuses returned in a timeline will
        not contain an entire embedded user HASH. Instead, the user node
        will contain only an "id" element to indicate the numerical ID of
        the Twitter user that sent the status.

  Methods
    account_settings

        Parameters: *none*
        Required: *none*

        Returns the current trend, geo and sleep time information for the
        authenticating user.

        Returns: HashRef

    account_totals

        Parameters: *none*
        Required: *none*

        Returns the current count of friends, followers, updates (statuses)
        and favorites of the authenticating user.

        Returns: HashRef

    all_lists
    all_lists(id)

        Parameters: id, user_id, screen_name
        Required: id

        Returns all lists the authenticating or specified user subscribes
        to, including their own. The user is specified using the "user_id"
        or "screen_name parameters". If no user is given, the authenticating
        user is used. Requires authentication unless requesting for another
        user.

        Returns: ArrayRef[List]

    block_exists
    block_exists(id)

        Parameters: id, user_id, screen_name
        Required: id

        Returns if the authenticating user is blocking a target user. Will
        return the blocked user's object if a block exists, and error with
        HTTP 404 response code otherwise.

        Returns: BasicUser

    blocking
    blocking(page)

        Parameters: page
        Required: *none*

        Returns an array of user objects that the authenticating user is
        blocking.

        Returns: ArrayRef[BasicUser]

    blocking_ids

        Parameters: *none*
        Required: *none*

        Returns an array of numeric user ids the authenticating user is
        blocking.

        Returns: ArrayRef[Int]

    create_block
    create_block(id)

        Parameters: id
        Required: id

        Blocks the user specified in the ID parameter as the authenticating
        user. Returns the blocked user when successful. You can find out
        more about blocking in the Twitter Support Knowledge Base.

        Returns: BasicUser

    create_favorite
    create_favorite(id)

        Parameters: id
        Required: id

        Favorites the status specified in the ID parameter as the
        authenticating user. Returns the favorite status when successful.

        Returns: Status

    create_friend
    create_friend(id)
    alias: follow_new

        Parameters: id, user_id, screen_name, follow
        Required: id

        Befriends the user specified in the ID parameter as the
        authenticating user. Returns the befriended user when successful.
        Returns a string describing the failure condition when unsuccessful.

        Returns: BasicUser

    create_saved_search
    create_saved_search(query)

        Parameters: query
        Required: query

        Creates a saved search for the authenticated user.

        Returns: SavedSearch

    destroy_block
    destroy_block(id)

        Parameters: id
        Required: id

        Un-blocks the user specified in the ID parameter as the
        authenticating user. Returns the un-blocked user when successful.

        Returns: BasicUser

    destroy_direct_message
    destroy_direct_message(id)

        Parameters: id
        Required: id

        Destroys the direct message specified in the required ID parameter.
        The authenticating user must be the recipient of the specified
        direct message.

        Returns: DirectMessage

    destroy_favorite
    destroy_favorite(id)

        Parameters: id
        Required: id

        Un-favorites the status specified in the ID parameter as the
        authenticating user. Returns the un-favorited status.

        Returns: Status

    destroy_friend
    destroy_friend(id)
    alias: unfollow

        Parameters: id, user_id, screen_name
        Required: id

        Discontinues friendship with the user specified in the ID parameter
        as the authenticating user. Returns the un-friended user when
        successful. Returns a string describing the failure condition when
        unsuccessful.

        Returns: BasicUser

    destroy_saved_search
    destroy_saved_search(id)

        Parameters: id
        Required: id

        Destroys a saved search. The search, specified by "id", must be
        owned by the authenticating user.

        Returns: SavedSearch

    destroy_status
    destroy_status(id)

        Parameters: id
        Required: id

        Destroys the status specified by the required ID parameter. The
        authenticating user must be the author of the specified status.

        Returns: Status

    direct_messages

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns a list of the 20 most recent direct messages sent to the
        authenticating user including detailed information about the sending
        and recipient users.

        Returns: ArrayRef[DirectMessage]

    disable_notifications
    disable_notifications(id)

        Parameters: id
        Required: id

        Disables notifications for updates from the specified user to the
        authenticating user. Returns the specified user when successful.

        Returns: BasicUser

    enable_notifications
    enable_notifications(id)

        Parameters: id
        Required: id

        Enables notifications for updates from the specified user to the
        authenticating user. Returns the specified user when successful.

        Returns: BasicUser

    end_session

        Parameters: *none*
        Required: *none*

        Ends the session of the authenticating user, returning a null
        cookie. Use this method to sign users out of client-facing
        applications like widgets.

        Returns: Error

    favorites

        Parameters: id, page
        Required: *none*

        Returns the 20 most recent favorite statuses for the authenticating
        user or user specified by the ID parameter.

        Returns: ArrayRef[Status]

    followers

        Parameters: id, user_id, screen_name, cursor
        Required: *none*

        Returns a reference to an array of the user's followers. If "id",
        "user_id", or "screen_name" is not specified, the followers of the
        authenticating user are returned. The returned users are ordered
        from most recently followed to least recently followed.

        Use the optional "cursor" parameter to retrieve users in pages of
        100. When the "cursor" parameter is used, the return value is a
        reference to a hash with keys "previous_cursor", "next_cursor", and
        "users". The value of "users" is a reference to an array of the
        user's friends. The result set isn't guaranteed to be 100 every time
        as suspended users will be filtered out. Set the optional "cursor"
        parameter to -1 to get the first page of users. Set it to the prior
        return's value of "previous_cursor" or "next_cursor" to page forward
        or backwards. When there are no prior pages, the value of
        "previous_cursor" will be 0. When there are no subsequent pages, the
        value of "next_cursor" will be 0.

        Returns: HashRef|ArrayRef[User]

    followers_ids
    followers_ids(id)

        Parameters: id, user_id, screen_name, cursor
        Required: id

        Returns a reference to an array of numeric IDs for every user
        following the specified user.

        Use the optional "cursor" parameter to retrieve IDs in pages of
        5000. When the "cursor" parameter is used, the return value is a
        reference to a hash with keys "previous_cursor", "next_cursor", and
        "ids". The value of "ids" is a reference to an array of IDS of the
        user's followers. Set the optional "cursor" parameter to -1 to get
        the first page of IDs. Set it to the prior return's value of
        "previous_cursor" or "next_cursor" to page forward or backwards.
        When there are no prior pages, the value of "previous_cursor" will
        be 0. When there are no subsequent pages, the value of "next_cursor"
        will be 0.

        Returns: HashRef|ArrayRef[Int]

    friends
    alias: following

        Parameters: id, user_id, screen_name, cursor
        Required: *none*

        Returns a reference to an array of the user's friends. If "id",
        "user_id", or "screen_name" is not specified, the friends of the
        authenticating user are returned. The returned users are ordered
        from most recently followed to least recently followed.

        Use the optional "cursor" parameter to retrieve users in pages of
        100. When the "cursor" parameter is used, the return value is a
        reference to a hash with keys "previous_cursor", "next_cursor", and
        "users". The value of "users" is a reference to an array of the
        user's friends. The result set isn't guaranteed to be 100 every time
        as suspended users will be filtered out. Set the optional "cursor"
        parameter to -1 to get the first page of users. Set it to the prior
        return's value of "previous_cursor" or "next_cursor" to page forward
        or backwards. When there are no prior pages, the value of
        "previous_cursor" will be 0. When there are no subsequent pages, the
        value of "next_cursor" will be 0.

        Returns: Hashref|ArrayRef[User]

    friends_ids
    friends_ids(id)
    alias: following_ids

        Parameters: id, user_id, screen_name, cursor
        Required: id

        Returns a reference to an array of numeric IDs for every user
        followed the specified user.

        Use the optional "cursor" parameter to retrieve IDs in pages of
        5000. When the "cursor" parameter is used, the return value is a
        reference to a hash with keys "previous_cursor", "next_cursor", and
        "ids". The value of "ids" is a reference to an array of IDS of the
        user's friends. Set the optional "cursor" parameter to -1 to get the
        first page of IDs. Set it to the prior return's value of
        "previous_cursor" or "next_cursor" to page forward or backwards.
        When there are no prior pages, the value of "previous_cursor" will
        be 0. When there are no subsequent pages, the value of "next_cursor"
        will be 0.

        Returns: HashRef|ArrayRef[Int]

    friends_timeline
    alias: following_timeline

        Parameters: since_id, max_id, count, page, skip_user
        Required: *none*

        Returns the 20 most recent statuses posted by the authenticating
        user and that user's friends. This is the equivalent of /home on the
        Web.

        Returns: ArrayRef[Status]

    friendship_exists
    friendship_exists(user_a, user_b)
    alias: relationship_exists
    alias: follows

        Parameters: user_a, user_b
        Required: user_a, user_b

        Tests for the existence of friendship between two users. Will return
        true if user_a follows user_b, otherwise will return false.

        Returns: Bool

    friendships_incoming
    friendships_incoming(cursor)

        Parameters: cursor
        Required: cursor

        Returns an HASH ref with an array of numeric IDs in the "ids"
        element for every user who has a pending request to follow the
        authenticating user.

        Returns: HashRef

    friendships_outgoing
    friendships_outgoing(cursor)

        Parameters: cursor
        Required: cursor

        Returns an HASH ref with an array of numeric IDs in the "ids"
        element for every protected user for whom the authenticating user
        has a pending follow request.

        Returns: HashRef

    geo_id
    geo_id(id)

        Parameters: id
        Required: id

        Returns details of a place returned from the "reverse_geocode"
        method.

        Returns: HashRef

    home_timeline

        Parameters: since_id, max_id, count, page, skip_user,
        exclude_replies, contributor_details, include_rts, include_entities,
        trim_user, include_my_retweet
        Required: *none*

        Returns the 20 most recent statuses, including retweets, posted by
        the authenticating user and that user's friends. This is the
        equivalent of /timeline/home on the Web.

        Returns: ArrayRef[Status]

    lookup_friendships

        Parameters: user_id, screen_name
        Required: *none*

        Returns the relationship of the authenticating user to the comma
        separated list or ARRAY ref of up to 100 screen_names or user_ids
        provided. Values for connections can be: following,
        following_requested, followed_by, none. Requires authentication.

        Returns: ArrayRef

    lookup_users

        Parameters: user_id, screen_name
        Required: *none*

        Return up to 20 users worth of extended information, specified by
        either ID, screen name, or combination of the two. The author's most
        recent status (if the authenticating user has permission) will be
        returned inline. This method is rate limited to 1000 calls per hour.

        This method will accept user IDs or screen names as either a comma
        delimited string, or as an ARRAY ref. It will also accept arguments
        in the normal HASHREF form or as a simple list of named arguments.
        I.e., any of the following forms are acceptable:

            $nt->lookup_users({ user_id => '1234,6543,3333' });
            $nt->lookup_users(user_id => '1234,6543,3333');
            $nt->lookup_users({ user_id => [ 1234, 6543, 3333 ] });
            $nt->lookup_users({ screen_name => 'fred,barney,wilma' });
            $nt->lookup_users(screen_name => ['fred', 'barney', 'wilma']);

            $nt->lookup_users(
                screen_name => ['fred', 'barney' ],
                user_id     => '4321,6789',
            );

        Returns: ArrayRef[User]

    mentions
    alias: replies

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent mentions (statuses containing @username)
        for the authenticating user.

        Returns: ArrayRef[Status]

    new_direct_message
    new_direct_message(user, text)

        Parameters: user, text, screen_name, user_id
        Required: user, text

        Sends a new direct message to the specified user from the
        authenticating user. Requires both the user and text parameters.
        Returns the sent message when successful. In order to support
        numeric screen names, the "screen_name" or "user_id" parameters may
        be used instead of "user".

        Returns: DirectMessage

    public_timeline
    public_timeline(skip_user)

        Parameters: skip_user
        Required: *none*

        Returns the 20 most recent statuses from non-protected users who
        have set a custom user icon. Does not require authentication. Note
        that the public timeline is cached for 60 seconds so requesting it
        more often than that is a waste of resources.

        If user credentials are provided, "public_timeline" calls are
        authenticated, so they count against the authenticated user's rate
        limit. Use "->public_timeline({ authenticate => 0 })" to make an
        unauthenticated call which will count against the calling IP
        address' rate limit, instead.

        Returns: ArrayRef[Status]

    rate_limit_status

        Parameters: *none*
        Required: *none*

        Returns the remaining number of API requests available to the
        authenticated user before the API limit is reached for the current
        hour.

        Use "->rate_limit_status({ authenticate => 0 })" to force an
        unauthenticated call, which will return the status for the IP
        address rather than the authenticated user. (Note: for a web
        application, this is the server's IP address.)

        Returns: RateLimitStatus

    related_results
    related_results(id)

        Parameters: id
        Required: id

        If available, returns an array of replies and mentions related to
        the specified status. There is no guarantee there will be any
        replies or mentions in the response. This method is only available
        to users who have access to #newtwitter. Requires authentication.

        Returns: ArrayRef[Status]

    report_spam
    report_spam(id)

        Parameters: id, user_id, screen_name
        Required: id

        The user specified in the id is blocked by the authenticated user
        and reported as a spammer.

        Returns: User

    retweet
    retweet(id)

        Parameters: id
        Required: id

        Retweets a tweet. Requires the id parameter of the tweet you are
        retweeting. Returns the original tweet with retweet details
        embedded.

        Returns: Status

    retweeted_by
    retweeted_by(id)

        Parameters: id, count, page
        Required: id

        Returns up to 100 users who retweeted the status identified by "id".

        Returns: ArrayRef[User]

    retweeted_by_ids
    retweeted_by_ids(id)

        Parameters: id, count, page
        Required: id

        Returns the IDs of up to 100 users who retweeted the status
        identified by "id".

        Returns: ArrayRef[User]

    retweeted_by_me

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent retweets posted by the authenticating
        user.

        Returns: ArrayRef[Status]

    retweeted_by_user
    retweeted_by_user(id)

        Parameters: id, user_id, screen_name
        Required: id

        Returns the 20 most recent retweets posted by the specified user.
        The user is specified using the user_id or screen_name parameters.
        This method is identical to "retweeted_by_me" except you can choose
        the user to view. Does not require authentication, unless the user
        is protected.

        Returns: ArrayRef

    retweeted_to_me

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent retweets posted by the authenticating
        user's friends.

        Returns: ArrayRef[Status]

    retweeted_to_user
    retweeted_to_user(id)

        Parameters: id, user_id, screen_name
        Required: id

        Returns the 20 most recent retweets posted by users the specified
        user follows. The user is specified using the user_id or screen_name
        parameters. This method is identical to "retweeted_to_me" except you
        can choose the user to view. Does not require authentication, unless
        the user is protected.

        Returns: ArrayRef

    retweets
    retweets(id)

        Parameters: id, count
        Required: id

        Returns up to 100 of the first retweets of a given tweet.

        Returns: Arrayref[Status]

    retweets_of_me
    alias: retweeted_of_me

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent tweets of the authenticated user that
        have been retweeted by others.

        Returns: ArrayRef[Status]

    reverse_geocode
    reverse_geocode(lat, long)

        Parameters: lat, long, accuracy, granularity, max_results
        Required: lat, long

        Search for places (cities and neighborhoods) that can be attached to
        a statuses/update. Given a latitude and a longitude, return a list
        of all the valid places that can be used as a place_id when updating
        a status. Conceptually, a query can be made from the user's
        location, retrieve a list of places, have the user validate the
        location he or she is at, and then send the ID of this location up
        with a call to statuses/update.

        There are multiple granularities of places that can be returned --
        "neighborhoods", "cities", etc. At this time, only United States
        data is available through this method.

        lat Required. The latitude to query about. Valid ranges are -90.0 to
            +90.0 (North is positive) inclusive.

        long
            Required. The longitude to query about. Valid ranges are -180.0
            to +180.0 (East is positive) inclusive.

        accuracy
            Optional. A hint on the "region" in which to search. If a
            number, then this is a radius in meters, but it can also take a
            string that is suffixed with ft to specify feet. If this is not
            passed in, then it is assumed to be 0m. If coming from a device,
            in practice, this value is whatever accuracy the device has
            measuring its location (whether it be coming from a GPS, WiFi
            triangulation, etc.).

        granularity
            Optional. The minimal granularity of data to return. If this is
            not passed in, then "neighborhood" is assumed. "city" can also
            be passed.

        max_results
            Optional. A hint as to the number of results to return. This
            does not guarantee that the number of results returned will
            equal max_results, but instead informs how many "nearby" results
            to return. Ideally, only pass in the number of places you intend
            to display to the user here.

        Returns: HashRef

    saved_searches

        Parameters: *none*
        Required: *none*

        Returns the authenticated user's saved search queries.

        Returns: ArrayRef[SavedSearch]

    sent_direct_messages

        Parameters: since_id, max_id, page
        Required: *none*

        Returns a list of the 20 most recent direct messages sent by the
        authenticating user including detailed information about the sending
        and recipient users.

        Returns: ArrayRef[DirectMessage]

    show_direct_message
    show_direct_message(id)

        Parameters: id
        Required: id

        Returns a single direct message, specified by an id parameter. Like
        the "direct_messages" request, this method will include the user
        objects of the sender and recipient. Requires authentication.

        Returns: HashRef

    show_friendship
    show_friendship(id)
    alias: show_relationship

        Parameters: source_id, source_screen_name, target_id, target_id_name
        Required: id

        Returns detailed information about the relationship between two
        users.

        Returns: Relationship

    show_saved_search
    show_saved_search(id)

        Parameters: id
        Required: id

        Retrieve the data for a saved search, by ID, owned by the
        authenticating user.

        Returns: SavedSearch

    show_status
    show_status(id)

        Parameters: id
        Required: id

        Returns a single status, specified by the id parameter. The status's
        author will be returned inline.

        Returns: Status

    show_user
    show_user(id)

        Parameters: id
        Required: id

        Returns extended information of a given user, specified by ID or
        screen name as per the required id parameter. This information
        includes design settings, so third party developers can theme their
        widgets according to a given user's preferences. You must be
        properly authenticated to request the page of a protected user.

        Returns: ExtendedUser

    suggestion_categories

        Parameters: *none*
        Required: *none*

        Returns the list of suggested user categories. The category slug can
        be used in the "user_suggestions" API method get the users in that
        category . Does not require authentication.

        Returns: ArrayRef

    test

        Parameters: *none*
        Required: *none*

        Returns the string "ok" status code.

        Returns: Str

    trends_available

        Parameters: lat, long
        Required: *none*

        Returns the locations with trending topic information. The response
        is an array of "locations" that encode the location's WOEID (a
        Yahoo! Where On Earth ID
        <http://developer.yahoo.com/geo/geoplanet/>) and some other
        human-readable information such as a the location's canonical name
        and country.

        When the optional "lat" and "long" parameters are passed, the
        available trend locations are sorted by distance from that location,
        nearest to farthest.

        Use the WOEID returned in the location object to query trends for a
        specific location.

        Returns: ArrayRef[Location]

    trends_location
    trends_location(woeid)

        Parameters: woeid
        Required: woeid

        Returns the top 10 trending topics for a specific location. The
        response is an array of "trend" objects that encode the name of the
        trending topic, the query parameter that can be used to search for
        the topic on Search, and the direct URL that can be issued against
        Search. This information is cached for five minutes, and therefore
        users are discouraged from querying these endpoints faster than once
        every five minutes. Global trends information is also available from
        this API by using a WOEID of 1.

        Returns: ArrayRef[Trend]

    update
    update(status)

        Parameters: status, lat, long, place_id, display_coordinates,
        in_reply_to_status_id
        Required: status

        Updates the authenticating user's status. Requires the status
        parameter specified. A status update with text identical to the
        authenticating user's current status will be ignored.

        status
            Required. The text of your status update. URL encode as
            necessary. Statuses over 140 characters will cause a 403 error
            to be returned from the API.

        in_reply_to_status_id
            Optional. The ID of an existing status that the update is in
            reply to. o Note: This parameter will be ignored unless the
            author of the tweet this parameter references is mentioned
            within the status text. Therefore, you must include @username,
            where username is the author of the referenced tweet, within the
            update.

        lat Optional. The location's latitude that this tweet refers to. The
            valid ranges for latitude is -90.0 to +90.0 (North is positive)
            inclusive. This parameter will be ignored if outside that range,
            if it is not a number, if geo_enabled is disabled, or if there
            not a corresponding long parameter with this tweet.

        long
            Optional. The location's longitude that this tweet refers to.
            The valid ranges for longitude is -180.0 to +180.0 (East is
            positive) inclusive. This parameter will be ignored if outside
            that range, if it is not a number, if geo_enabled is disabled,
            or if there not a corresponding lat parameter with this tweet.

        place_id
            Optional. The place to attach to this status update. Valid
            place_ids can be found by querying "reverse_geocode".

        display_coordinates
            Optional. By default, geo-tweets will have their coordinates
            exposed in the status object (to remain backwards compatible
            with existing API applications). To turn off the display of the
            precise latitude and longitude (but keep the contextual location
            information), pass "display_coordinates =" 0> on the status
            update.

        Returns: Status

    update_delivery_device
    update_delivery_device(device)

        Parameters: device
        Required: device

        Sets which device Twitter delivers updates to for the authenticating
        user. Sending none as the device parameter will disable IM or SMS
        updates.

        Returns: BasicUser

    update_friendship
    update_friendship(id)

        Parameters: id, user_id, screen_name, device, retweets
        Required: id

        Allows you enable or disable retweets and device notifications from
        the specified user. All other values are assumed to be false.
        Requires authentication.

        Returns: HashRef

    update_profile

        Parameters: name, email, url, location, description
        Required: *none*

        Sets values that users are able to set under the "Account" tab of
        their settings page. Only the parameters specified will be updated;
        to only update the "name" attribute, for example, only include that
        parameter in your request.

        Returns: ExtendedUser

    update_profile_background_image
    update_profile_background_image(image)

        Parameters: image, use
        Required: image

        Updates the authenticating user's profile background image. The
        "image" parameter must be an arrayref with the same interpretation
        as the "image" parameter in the "update_profile_image" method. The
        "use" parameter allows you to specify whether to use the uploaded
        profile background or not. See that method's documentation for
        details.

        Returns: ExtendedUser

    update_profile_colors

        Parameters: profile_background_color, profile_text_color,
        profile_link_color, profile_sidebar_fill_color,
        profile_sidebar_border_color
        Required: *none*

        Sets one or more hex values that control the color scheme of the
        authenticating user's profile page on twitter.com. These values are
        also returned in the /users/show API method.

        Returns: ExtendedUser

    update_profile_image
    update_profile_image(image)

        Parameters: image
        Required: image

        Updates the authenticating user's profile image. The "image"
        parameter is an arrayref with the following interpretation:

          [ $file ]
          [ $file, $filename ]
          [ $file, $filename, Content_Type => $mime_type ]
          [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

        The first value of the array ($file) is the name of a file to open.
        The second value ($filename) is the name given to Twitter for the
        file. If $filename is not provided, the basename portion of $file is
        used. If $mime_type is not provided, it will be provided
        automatically using LWP::MediaTypes::guess_media_type().

        $raw_image_data can be provided, rather than opening a file, by
        passing "undef" as the first array value.

        Returns: ExtendedUser

    user_suggestions
    user_suggestions(category)
    alias: follow_suggestions

        Parameters: category, lang
        Required: category

        Access the users in a given category of the Twitter suggested user
        list and return their most recent status if they are not a protected
        user. Currently supported values for optional parameter "lang" are
        "en", "fr", "de", "es", "it". Does not require authentication.

        Returns: ArrayRef

    user_timeline

        Parameters: id, user_id, screen_name, since_id, max_id, count, page,
        skip_user
        Required: *none*

        Returns the 20 most recent statuses posted from the authenticating
        user. It's also possible to request another user's timeline via the
        id parameter. This is the equivalent of the Web /archive page for
        your own user, or the profile page for a third party.

        Returns: ArrayRef[Status]

    users_search
    users_search(q)
    alias: find_people
    alias: search_users

        Parameters: q, per_page, page
        Required: q

        Run a search for users similar to Find People button on Twitter.com;
        the same results returned by people search on Twitter.com will be
        returned by using this API (about being listed in the People
        Search). It is only possible to retrieve the first 1000 matches from
        this API.

        Returns: ArrayRef[Users]

    verify_credentials

        Parameters: *none*
        Required: *none*

        Returns an HTTP 200 OK response code and a representation of the
        requesting user if authentication was successful; returns a 401
        status code and an error message if not. Use this method to test if
        supplied user credentials are valid.

        Returns: ExtendedUser

Search API Methods
    These methods are provided when trait "API::Search" is included in the
    "traits" option to "new".

    search
    search(q)

        Parameters: q, callback, lang, rpp, page, since_id, geocode,
        show_user
        Required: q

        Returns a HASH reference with some meta-data about the query
        including the "next_page", "refresh_url", and "max_id". The statuses
        are returned in "results". To iterate over the results, use
        something similar to:

            my $r = $nt->search($searh_term);
            for my $status ( @{$r->{results}} ) {
                print "$status->{text}\n";
            }

        Returns: HashRef

    trends

        Parameters: *none*
        Required: *none*

        Returns the top ten queries that are currently trending on Twitter.
        The response includes the time of the request, the name of each
        trending topic, and the url to the Twitter Search results page for
        that topic.

        Returns: ArrayRef[Query]

    trends_current
    trends_current(exclude)

        Parameters: exclude
        Required: *none*

        Returns the current top ten trending topics on Twitter. The response
        includes the time of the request, the name of each trending topic,
        and query used on Twitter Search results page for that topic.

        Returns: HashRef

    trends_daily

        Parameters: date, exclude
        Required: *none*

        Returns the top 20 trending topics for each hour in a given day.

        Returns: HashRef

    trends_weekly

        Parameters: date, exclude
        Required: *none*

        Returns the top 30 trending topics for each day in a given week.

        Returns: HashRef

Lists API Methods
    These methods are provided when trait "API::Lists" is included in the
    "traits" option to "new". All Lists API methods require a "user"
    parameter. It is the screen_name of the list owner.

    add_list_member
    add_list_member(user, list_id, id)

        Parameters: user, list_id, id
        Required: user, list_id, id

        Adds the user identified by "id" to the list.

        Returns a reference the added user as a hash reference.

        Returns: User

    create_list
    create_list(user, name)

        Parameters: user, name, mode, description
        Required: user, name

        Creates a new list for the authenticated user. The "mode" parameter
        may be either "public" or "private". If not specified, it defaults
        to "public".

        Returns: HashRef

    delete_list
    delete_list(user, list_id)

        Parameters: user, list_id
        Required: user, list_id

        Deletes a list owned by the authenticating user. Returns the list as
        a hash reference.

        Returns:

    delete_list_member
    delete_list_member(user, list_id, id)
    alias: remove_list_member

        Parameters: user, list_id, id
        Required: user, list_id, id

        Deletes the user identified by "id" from the specified list.

        Returns the deleted user as a hash reference.

        Returns:

    get_list
    get_list(user, list_id)

        Parameters: user, list_id
        Required: user, list_id

        Returns the specified list as a hash reference.

        Returns: HashRef

    get_lists
    get_lists(user)
    alias: list_lists

        Parameters: user, cursor
        Required: user

        Returns a reference to an array of lists owned by the specified
        user. If the user is the authenticated user, it returns both public
        and private lists. Otherwise, it only returns public lists.

        When the "cursor" parameter is used, a hash reference is returned;
        the lists are returned in the "lists" element of the hash.

        Returns: ArrayRef[List]

    is_list_member
    is_list_member(user, list_id, id)

        Parameters: user, list_id, id
        Required: user, list_id, id

        Returns the list member as a HASH reference if "id" is a member of
        the list. Otherwise, returns undef.

        Returns: ArrayRef[User]

    is_list_subscriber
    is_list_subscriber(user, list_id, id)
    alias: is_subscribed_list

        Parameters: user, list_id, id
        Required: user, list_id, id

        Returns the subscriber as a HASH reference if "id" is a subscriber
        to the list. Otherwise, returns undef.

        Returns: ArrayRef[User]

    list_members
    list_members(user, list_id)

        Parameters: user, list_id, id, cursor
        Required: user, list_id

        Returns the list members as an array reference.

        The optional "id" parameter can be used to determine if the user
        specified by "id" is a member of the list. If so, the user is
        returned as a hash reference; if not, "undef" is returned.

        When the "cursor" parameter is used, a hash reference is returned;
        the members are returned in the "users" element of the hash.

        Returns: ArrayRef[User]

    list_memberships
    list_memberships(user)

        Parameters: user, cursor
        Required: user

        Returns the lists the specified user is a member of as an array
        reference.

        When the "cursor" parameter is used, a hash reference is returned;
        the lists are returned in the "lists" element of the hash.

        Returns:

    list_statuses
    list_statuses(user, list_id)

        Parameters: user, list_id, since_id, max_id, per_page, page
        Required: user, list_id

        Returns a timeline of list member statuses as an array reference.

        Returns: ArrayRef[Status]

    list_subscribers
    list_subscribers(user, list_id)

        Parameters: user, list_id, id, cursor
        Required: user, list_id

        Returns the subscribers to a list as an array reference.

        When the "cursor" parameter is used, a hash reference is returned;
        the subscribers are returned in the "users" element of the hash.

        Returns: ArrayRef[User]

    list_subscriptions
    list_subscriptions(user)

        Parameters: user, cursor
        Required: user

        Returns a lists to which the specified user is subscribed as an
        array reference.

        When the "cursor" parameter is used, a hash reference is returned;
        the lists are returned in the "lists" element of the hash.

        Returns:

    subscribe_list
    subscribe_list(user, list_id)

        Parameters: user, list_id
        Required: user, list_id

        Subscribes the authenticated user to the specified list.

        Returns: List

    unsubscribe_list
    unsubscribe_list(user, list_id)

        Parameters: user, list_id
        Required: user, list_id

        Unsubscribes the authenticated user from the specified list.

        Returns: List

    update_list
    update_list(user, list_id)

        Parameters: user, list_id, name, mode, description
        Required: user, list_id

        Updates a list to change the name, mode, description, or any
        combination thereof.

        Returns: HashRef

TwitterVision API Methods
    These methods are provided when trait "API::TwitterVision" is included
    in the "traits" option to "new".

    current_status
    current_status(id)

        Parameters: id, callback
        Required: id

        Get the current location and status of a user.

        Returns: HashRef

    update_twittervision
    update_twittervision(location)

        Parameters: location
        Required: location

        Updates the location for the authenticated user.

        Returns: HashRef

LEGACY COMPATIBILITY
    This version of "Net::Twitter" automatically includes the "Legacy" trait
    if no "traits" option is provided to "new". Therefore, these 2 calls are
    currently equivalent:

        $nt = Net::Twitter->new(username => $user, password => $passwd);
        $nt = Net::Twitter->new(
            username => $user,
            password => $passwd,
            traits   => ['Legacy'],
        );

    Thus, existing applications written for a prior version of
    "Net::Twitter" should continue to run, without modification, with this
    version.

    In a future release, the default traits may change. Prior to that
    change, however, a nearer future version will add a warning if no
    "traits" option is provided to "new". To avoid this warning, add an
    appropriate "traits" option to your existing application code.

ERROR HANDLING
    There are currently two strategies for handling errors: throwing
    exceptions and wrapping errors. Exception handling is the newer,
    recommended strategy.

  Wrapping Errors
    When trait "WrapError" is specified (or "Legacy", which includes trait
    "WrapError"), "Net::Twitter" returns undef on error. To retrieve
    information about the error, use methods "http_code", "http_message",
    and "get_error". These methods are described in the
    Net::Twitter::Role::WrapError.

        if ( my $followers = $nt->followers ) {
            for my $follower ( @$followers ) {
                #...
            }
        }
        else {
            warn "HTTP message: ", $nt->http_message, "\n";
        }

    Since an error is stored in the object instance, this error handling
    strategy is problematic when using a user agent like
    "LWP::UserAgent::POE" that provides concurrent requests. The error for
    one request can be overwritten by a concurrent request before you have
    an opportunity to access it.

  Exception Handling
    When "Net::Twitter" encounters a Twitter API error or a network error,
    it throws a "Net::Twitter::Error" object. You can catch and process
    these exceptions by using "eval" blocks and testing $@:

        eval {
            my $statuses = $nt->friends_timeline(); # this might die!

            for my $status ( @$statuses ) {
                #...
            }
        };
        if ( $@ ) {
            # friends_timeline encountered an error

            if ( blessed $@ && $@->isa('Net::Twitter::Error') ) {
                #... use the thrown error obj
                warn $@->error;
            }
            else {
                # something bad happened!
                die $@;
            }
        }

    "Net::Twitter::Error" stringifies to something reasonable, so if you
    don't need detailed error information, you can simply treat $@ as a
    string:

        eval { $nt->update($status) };
        if ( $@ ) {
            warn "update failed because: $@\n";
        }

FAQ
    Why does "->followers({ screen_name => $friend })" return *my* followers
    instead of $friends's?
        First, check carefully to make sure you've spelled "screen_name"
        correctly. Twitter sometimes discards parameters it doesn't
        recognize. In this case, the result is a list of your own
        followers---the same thing that would happen if you called
        "followers" without the "screen_name" parameter.

    How do I use the "geocode" parameter in the Search API?
        The "geocode" parameter value includes a latitude, longitude, and
        radius separated with commas.

            $r = $nt->search({ geocode => "45.511795,-122.675629,25mi" });

    How do I get Twitter to display something other than "from Perl
    Net::Twitter"?
        If you set the source parameter to "api", twitter will display "from
        API", and if you set it to the empty string, twitter will display,
        "from web".

            $nt = Net::Twitter->new(netrc => 1,legacy => 0,ssl => 1,source => 'api');
            $nt->update('A post with the source parameter overridden.');
            # result: http://twitter.com/semifor_test/status/6541105458

            $nt = Net::Twitter->new(netrc => 1,legacy => 0,ssl => 1,source => '');
            $nt->update('A post with the source parameter overridden.');
            # result: http://twitter.com/semifor_test/status/6541257224

        If you want something other than "Net::Twitter", "API", or "web",
        you need to register an application and use OAuth authentication. If
        you do that, you can have any name you choose for the application
        printed as the source. Since rolling out OAuth, Twitter has stopped
        issuing new registered source parameters, only existing register
        source parameters are valid.

SEE ALSO
    Net::Twitter::Error
        The "Net::Twitter" exception object.

    <http://dev.twitter.com/doc>
        This is the official Twitter API documentation. It describes the
        methods and their parameters in more detail and may be more current
        than the documentation provided with this module.

    LWP::UserAgent::POE
        This LWP::UserAgent compatible class can be used in POE based
        application along with Net::Twitter to provide concurrent,
        non-blocking requests.

    Catalyst::Authentication::Credential::Twitter
        This module, by Jesse Stay, provides Twitter OAuth authentication
        support for the popular Catalyst web application framework.

SUPPORT
    Please report bugs to "bug-net-twitter@rt.cpan.org", or through the web
    interface at <https://rt.cpan.org/Dist/Display.html?Queue=Net-Twitter>.

    Join the Net::Twitter IRC channel at <irc://irc.perl.org/net-twitter>.

    Follow perl_api: <http://twitter.com/perl_api>.

    Track Net::Twitter development at
    <http://github.com/semifor/Net-Twitter>.

ACKNOWLEDGEMENTS
    Many thanks to Chris Thompson <cpan@cthompson.com>, the original author
    of "Net::Twitter" and all versions prior to 3.00.

    Also, thanks to Chris Prather (perigrin) for answering many design and
    implementation questions, especially with regards to Moose.

AUTHOR
    Marc Mims <marc@questright.com> (@semifor on Twitter)

CONTRIBUTORS
    Roberto Etcheverry <retcheverry@gmail.com> (@retcheverry on Twitter)

    KATOU Akira

    Francisco Pecorella

    Doug Bell <doug@plainblack.com>

LICENSE
    Copyright (c) 2009 Marc Mims

    The Twitter API itself, and the description text used in this module is:

    Copyright (c) 2009 Twitter

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

DISCLAIMER OF WARRANTY
    BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
    FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
    OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
    PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
    EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
    ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
    YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
    NECESSARY SERVICING, REPAIR, OR CORRECTION.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
    WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
    REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENSE, BE LIABLE
    TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
    CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
    SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
    RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
    FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
    SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
    DAMAGES.

