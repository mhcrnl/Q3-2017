.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::IntUtils 3"
.TH Prima::IntUtils 3 "2015-11-04" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::IntUtils \- internal functions
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module provides packages, containing common functionality
for some standard classes. The packages are designed as a code
containers, not as widget classes, and are to be used as 
secondary ascendants in the widget inheritance declaration.
.SH "Prima::MouseScroller"
.IX Header "Prima::MouseScroller"
Implements routines for emulation of auto repeating mouse events.
A code inside \f(CW\*(C`MouseMove\*(C'\fR callback can be implemented by
the following scheme:
.PP
.Vb 7
\&        if ( mouse_pointer_inside_the_scrollable_area) {
\&                $self\-> scroll_timer_stop;
\&        } else {
\&                $self\-> scroll_timer_start unless $self\-> scroll_timer_active;
\&                return unless $self\-> scroll_timer_semaphore;
\&                $self\-> scroll_timer_semaphore( 0);
\&        }
.Ve
.PP
The class uses a semaphore \f(CW\*(C`{mouseTransaction}\*(C'\fR, which should
be set to non-zero if a widget is in mouse capture state, and set 
to zero or \f(CW\*(C`undef\*(C'\fR otherwise.
.PP
The class starts an internal timer, which sets a semaphore and
calls \f(CW\*(C`MouseMove\*(C'\fR notification when triggered. The timer is
assigned the timeouts, returned by \f(CW\*(C`Prima::Application::get_scroll_rate\*(C'\fR
( see \*(L"get_scroll_rate\*(R" in Prima::Application ).
.SS "Methods"
.IX Subsection "Methods"
.IP "scroll_timer_active" 4
.IX Item "scroll_timer_active"
Returns a boolean value indicating if the internal timer is started.
.IP "scroll_timer_semaphore [ \s-1VALUE \s0]" 4
.IX Item "scroll_timer_semaphore [ VALUE ]"
A semaphore, set to 1 when the internal timer was triggered. It is advisable
to check the semaphore state to discern a timer-generated event from
the real mouse movement. If \s-1VALUE\s0 is specified, it is assigned to the semaphore.
.IP "scroll_timer_start" 4
.IX Item "scroll_timer_start"
Starts the internal timer.
.IP "scroll_timer_stop" 4
.IX Item "scroll_timer_stop"
Stops the internal timer.
.SH "Prima::IntIndents"
.IX Header "Prima::IntIndents"
Provides the common functionality for the widgets that delegate part of their
surface to the border elements. A list box can be of an example, where its
scroll bars and 3\-d borders are such elements.
.SS "Properties"
.IX Subsection "Properties"
.IP "indents \s-1ARRAY\s0" 4
.IX Item "indents ARRAY"
Contains four integers, specifying the breadth of decoration elements for
each side. The first integer is width of the left element, the second \- height
of the lower element, the third \- width of the right element, the fourth \- height
of the upper element.
.Sp
The property can accept and return the array either as a four scalars, or as
an anonymous array of four scalars.
.SS "Methods"
.IX Subsection "Methods"
.IP "get_active_area [ \s-1TYPE\s0 = 0, \s-1WIDTH, HEIGHT \s0]" 4
.IX Item "get_active_area [ TYPE = 0, WIDTH, HEIGHT ]"
Calculates and returns the extension of the area without the border elements,
or the active area.
The extension are related to the current size of a widget, however, can be
overridden by specifying \s-1WIDTH\s0 and \s-1HEIGHT. TYPE\s0 is an integer, indicating
the type of calculation:
.RS 4
.IP "\s-1TYPE\s0 = 0" 4
.IX Item "TYPE = 0"
Returns four integers, defining the area in the inclusive-exclusive coordinates.
.IP "\s-1TYPE\s0 = 1" 4
.IX Item "TYPE = 1"
Returns four integers, defining the area in the inclusive-inclusive coordinates.
.IP "\s-1TYPE\s0 = 2" 4
.IX Item "TYPE = 2"
Returns two integers, the size of the area.
.RE
.RS 4
.RE
.SH "Prima::GroupScroller"
.IX Header "Prima::GroupScroller"
The class is used for widgets that contain optional scroll bars, and provides means for
their maintenance. The class is the descendant of Prima::IntIndents, and adjusts
the indents property when scrollbars are shown or hidden, or borderWidth is changed.
.PP
The class does not provide range selection for the scrollbars; the descentant classes
must implement that.
.PP
The descendant classes must follow the guidelines:
.IP "\(bu" 4
A class must provide \f(CW\*(C`borderWidth\*(C'\fR, \f(CW\*(C`hScroll\*(C'\fR, and \f(CW\*(C`vScroll\*(C'\fR property keys in \fIprofile_default()\fR .
A class may provide \f(CW\*(C`autoHScroll\*(C'\fR and \f(CW\*(C`autoVScroll\*(C'\fR property keys in \fIprofile_default()\fR .
.IP "\(bu" 4
A class' \fIinit()\fR method must set \f(CW\*(C`{borderWidth}\*(C'\fR, \f(CW\*(C`{hScroll}\*(C'\fR, and \f(CW\*(C`{vScroll}\*(C'\fR 
variables to 0 before the initialization, call \f(CW\*(C`setup_indents\*(C'\fR method,
and then assign the properties from the object profile.
.Sp
If a class provides \f(CW\*(C`autoHScroll\*(C'\fR and \f(CW\*(C`autoVScroll\*(C'\fR properties, these must be set to 
0 before the initialization.
.IP "\(bu" 4
If a class needs to overload one of \f(CW\*(C`borderWidth\*(C'\fR, \f(CW\*(C`hScroll\*(C'\fR, \f(CW\*(C`vScroll\*(C'\fR,
\&\f(CW\*(C`autoHScroll\*(C'\fR, and \f(CW\*(C`autoVScroll\*(C'\fR properties,
it is mandatory to call the inherited properties.
.IP "\(bu" 4
A class must implement the scroll bar notification callbacks: \f(CW\*(C`HScroll_Change\*(C'\fR and \f(CW\*(C`VScroll_Change\*(C'\fR.
.IP "\(bu" 4
A class must not use the reserved variable names, which are:
.Sp
.Vb 8
\&        {borderWidth}  \- internal borderWidth storage
\&        {hScroll}      \- internal hScroll value storage
\&        {vScroll}      \- internal vScroll value storage
\&        {hScrollBar}   \- pointer to the horizontal scroll bar
\&        {vScrollBar}   \- pointer to the vertical scroll bar
\&        {bone}         \- rectangular widget between the scrollbars
\&        {autoHScroll}  \- internal autoHScroll value storage
\&        {autoVScroll}  \- internal autoVScroll value storage
.Ve
.Sp
The reserved method names:
.Sp
.Vb 10
\&        set_h_scroll
\&        set_v_scroll
\&        insert_bone
\&        setup_indents
\&        reset_indents
\&        borderWidth
\&        autoHScroll
\&        autoVScroll
\&        hScroll
\&        vScroll
.Ve
.Sp
The reserved widget names:
.Sp
.Vb 3
\&        HScroll
\&        VScroll
\&        Bone
.Ve
.SS "Properties"
.IX Subsection "Properties"
.IP "autoHScroll \s-1BOOLEAN\s0" 4
.IX Item "autoHScroll BOOLEAN"
Selects if the horizontal scrollbar is to be shown and hidden dynamically,
depending on the widget layout.
.IP "autoVScroll \s-1BOOLEAN\s0" 4
.IX Item "autoVScroll BOOLEAN"
Selects if the vertical scrollbar is to be shown and hidden dynamically,
depending on the widget layout.
.IP "borderWidth \s-1INTEGER\s0" 4
.IX Item "borderWidth INTEGER"
Width of 3d\-shade border around the widget.
.Sp
Recommended default value: 2
.IP "hScroll \s-1BOOLEAN\s0" 4
.IX Item "hScroll BOOLEAN"
Selects if the horizontal scrollbar is visible. If it is, \f(CW\*(C`{hScrollBar}\*(C'\fR
points to it.
.IP "vScroll \s-1BOOLEAN\s0" 4
.IX Item "vScroll BOOLEAN"
Selects if the vertical scrollbar is visible. If it is, \f(CW\*(C`{vScrollBar}\*(C'\fR
points to it.
.IP "scrollBarClass \s-1STRING\s0 = Prima::ScrollBar" 4
.IX Item "scrollBarClass STRING = Prima::ScrollBar"
Create-only property that allows to change scrollbar class
.IP "hScrollBarProfile, vScrollBarProfile \s-1HASH\s0" 4
.IX Item "hScrollBarProfile, vScrollBarProfile HASH"
Create-only property that allows to change scrollbar parameters when it is being created
.SS "Properties"
.IX Subsection "Properties"
.IP "setup_indents" 4
.IX Item "setup_indents"
The method is never called directly; it should be called whenever widget
layout is changed so that indents are affected. The method is a request
to recalculate indents, depending on the widget layout.
.Sp
The method is not reentrant; to receive this callback and update the widget
layout, that in turn can result in more \f(CW\*(C`setup_indents\*(C'\fR calls, overload
\&\f(CW\*(C`reset_indents\*(C'\fR .
.IP "reset_indents" 4
.IX Item "reset_indents"
Called after \f(CW\*(C`setup_indents\*(C'\fR is called and internal widget layout is updated,
to give a chance to follow-up the layout changes.
.SH "Prima::UndoActions"
.IX Header "Prima::UndoActions"
Used for classes that can edit and undo and redo its content.
.SS "Properties"
.IX Subsection "Properties"
.IP "undoLimit \s-1INTEGER\s0" 4
.IX Item "undoLimit INTEGER"
Sets limit on number of stored atomic undo operations. If 0,
undo is disabled.
.SS "Methods"
.IX Subsection "Methods"
.IP "begin_undo_group" 4
.IX Item "begin_undo_group"
Opens bracket for group of actions, undone as single operation. 
The bracket is closed by calling \f(CW\*(C`end_undo_group\*(C'\fR.
.IP "end_undo_group" 4
.IX Item "end_undo_group"
Closes bracket for group of actions, opened by \f(CW\*(C`begin_undo_group\*(C'\fR.
.IP "redo" 4
.IX Item "redo"
Re-applies changes, formerly rolled back by \f(CW\*(C`undo\*(C'\fR.
.IP "undo" 4
.IX Item "undo"
Rolls back changes into internal array, which size cannot extend \f(CW\*(C`undoLimit\*(C'\fR
value. In case \f(CW\*(C`undoLimit\*(C'\fR is 0, no undo actions can be made.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::Widget, Prima::InputLine, Prima::Lists, Prima::Edit,
Prima::Outlines, Prima::ScrollBar.
