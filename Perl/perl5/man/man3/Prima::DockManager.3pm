.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::DockManager 3"
.TH Prima::DockManager 3 "2014-07-15" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::DockManager \- advanced dockable widgets
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Prima::DockManager\*(C'\fR contains classes that implement additional
functionality within the dockable widgets paradigm.
.PP
The module introduces two new dockable widget classes:
\&\f(CW\*(C`Prima::DockManager::Panelbar\*(C'\fR, a general purpose 
dockable container for variable-sized widgets; and \f(CW\*(C`Prima::DockManager::Toolbar\*(C'\fR, 
a dockable container for fixed-size command widgets, mostly push buttons. 
The command widgets, nested in a toolbar, can also be docked.
.PP
\&\f(CW\*(C`Prima::DockManager\*(C'\fR class is an application-oriented class in a way
that ( mostly ) the only instance of it is needed in the program. It
is derived from \f(CW\*(C`Prima::Component\*(C'\fR and therefore is never visualized.
The class instance is stored in \f(CW\*(C`instance\*(C'\fR property of all module classes
to serve as a docking hierarchy root. Through the document, \fIinstance\fR
term is referred to \f(CW\*(C`Prima::DockManager\*(C'\fR class instance.
.PP
The module by itself is not enough to make a docking-aware application work
effectively. The reader is urged to look at \fIexamples/dock.pl\fR 
example code, which demonstrates the usage and capabilities of
the module.
.SH "Prima::DockManager::Toolbar"
.IX Header "Prima::DockManager::Toolbar"
A toolbar widget class. The toolbar has a dual nature; it can dock
and accept docking widgets simultaneously. In the scope of \f(CW\*(C`Prima::DockManager\*(C'\fR,
the toolbar hosts command widget, mostly push buttons.
.PP
The toolbar consists of two widgets. The external dockable widget is
implemented in \f(CW\*(C`Prima::DockManager::Toolbar\*(C'\fR, and the internal dock
in \f(CW\*(C`Prima::DockManager::ToolbarDocker\*(C'\fR classes.
.SS "Properties"
.IX Subsection "Properties"
.IP "autoClose \s-1BOOLEAN\s0" 4
.IX Item "autoClose BOOLEAN"
Selects the behavior of a toolbar when all of its command widgets are
undocked. If 1, the toolbar is automatically destroyed. If 0
it calls \f(CWvisible(0)\fR.
.IP "childDocker \s-1WIDGET\s0" 4
.IX Item "childDocker WIDGET"
Pointer to \f(CW\*(C`Prima::DockManager::ToolbarDocker\*(C'\fR instance.
.Sp
See also \f(CW\*(C`Prima::DockManager::ToolbarDocker::parentDocker\*(C'\fR.
.IP "instance \s-1INSTANCE\s0" 4
.IX Item "instance INSTANCE"
\&\f(CW\*(C`Prima::DockManager\*(C'\fR instance, the docking hierarchy root.
.SH "Prima::DockManager::ToolbarDocker"
.IX Header "Prima::DockManager::ToolbarDocker"
Internal class, implements a dock widget for command widgets,
while serves as a client in a dockable toolbar, which is
a \f(CW\*(C`Prima::LinearDockerShuttle\*(C'\fR descendant. When its size is
changed due an eventual rearrange of its docked widgets, also resizes
the toolbar.
.SS "Properties"
.IX Subsection "Properties"
.IP "instance \s-1INSTANCE\s0" 4
.IX Item "instance INSTANCE"
\&\f(CW\*(C`Prima::DockManager\*(C'\fR instance, the docking hierarchy root.
.IP "parentDocker \s-1WIDGET\s0" 4
.IX Item "parentDocker WIDGET"
Pointer to \f(CW\*(C`Prima::DockManager::Toolbar\*(C'\fR instance. When in
the docked state, \f(CW\*(C`parentDocker\*(C'\fR value is always equals to \f(CW\*(C`owner\*(C'\fR.
.Sp
See also \f(CW\*(C`Prima::DockManager::Toolbar::childDocker\*(C'\fR.
.SS "Methods"
.IX Subsection "Methods"
.IP "get_extent" 4
.IX Item "get_extent"
Calculates the minimal rectangle that encloses all docked widgets
and returns its extensions.
.IP "update_size" 4
.IX Item "update_size"
Called when size is changed to resizes the owner widget. If it is in the docked
state, the size change might result in change of position or docking state.
.SH "Prima::DockManager::Panelbar"
.IX Header "Prima::DockManager::Panelbar"
The class is derived from \f(CW\*(C`Prima::LinearDockerShuttle\*(C'\fR, and
is different only in that \f(CW\*(C`instance\*(C'\fR property is introduced,
and the external shuttle can be resized interactively.
.PP
The class is to be used as a simple host to sizeable widgets.
The user can dispose of the panel bar by clicking close button
on the external shuttle.
.SS "Properties"
.IX Subsection "Properties"
.IP "instance \s-1INSTANCE\s0" 4
.IX Item "instance INSTANCE"
\&\f(CW\*(C`Prima::DockManager\*(C'\fR instance, the docking hierarchy root.
.SH "Prima::DockManager"
.IX Header "Prima::DockManager"
A binder class, contains set of functions that groups
toolbars, panels, and command widgets together under the docking
hierarchy.
.PP
The manager servers several purposes. 
First, it is a command state holder: the command
widgets, mostly buttons, usually are in enabled or disabled state in different
life stages of a program. The manager maintains the enabled/disabled state
by assigning each command an unique scalar value ( farther and in the
code referred as \fI\s-1CLSID\s0\fR ). The toolbars can be created with set of
command widgets, referred via these CLSIDs. The same is valid for
the panels \- although they do not host command widgets, the widgets that
they do host can also be created indirectly via \s-1CLSID\s0 identifier.
In addition to \s-1CLSID,\s0 the commands can be grouped by sections.
Both \s-1CLSID\s0 and group descriptor scalars are defined by the programmer.
.PP
Second, \f(CW\*(C`create_manager\*(C'\fR method presents a standard configuration
widget, that allows rearranging of normally non-dockable command widgets,
by presenting a full set of available commands to the user as icons.
Dragging the icons to toolbars, dock widgets or merely outside the
configuration widget automatically creates the corresponding command widget.
The notable moment here is that the command widgets are not required
to know anything about dragging and docking; any \f(CW\*(C`Prima::Widget\*(C'\fR
descendant can be used as a command widget.
.PP
Third, it helps maintaining the toolbars and panels visibility
when the main window is hidden or restored. \f(CW\*(C`windowState\*(C'\fR method
hides or shows the toolbars and panels effectively.
.PP
Fourth, it serves as a docking hierarchy root. All docking sessions
begin from \f(CW\*(C`Prima::DockManager\*(C'\fR object, which although does not provide
docking capabilities itself ( it is \f(CW\*(C`Prima::Component\*(C'\fR descendant ),
redirects the docking requests to the lower-level dock widgets.
.PP
Fifth, it provides number of helper methods and notifications, 
and enforces use or \f(CW\*(C`fingerprint\*(C'\fR property by all dockable widgets.
This property has default value of \f(CW0xFFFF\fR ( defined in \f(CW\*(C`Prima::Docks\*(C'\fR ).
The module contains the fingerprint \f(CW\*(C`dmfp::XXX\*(C'\fR constants with value greater than this,
so the toolbars and panels are not docked to a dock widget with the default
configuration. The base constant set is:
.PP
.Vb 3
\&        fdmp::Tools      ( 0x0F000) \- dock the command widgets
\&        fdmp::Toolbar    ( 0x10000) \- dock the toolbars
\&        fdmp::LaunchPad  ( 0x20000) \- allows widgets recycling
.Ve
.PP
All this functionality is demonstrated in \fIexamples/dock.pl\fR 
example.
.SS "Properties"
.IX Subsection "Properties"
.IP "commands \s-1HASH\s0" 4
.IX Item "commands HASH"
A hash of boolean values, with keys of \s-1CLSID\s0 scalars.
If value is 1, the command is available. If 0, the command
is disabled. Changes to this property are reflected in the
visible command widgets, which are enabled or disabled
immediately. Also, \f(CW\*(C`CommandChange\*(C'\fR notification is triggered.
.IP "fingerprint \s-1INTEGER\s0" 4
.IX Item "fingerprint INTEGER"
The property is read-only, and always returns \f(CW0xFFFFFFFF\fR,
to allow landing for all dockable widgets. In case when a finer
granulation is needed, the default \f(CW\*(C`fingerprint\*(C'\fR values of
toolbars and panels can be reset.
.IP "interactiveDrag \s-1BOOLEAN\s0" 4
.IX Item "interactiveDrag BOOLEAN"
If 1, the command widgets can be interactively dragged,
created and destroyed. This property is usually operated together
with \f(CW\*(C`create_manager\*(C'\fR widget. If 0, the command widgets
cannot be dragged.
.Sp
Default value: 0
.SS "Methods"
.IX Subsection "Methods"
.IP "activate" 4
.IX Item "activate"
Brings to front all toolbars and panels. To be
used inside a callback code of a main window, that has 
the toolbars and panels attached to:
.Sp
.Vb 1
\&        onActivate => sub { $dock_manager\-> activate }
.Ve
.IP "auto_toolbar_name" 4
.IX Item "auto_toolbar_name"
Returns an unique name for an automatically created
toolbar, like \f(CW\*(C`Toolbar1\*(C'\fR, \f(CW\*(C`Toolbar2\*(C'\fR etc.
.ie n .IP "commands_enable \s-1BOOLEAN,\s0 @CLSIDs" 4
.el .IP "commands_enable \s-1BOOLEAN,\s0 \f(CW@CLSIDs\fR" 4
.IX Item "commands_enable BOOLEAN, @CLSIDs"
Enabled or disables commands from CLSIDs array.
The changes are reflected in the visible command widgets, which 
are enabled or disabled immediately. 
Also, \f(CW\*(C`CommandChange\*(C'\fR notification is triggered.
.ie n .IP "create_manager \s-1OWNER,\s0 %PROFILE" 4
.el .IP "create_manager \s-1OWNER,\s0 \f(CW%PROFILE\fR" 4
.IX Item "create_manager OWNER, %PROFILE"
Inserts two widgets into \s-1OWNER\s0 with \s-1PROFILE\s0 parameters:
a listbox with command section groups, displayed as items, that usually correspond to
the predefined toolbar names, and a notebook that displays the 
command icons. The notebook pages are interactively selected by the listbox
navigation.
.Sp
The icons, dragged from the notebook, behave as dockable widgets:
they can be landed upon a toolbar, or any other dock widget, given
it matches the \f(CW\*(C`fingerprint\*(C'\fR ( by default \f(CW\*(C`dmfp::LaunchPad|dmfp::Toolbar|dmfp::Tools\*(C'\fR).
\&\f(CW\*(C`dmfp::LaunchPad\*(C'\fR constant allows the recycling; if a widget is dragged
back onto the notebook, it is destroyed.
.Sp
Returns two widgets, the listbox and the notebook.
.Sp
\&\s-1PROFILE\s0 recognizes the following keys:
.RS 4
.IP "origin X, Y" 4
.IX Item "origin X, Y"
Position where the widgets are to be inserted.
Default value is 0,0.
.IP "size X, Y" 4
.IX Item "size X, Y"
Size of the widget insertion area. By default
the widgets occupy all \s-1OWNER\s0 interior.
.IP "listboxProfile \s-1PROFILE\s0" 4
.IX Item "listboxProfile PROFILE"
Custom parameters, passed to the listbox.
.IP "dockerProfile \s-1PROFILE\s0" 4
.IX Item "dockerProfile PROFILE"
Custom parameteres, passed to the notebook.
.RE
.RS 4
.RE
.ie n .IP "create_panel \s-1CLSID,\s0 %PROFILE" 4
.el .IP "create_panel \s-1CLSID,\s0 \f(CW%PROFILE\fR" 4
.IX Item "create_panel CLSID, %PROFILE"
Creates a dockable panel of a previously registered \s-1CLSID\s0
by \f(CW\*(C`register_panel\*(C'\fR. \s-1PROFILE\s0 recognizes the following keys:
.RS 4
.IP "profile \s-1HASH\s0" 4
.IX Item "profile HASH"
Hash of parameters, passed to \f(CW\*(C`create()\*(C'\fR of the panel widget class.
Before passing it is merged with the set of parameters, registered
by \f(CW\*(C`register_panel\*(C'\fR. The \f(CW\*(C`profile\*(C'\fR hash takes the precedence.
.IP "dockerProfile \s-1HASH\s0" 4
.IX Item "dockerProfile HASH"
Constains extra options, passed to \f(CW\*(C`Prima::DockManager::Panelbar\*(C'\fR 
widget. Before the usage it is merged with the set of parameters, 
registered by \f(CW\*(C`register_panel\*(C'\fR.
.Sp
\&\s-1NB:\s0 The \f(CW\*(C`dock\*(C'\fR key here contains a reference to a desired dock widget. 
If \f(CW\*(C`dock\*(C'\fR set to \f(CW\*(C`undef\*(C'\fR, the panel is created in the non-docked state.
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 3
\&        $dock_manager\-> create_panel( $CLSID, 
\&                dockerProfile => { dock => $main_window }},
\&                profile       => { backColor => cl::Green });
.Ve
.RE
.IP "create_tool \s-1OWNER, CLSID, X1, Y1, X2, Y2\s0" 4
.IX Item "create_tool OWNER, CLSID, X1, Y1, X2, Y2"
Inserts a command widget, previously registered with \s-1CLSID\s0 by \f(CW\*(C`register_tool\*(C'\fR, into
\&\s-1OWNER\s0 widget with X1 \- Y2 coordinates. For automatic maintenance of 
enable/disable state of command widgets \s-1OWNER\s0 is expected to be a 
toolbar. If it is not, the maintenance must be performed separately, 
for example, by \f(CW\*(C`CommandChange\*(C'\fR event.
.ie n .IP "create_toolbar %PROFILE" 4
.el .IP "create_toolbar \f(CW%PROFILE\fR" 4
.IX Item "create_toolbar %PROFILE"
Creates a new toolbar of \f(CW\*(C`Prima::DockManager::Toolbar\*(C'\fR class.
The following \s-1PROFILE\s0 options are recognized:
.RS 4
.IP "autoClose \s-1BOOLEAN\s0" 4
.IX Item "autoClose BOOLEAN"
Sets \f(CW\*(C`autoClose\*(C'\fR property of the toolbar.
.Sp
Default value is 1 if \f(CW\*(C`name\*(C'\fR options is set, 0 otherwise.
.IP "dock \s-1DOCK\s0" 4
.IX Item "dock DOCK"
Contain a reference to a desired \s-1DOCK\s0 widget. If \f(CW\*(C`undef\*(C'\fR,
the toolbar is created in the non-docked state.
.IP "dockerProfile \s-1HASH\s0" 4
.IX Item "dockerProfile HASH"
Parameters passed to \f(CW\*(C`Prima::DockManager::Toolbar\*(C'\fR as
creation properties.
.Sp
\&\s-1NB:\s0 The \f(CW\*(C`dock\*(C'\fR key here contains a reference to a desired dock widget. 
If \f(CW\*(C`dock\*(C'\fR set to \f(CW\*(C`undef\*(C'\fR, the panel is created in the non-docked state.
.IP "rect X1, Y1, X2, Y2" 4
.IX Item "rect X1, Y1, X2, Y2"
Selects rectangle of the \f(CW\*(C`Prima::DockManager::ToolbarDocker\*(C'\fR instance
in the dock widget ( if docked ) or the screen ( if non-docked ) coordinates.
.IP "toolbarProfile \s-1HASH\s0" 4
.IX Item "toolbarProfile HASH"
Parameters passed to \f(CW\*(C`Prima::DockManager::ToolbarDocker\*(C'\fR as
creation properties.
.IP "vertical \s-1BOOLEAN\s0" 4
.IX Item "vertical BOOLEAN"
Sets \f(CW\*(C`vertical\*(C'\fR property of the toolbar.
.IP "visible \s-1BOOLEAN\s0" 4
.IX Item "visible BOOLEAN"
Selects visibility state of the toolbar.
.RE
.RS 4
.RE
.IP "get_class \s-1CLSID\s0" 4
.IX Item "get_class CLSID"
Returns class record hash, registered under \s-1CLSID,\s0 or \f(CW\*(C`undef\*(C'\fR
if the class is not registered. The hash format contains
the following keys:
.RS 4
.IP "class \s-1STRING\s0" 4
.IX Item "class STRING"
Widget class
.IP "profile \s-1HASH\s0" 4
.IX Item "profile HASH"
Creation parameters passed to \f(CW\*(C`create\*(C'\fR when the widget is created.
.IP "tool \s-1BOOLEAN\s0" 4
.IX Item "tool BOOLEAN"
If 1, the class belongs to a control widget. If 0,
the class represents a panel client widget.
.IP "lastUsedDock \s-1DOCK\s0" 4
.IX Item "lastUsedDock DOCK"
Saved value of the last used dock widget
.IP "lastUsedRect X1, Y1, X2, Y2" 4
.IX Item "lastUsedRect X1, Y1, X2, Y2"
Saved coordinates of the widget
.RE
.RS 4
.RE
.IP "panel_by_id \s-1CLSID\s0" 4
.IX Item "panel_by_id CLSID"
Return reference to a panel widget represented by \s-1CLSID\s0 scalar,
or \f(CW\*(C`undef\*(C'\fR if none found.
.IP "panel_menuitems \s-1CALLBACK\s0" 4
.IX Item "panel_menuitems CALLBACK"
A helper function; maps all panel names into a structure, ready to
feed into \f(CW\*(C`Prima::AbstractMenu::items\*(C'\fR property ( see Prima::Menu ).
The action member of the menu item record is set to \s-1CALLBACK\s0 scalar.
.IP "panel_visible \s-1CLSID, BOOLEAN\s0" 4
.IX Item "panel_visible CLSID, BOOLEAN"
Sets the visibility of a panel, referred by \s-1CLSID\s0 scalar.
If \s-1VISIBLE\s0 is 0, a panel is destroyed; if 1, new panel instance
is created.
.IP "panels" 4
.IX Item "panels"
Returns all visible panel widgets in an array.
.IP "predefined_panels \s-1CLSID, DOCK,\s0 [ \s-1CLSID, DOCK, ... \s0]" 4
.IX Item "predefined_panels CLSID, DOCK, [ CLSID, DOCK, ... ]"
Accepts pairs of scalars, where each first item is a panel \s-1CLSID\s0
and second is the default dock widget. Checks for panel visibility,
and creates the panels that are not visible.
.Sp
The method is useful in program startup, when some panels
have to be visible from the beginning.
.ie n .IP "predefined_toolbars @PROFILES" 4
.el .IP "predefined_toolbars \f(CW@PROFILES\fR" 4
.IX Item "predefined_toolbars @PROFILES"
Accepts array of hashes, where each array item describes a toolbar and
a default set of command widgets. Checks for toolbar visibility,
and creates the toolbars that are not visible.
.Sp
The method recognizes the following \s-1PROFILES\s0 options:
.RS 4
.IP "dock \s-1DOCK\s0" 4
.IX Item "dock DOCK"
The default dock widget.
.IP "list \s-1ARRAY\s0" 4
.IX Item "list ARRAY"
Array of CLSIDs corresponding to the command widgets to be inserted
into the toolbar.
.IP "name \s-1STRING\s0" 4
.IX Item "name STRING"
Selects toolbar name.
.IP "origin X, Y" 4
.IX Item "origin X, Y"
Selects the toolbar position relative to the dock ( if \f(CW\*(C`dock\*(C'\fR is specified )
or to the screen ( if \f(CW\*(C`dock\*(C'\fR is not specified ).
.RE
.RS 4
.Sp
The method is useful in program startup, when some panels
have to be visible from the beginning.
.RE
.IP "register_panel \s-1CLSID, PROFILE\s0" 4
.IX Item "register_panel CLSID, PROFILE"
Registers a panel client class and set of parameters to be associated with
\&\s-1CLSID\s0 scalar. \s-1PROFILE\s0 must contain the following keys:
.RS 4
.IP "class \s-1STRING\s0" 4
.IX Item "class STRING"
Client widget class
.IP "text \s-1STRING\s0" 4
.IX Item "text STRING"
String, displayed in the panel title bar
.IP "dockerProfile \s-1HASH\s0" 4
.IX Item "dockerProfile HASH"
Hash of parameters, passed to \f(CW\*(C`Prima::DockManager::Panelbar\*(C'\fR.
.IP "profile" 4
.IX Item "profile"
Hash of parameters, passed to the client widget.
.RE
.RS 4
.RE
.IP "register_tool \s-1CLSID, PROFILE\s0" 4
.IX Item "register_tool CLSID, PROFILE"
Registers a control widget class and set of parameters to be associated with
\&\s-1CLSID\s0 scalar. \s-1PROFILE\s0 must be set the following keys:
.RS 4
.IP "class \s-1STRING\s0" 4
.IX Item "class STRING"
Client widget class
.IP "profile \s-1HASH\s0" 4
.IX Item "profile HASH"
Hash of parameters, passed to the control widget.
.RE
.RS 4
.RE
.IP "toolbar_by_name \s-1NAME\s0" 4
.IX Item "toolbar_by_name NAME"
Returns a pointer to a toolbar of \s-1NAME,\s0 or \f(CW\*(C`undef\*(C'\fR if none found.
.IP "toolbar_menuitems \s-1CALLBACK\s0" 4
.IX Item "toolbar_menuitems CALLBACK"
A helper function; maps all toolbar names into a structure, ready to
feed into \f(CW\*(C`Prima::AbstractMenu::items\*(C'\fR property ( see Prima::Menu ).
The action member of the menu item record is set to \s-1CALLBACK\s0 scalar.
.IP "toolbar_visible \s-1TOOLBAR, BOOLEAN\s0" 4
.IX Item "toolbar_visible TOOLBAR, BOOLEAN"
Sets the visibility of a \s-1TOOLBAR.\s0
If \s-1VISIBLE\s0 is 0, the toolbar is hidden; if 1, it is shown.
.IP "toolbars" 4
.IX Item "toolbars"
Returns all toolbar widgets in an array.
.IP "windowState \s-1INTEGER\s0" 4
.IX Item "windowState INTEGER"
Mimics interface of \f(CW\*(C`Prima::Window::windowState\*(C'\fR, and maintains
visibility of toolbars and panels. If the parameter is \f(CW\*(C`ws::Minimized\*(C'\fR,
the toolbars and panels are hidden. On any other parameter these are shown.
.Sp
To be used inside a callback code of a main window, that has the toolbars 
and panels attached to:
.Sp
.Vb 1
\&        onWindowState => sub { $dock_manager\-> windowState( $_[1] ) }
.Ve
.SS "Events"
.IX Subsection "Events"
.IP "Command \s-1CLSID\s0" 4
.IX Item "Command CLSID"
A generic event, triggered by a command widget when the user activates
it. It can also be called by other means.
.Sp
\&\s-1CLSID\s0 is the widget identifier.
.IP "CommandChange" 4
.IX Item "CommandChange"
Called when \f(CW\*(C`commands\*(C'\fR property changes or \f(CW\*(C`commands_enable\*(C'\fR method is invoked.
.IP "PanelChange" 4
.IX Item "PanelChange"
Triggered when a panel is created or destroyed by the user.
.IP "ToolbarChange" 4
.IX Item "ToolbarChange"
Triggered when a toolbar is created, shown, hidden, or destroyed  by the user.
.SH "Prima::DockManager::S::SpeedButton"
.IX Header "Prima::DockManager::S::SpeedButton"
The package simplifies creation of \f(CW\*(C`Prima::SpeedButton\*(C'\fR command widgets.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP "class \s-1IMAGE, CLSID,\s0 %PROFILE" 4
.el .IP "class \s-1IMAGE, CLSID,\s0 \f(CW%PROFILE\fR" 4
.IX Item "class IMAGE, CLSID, %PROFILE"
Builds a hash with parameters, ready to feed \f(CW\*(C`Prima::DockManager::register_tool\*(C'\fR
for registering a \f(CW\*(C`Prima::SpeedButton\*(C'\fR class instance with \s-1PROFILE\s0 parameters.
.Sp
\&\s-1IMAGE\s0 is a path to a image file, loaded and stored in the registration hash.
\&\s-1IMAGE\s0 provides an extended syntax for indicating a frame index, if the image file is multiframed: the frame index is appended to the path name
with \f(CW\*(C`:\*(C'\fR character prefix.
.Sp
\&\s-1CLSID\s0 scalar is not used; it is returned so the method result can
directly be passed into \f(CW\*(C`register_tool\*(C'\fR method.
.Sp
Returns two scalars: \s-1CLSID\s0 and the registration hash.
.Sp
Example:
.Sp
.Vb 3
\&        $dock_manager\-> register_tool( 
\&                Prima::DockManager::S::SpeedButton::class( "myicon.gif:2", 
\&                q(CLSID::Logo), hint => \*(AqLogo image\*(Aq ));
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::Widget, Prima::Docks, \fIexamples/dock.pl\fR
