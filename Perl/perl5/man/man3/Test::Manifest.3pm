.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Manifest 3"
.TH Test::Manifest 3 "2014-08-26" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Manifest \- interact with a t/test_manifest file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        # in Makefile.PL
\&        eval "use Test::Manifest 2.00";
\&
\&        # in Build.PL
\&        my $class = do {
\&                if( eval "Test::Manifest 2.00" ) {
\&                        Test::Manifest\->get_module_build_subclass;
\&                        }
\&                else {
\&                        \*(AqModule::Build\*(Aq;
\&                        }
\&                };
\&
\&        my $build = $class\->new( ... )
\&
\&        # in the file t/test_manifest, list the tests you want
\&        # to run in the order you want to run them
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Test::Harness\*(C'\fR assumes that you want to run all of the \fI.t\fR files
in the \fIt/\fR directory in ASCII-betical order during \f(CW\*(C`make test\*(C'\fR or
\&\f(CW\*(C`./Build test\*(C'\fR unless you say otherwise.  This leads to some
interesting naming schemes for test files to get them in the desired
order. These interesting names ossify when they get into source
control, and get even more interesting as more tests show up.
.PP
\&\f(CW\*(C`Test::Manifest\*(C'\fR overrides the default test file order. Instead of
running all of the \fIt/*.t\fR files in ASCII-betical order, it looks in
the \fIt/test_manifest\fR file to find out which tests you want to run
and the order in which you want to run them.  It constructs the right
value for the build system to do the right thing.
.PP
In \fIt/test_manifest\fR, simply list the tests that you want to run.
Their order in the file is the order in which they run.  You can
comment lines with a \f(CW\*(C`#\*(C'\fR, just like in Perl, and \f(CW\*(C`Test::Manifest\*(C'\fR
will strip leading and trailing whitespace from each line.  It also
checks that the specified file is actually in the \fIt/\fR directory.  If
the file does not exist, it does not put its name in the list of test
files to run and it will issue a warning.
.PP
Optionally, you can add a number after the test name in test_manifest
to define sets of tests. See \f(CW\*(C`get_t_files\*(C'\fR for more information.
.SS "ExtUtils::Makemaker"
.IX Subsection "ExtUtils::Makemaker"
To override the test order behaviour in \f(CW\*(C`Makemaker\*(C'\fR, \f(CW\*(C`Test::Manifest\*(C'\fR
inserts itself in the \f(CW\*(C`test_via_harness\*(C'\fR step by providing its own
test runner. In \f(CW\*(C`Makefile.PL\*(C'\fR, all you have to do is load \f(CW\*(C`Test::Manifest\*(C'\fR
before you call \f(CW\*(C`WriteMakefile\*(C'\fR. To make it optional, load it in an eval:
.PP
.Vb 1
\&        eval "use Test::Manifest";
.Ve
.SS "Module::Build"
.IX Subsection "Module::Build"
Overiding parts of \f(CW\*(C`Module::Build\*(C'\fR is tricker if you want to use the
subclassing mechanism and still make \f(CW\*(C`Test::Manifest\*(C'\fR optional. If you
can load \f(CW\*(C`Test::Manifest\*(C'\fR (version 2.00 or later), \f(CW\*(C`Test::Manifest\*(C'\fR can
create the subclass for you.
.PP
.Vb 8
\&        my $class = do {
\&                if( eval \*(AqTest::Manifest 2.00; 1\*(Aq ) {
\&                        Test::Manifest\->get_module_build_subclass;
\&                        }
\&                else {
\&                        \*(AqModule::Build\*(Aq # if Test::Manifest isn\*(Aqt there
\&                        }
\&                };
\&
\&        $class\->new( ... );
\&        $class\->create_build_file;
.Ve
.PP
This is a bit of a problem when you already have your own subclass.
\&\f(CW\*(C`Test::Manifest\*(C'\fR overrides \f(CW\*(C`find_test_files\*(C'\fR, so you can get just
that code to add to your own subclass code string:
.PP
.Vb 5
\&        my $code = eval \*(AqTest::Manifest 2.00; 1\*(Aq
\&                        ?
\&                Test::Manifest\->get_module_build_code_string
\&                        :
\&                \*(Aq\*(Aq;
\&
\&        my $class = Module::Build\->subclass(
\&                ...,
\&                code => "$code\en...your subclass code string...",
\&                );
.Ve
.SS "Class methods"
.IX Subsection "Class methods"
.IP "get_module_build_subclass" 4
.IX Item "get_module_build_subclass"
For \f(CW\*(C`Module::Build\*(C'\fR only.
.Sp
Returns a \f(CW\*(C`Module::Build\*(C'\fR subclass that overrides \f(CW\*(C`find_test_files\*(C'\fR. If
you want to have your own \f(CW\*(C`Module::Build\*(C'\fR subclass and still use
\&\f(CW\*(C`Test::Manifest\*(C'\fR, you can get just the code string with
\&\f(CW\*(C`get_module_build_code_string\*(C'\fR.
.IP "get_module_build_code_string" 4
.IX Item "get_module_build_code_string"
For \f(CW\*(C`Module::Build\*(C'\fR only.
.Sp
Returns the overridden \f(CW\*(C`find_test_files\*(C'\fR as Perl code in a string suitable
for the \f(CW\*(C`code\*(C'\fR key in \f(CW\*(C`Module::Build\-\*(C'\fR\fIsubclass()\fR>. You can add this to other
bits you are overriding or extending.
.Sp
See \f(CW\*(C`Module::Build::Base::find_test_files\*(C'\fR to see the base implementation.
.SS "Functions"
.IX Subsection "Functions"
.IP "run_t_manifest( \s-1TEST_VERBOSE, INST_LIB, INST_ARCHLIB, TEST_LEVEL \s0)" 4
.IX Item "run_t_manifest( TEST_VERBOSE, INST_LIB, INST_ARCHLIB, TEST_LEVEL )"
For \f(CW\*(C`Makemaker\*(C'\fR only. You don't have to mess with this at the user
level.
.Sp
Run all of the files in \fIt/test_manifest\fR through \f(CW\*(C`Test::Harness:runtests\*(C'\fR
in the order they appear in the file. This is inserted automatically
.Sp
.Vb 1
\&        eval "use Test::Manifest";
.Ve
.IP "get_t_files( [\s-1LEVEL\s0] )" 4
.IX Item "get_t_files( [LEVEL] )"
In scalar context it returns a single string that you can use directly
in \f(CW\*(C`WriteMakefile()\*(C'\fR. In list context it returns a list of the files it
found in \fIt/test_manifest\fR.
.Sp
If a \fIt/test_manifest\fR file does not exist, \f(CW\*(C`get_t_files()\*(C'\fR returns
nothing.
.Sp
\&\f(CW\*(C`get_t_files()\*(C'\fR warns you if it can't find \fIt/test_manifest\fR, or if
entries start with \fIt/\fR. It skips blank lines, and strips Perl
style comments from the file.
.Sp
Each line in \fIt/test_manifest\fR can have three parts: the test name,
the test level (a floating point number), and a comment. By default,
the test level is 1.
.Sp
.Vb 1
\&        test_name.t 2  #Run this only for level 2 testing
.Ve
.Sp
Without an argument, \f(CW\*(C`get_t_files()\*(C'\fR returns all the test files it
finds. With an argument that is true (so you can't use 0 as a level)
and is a number, it skips tests with a level greater than that
argument. You can then define sets of tests and choose a set to
run. For instance, you might create a set for end users, but also
add on a set for deeper testing for developers.
.Sp
Experimentally, you can include a command to grab test names from
another file. The command starts with a \f(CW\*(C`;\*(C'\fR to distinguish it
from a true filename. The filename (currently) is relative to the
current working directory, unlike the filenames, which are relative
to \f(CW\*(C`t/\*(C'\fR. The filenames in the included are still relative to \f(CW\*(C`t/\*(C'\fR.
.Sp
.Vb 1
\&        ;include t/file_with_other_test_names.txt
.Ve
.Sp
Also experimentally, you can stop \f(CW\*(C`Test::Manifest\*(C'\fR from reading
filenames with the \f(CW\*(C`;skip\*(C'\fR directive. \f(CW\*(C`Test::Manifest\*(C'\fR will skip the
filenames up to the \f(CW\*(C`;unskip\*(C'\fR directive (or end of file):
.Sp
.Vb 5
\&        run_this1
\&        ;skip
\&        skip_this
\&        ;unskip
\&        run_this2
.Ve
.Sp
To select sets of tests, specify the level in the environment variable
\&\f(CW\*(C`TEST_LEVEL\*(C'\fR:
.Sp
.Vb 2
\&        make test # run all tests no matter the level
\&        make test TEST_LEVEL=2  # run all tests level 2 and below
.Ve
.Sp
Eventually this will end up as an option to \fIBuild.PL\fR:
.Sp
.Vb 1
\&        ./Build test \-\-testlevel=2  # Not yet supported
.Ve
.IP "\fImake_test_manifest()\fR" 4
.IX Item "make_test_manifest()"
Creates the test_manifest file in the t directory by reading the
contents of the \fIt/\fR directory.
.Sp
\&\s-1TO DO:\s0 specify tests in argument lists.
.Sp
\&\s-1TO DO:\s0 specify files to skip.
.IP "\fImanifest_name()\fR" 4
.IX Item "manifest_name()"
Returns the name of the test manifest file, relative to \fIt/\fR.
.SH "SOURCE AVAILABILITY"
.IX Header "SOURCE AVAILABILITY"
This source is in Github:
.PP
.Vb 1
\&        http://github.com/briandfoy/test\-manifest/
.Ve
.SH "CREDITS"
.IX Header "CREDITS"
Matt Vanderpol suggested and supplied a patch for the \f(CW\*(C`;include\*(C'\fR
feature.
.SH "AUTHOR"
.IX Header "AUTHOR"
brian d foy, \f(CW\*(C`<bdfoy@cpan.org>\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2002\-2014 brian d foy. All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
