.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::ComboBox 3"
.TH Prima::ComboBox 3 "2015-09-13" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::ComboBox \- standard combo box widget
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Prima::ComboBox;
\&
\&        my $combo = Prima::ComboBox\-> create( style => cs::DropDown, items => [ 1 .. 10 ]);
\&        $combo\-> style( cs::DropDownList );
\&        print $combo\-> text;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a combo box widget which consists of an input line, list box of possible
selections and eventual drop-down button. The combo box can be either in form 
with a drop-down selection list, that is shown by the command of the user,
or in form when the selection list is always visible.
.PP
The combo box is a grouping widget, and contains neither painting nor user-input
code. All such functionality is delegated into the children widgets: input line, list
box and button. \f(CW\*(C`Prima::ComboBox\*(C'\fR exports a fixed list of methods and properties from
namespaces of Prima::InputLine and Prima::ListBox. Since, however, it is
possible to tweak the \f(CW\*(C`Prima::ComboBox\*(C'\fR ( using its editClass and listClass
create-only properties ) so the input line and list box would be other classes,
it is not necessarily that all default functionality would work.
The list of exported names is stored in package variables \f(CW%listProps\fR, \f(CW%editProps\fR
and \f(CW%listDynas\fR. These also described in \*(L"Exported names\*(R" section.
.PP
The module defines \f(CW\*(C`cs::\*(C'\fR package for the constants used by style property.
.SH "API"
.IX Header "API"
.SS "Properties"
.IX Subsection "Properties"
.IP "autoHeight \s-1BOOLEAN\s0" 4
.IX Item "autoHeight BOOLEAN"
If 1, adjusts the height of the widget automatically when its font changes.
Only when style is not \f(CW\*(C`cs::Simple\*(C'\fR.
.Sp
Default value: 1
.IP "buttonClass \s-1STRING\s0" 4
.IX Item "buttonClass STRING"
Assigns a drop-down button class.
.Sp
Create-only property.
.Sp
Default value: \f(CW\*(C`Prima::Widget\*(C'\fR
.IP "buttonDelegations \s-1ARRAY\s0" 4
.IX Item "buttonDelegations ARRAY"
Assigns a drop-down button list of delegated notifications.
.Sp
Create-only property.
.IP "buttonProfile \s-1HASH\s0" 4
.IX Item "buttonProfile HASH"
Assigns hash of properties, passed to the drop-down button during the creation.
.Sp
Create-only property.
.IP "caseSensitive \s-1BOOLEAN\s0" 4
.IX Item "caseSensitive BOOLEAN"
Selects whether the user input is case-sensitive or not, when a value
is picked from the selection list.
.Sp
Default value: 0
.IP "editClass \s-1STRING\s0" 4
.IX Item "editClass STRING"
Assigns an input line class.
.Sp
Create-only property.
.Sp
Default value: \f(CW\*(C`Prima::InputLine\*(C'\fR
.IP "editProfile \s-1HASH\s0" 4
.IX Item "editProfile HASH"
Assigns hash of properties, passed to the input line during the creation.
.Sp
Create-only property.
.IP "editDelegations \s-1ARRAY\s0" 4
.IX Item "editDelegations ARRAY"
Assigns an input line list of delegated notifications.
.Sp
Create-only property.
.IP "editHeight \s-1INTEGER\s0" 4
.IX Item "editHeight INTEGER"
Selects height of an input line.
.IP "items \s-1ARRAY\s0" 4
.IX Item "items ARRAY"
Mapped onto the list widget's \f(CW\*(C`items\*(C'\fR property. See Prima::Lists for details.
.IP "listClass \s-1STRING\s0" 4
.IX Item "listClass STRING"
Assigns a listbox class.
.Sp
Create-only property.
.Sp
Default value: \f(CW\*(C`Prima::ListBox\*(C'\fR
.IP "listHeight \s-1INTEGER\s0" 4
.IX Item "listHeight INTEGER"
Selects height of the listbox widget.
.Sp
Default value: 100
.IP "listVisible \s-1BOOLEAN\s0" 4
.IX Item "listVisible BOOLEAN"
Sets whether the listbox is visible or not. Not writable
when style is \f(CW\*(C`cs::Simple\*(C'\fR.
.IP "listProfile \s-1HASH\s0" 4
.IX Item "listProfile HASH"
Assigns hash of properties, passed to the listbox during the creation.
.Sp
Create-only property.
.IP "listDelegations \s-1ARRAY\s0" 4
.IX Item "listDelegations ARRAY"
Assigns a selection listbox list of delegated notifications.
.Sp
Create-only property.
.IP "literal \s-1BOOLEAN\s0" 4
.IX Item "literal BOOLEAN"
Selects whether the combo box user input routine assume that 
the listbox contains literal strings, that can be fetched via
\&\f(CW\*(C`get_item_text\*(C'\fR ( see Prima::Lists ). As an example when
this property is set to 0 is \f(CW\*(C`Prima::ColorComboBox\*(C'\fR from Prima::ComboBox package.
.Sp
Default value: 1
.IP "style \s-1INTEGER\s0" 4
.IX Item "style INTEGER"
Selected one of three styles:
.RS 4
.IP "cs::Simple" 4
.IX Item "cs::Simple"
The listbox is always visible, and the drop-down button is not.
.IP "cs::DropDown" 4
.IX Item "cs::DropDown"
The listbox is not visible, but the drop-down button is. When the
use presses the drop-down button, the listbox is shown; when the list-box
is defocused, it gets hidden.
.IP "cs::DropDownList" 4
.IX Item "cs::DropDownList"
Same as \f(CW\*(C`cs::DropDown\*(C'\fR, but the user is restricted in the selection: 
the input line can only accept user input that is contained in listbox.
If literal set to 1, the auto completion feature is provided.
.RE
.RS 4
.RE
.IP "text \s-1STRING\s0" 4
.IX Item "text STRING"
Mapped onto the edit widget's \f(CW\*(C`text\*(C'\fR property.
.SS "Events"
.IX Subsection "Events"
.IP "Change" 4
.IX Item "Change"
Triggered with ComboBox value is changed.
.IP "List events" 4
.IX Item "List events"
ComboBox forwards \f(CW\*(C`SelectItem\*(C'\fR and \f(CW\*(C`DrawItem\*(C'\fR events from the list box, and
these are executed in the List's context (therefore \f(CW$self\fR there is not
ComboBox, but the ComboBox\->List). If you use \f(CW\*(C`SelectItem\*(C'\fR you probably need
\&\f(CW\*(C`Change\*(C'\fR instead.
.Sp
See more in Prima::Lists.
.SS "Exported names"
.IX Subsection "Exported names"
.ie n .IP "%editProps" 4
.el .IP "\f(CW%editProps\fR" 4
.IX Item "%editProps"
.Vb 6
\&        alignment      autoScroll  text         text        
\&        charOffset     maxLen      insertMode   firstChar   
\&        selection      selStart    selEnd       writeOnly   
\&        copy           cut         delete       paste       
\&        wordDelimiters readOnly    passwordChar focus       
\&        select_all
.Ve
.ie n .IP "%listProps" 4
.el .IP "\f(CW%listProps\fR" 4
.IX Item "%listProps"
.Vb 4
\&                       focusedItem    hScroll        
\&        integralHeight items          itemHeight     
\&        topItem        vScroll        gridColor      
\&        multiColumn    offset
.Ve
.ie n .IP "%listDynas" 4
.el .IP "\f(CW%listDynas\fR" 4
.IX Item "%listDynas"
.Vb 2
\&        onDrawItem 
\&        onSelectItem
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::InputLine, Prima::Lists, Prima::ColorDialog, Prima::FileDialog,
\&\fIexamples/listbox.pl\fR.
