.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::ColorDialog 3"
.TH Prima::ColorDialog 3 "2011-05-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::ColorDialog \- standard color selection facilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Prima qw(StdDlg Application);
\&
\&        my $p = Prima::ColorDialog\-> create(
\&                quality => 1,
\&        );
\&        printf "color: %06x", $p\-> value if $p\-> execute == mb::OK;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module contains two packages, \f(CW\*(C`Prima::ColorDialog\*(C'\fR and \f(CW\*(C`Prima::ColorComboBox\*(C'\fR,
used as standard tools for interactive color selection. \f(CW\*(C`Prima::ColorComboBox\*(C'\fR is
a modified combo widget, which provides selecting from predefined palette but also can
invoke \f(CW\*(C`Prima::ColorDialog\*(C'\fR window.
.SH "Prima::ColorDialog"
.IX Header "Prima::ColorDialog"
.SS "Properties"
.IX Subsection "Properties"
.IP "quality \s-1BOOLEAN\s0" 4
.IX Item "quality BOOLEAN"
Used to increase visual quality of the dialog if run on paletted displays.
.Sp
Default value: 0
.IP "value \s-1COLOR\s0" 4
.IX Item "value COLOR"
Selects the color, represented by the color wheel and other dialog controls.
.Sp
Default value: \f(CW\*(C`cl::White\*(C'\fR
.SS "Methods"
.IX Subsection "Methods"
.IP "hsv2rgb \s-1HUE, SATURATION, LUMINOSITY\s0" 4
.IX Item "hsv2rgb HUE, SATURATION, LUMINOSITY"
Converts color from \s-1HSV\s0 to \s-1RGB\s0 format and returns three integer values, red, green,
and blue components.
.IP "rgb2hsv \s-1RED, GREEN, BLUE\s0" 4
.IX Item "rgb2hsv RED, GREEN, BLUE"
Converts color from \s-1RGB\s0 to \s-1HSV\s0 format and returns three numerical values, hue, saturation,
and luminosity components.
.IP "rgb2value \s-1RED, GREEN, BLUE\s0" 4
.IX Item "rgb2value RED, GREEN, BLUE"
Combines separate channels into single 24\-bit \s-1RGB\s0 value and returns the result.
.IP "value2rgb \s-1COLOR\s0" 4
.IX Item "value2rgb COLOR"
Splits 24\-bit \s-1RGB\s0 value into three channels, red, green, and blue and returns
three integer values.
.IP "xy2hs X, Y, \s-1RADIUS\s0" 4
.IX Item "xy2hs X, Y, RADIUS"
Maps X and Y coordinate values onto a color wheel with \s-1RADIUS\s0 in pixels.
The code uses \s-1RADIUS\s0 = 119 for mouse position coordinate mapping.
Returns three values, \- hue, saturation and error flag. If error flag
is set, the conversion has failed.
.IP "hs2xy \s-1HUE, SATURATION\s0" 4
.IX Item "hs2xy HUE, SATURATION"
Maps hue and saturation onto 256\-pixel wide color wheel, and
returns X and Y coordinates of the corresponding point.
.IP "create_wheel \s-1SHADES, BACK_COLOR\s0" 4
.IX Item "create_wheel SHADES, BACK_COLOR"
Creates a color wheel with number of \s-1SHADES\s0 given,
drawn on a \s-1BACK_COLOR\s0 background, and returns a \f(CW\*(C`Prima::DeviceBitmap\*(C'\fR object.
.IP "create_wheel_shape \s-1SHADES\s0" 4
.IX Item "create_wheel_shape SHADES"
Creates a circular 1\-bit mask, with radius derived from \s-1SHAPES.
SHAPES\s0 must be same as passed to create_wheel.
Returns \f(CW\*(C`Prima::Image\*(C'\fR object.
.SS "Events"
.IX Subsection "Events"
.ie n .IP "BeginDragColor $PROPERTY" 4
.el .IP "BeginDragColor \f(CW$PROPERTY\fR" 4
.IX Item "BeginDragColor $PROPERTY"
Called when the user starts dragginh a color from the color wheel by with left
mouse button and combination of Alt, Ctrl, and Shift keys. \f(CW$PROPERTY\fR is one
of \f(CW\*(C`Prima::Widget\*(C'\fR color properties, and depends on combination of keys:
.Sp
.Vb 6
\&        Alt              backColor
\&        Ctrl             color
\&        Alt+Shift        hiliteBackColor
\&        Ctrl+Shift       hiliteColor
\&        Ctrl+Alt         disabledColor
\&        Ctrl+Alt+Shift   disabledBackColor
.Ve
.Sp
Default action reflects the property to be changes in the dialog title
.IP "Change" 4
.IX Item "Change"
The notification is called when the value property is changed, either 
interactively or as a result of direct call.
.ie n .IP "EndDragColor $PROPERTY, $WIDGET" 4
.el .IP "EndDragColor \f(CW$PROPERTY\fR, \f(CW$WIDGET\fR" 4
.IX Item "EndDragColor $PROPERTY, $WIDGET"
Called when the user releases the mouse drag over a Prima widget.
Default action sets \f(CW\*(C`$WIDGET\->$PROPERTY\*(C'\fR to the current color value.
.SS "Variables"
.IX Subsection "Variables"
.ie n .IP "$colorWheel" 4
.el .IP "\f(CW$colorWheel\fR" 4
.IX Item "$colorWheel"
Contains cached result of create_wheel call.
.ie n .IP "$colorWheelShape" 4
.el .IP "\f(CW$colorWheelShape\fR" 4
.IX Item "$colorWheelShape"
Contains cached result of create_wheel_shape call.
.SH "Prima::ColorComboBox"
.IX Header "Prima::ColorComboBox"
.SS "Events"
.IX Subsection "Events"
.IP "Colorify \s-1INDEX, COLOR_PTR\s0" 4
.IX Item "Colorify INDEX, COLOR_PTR"
\&\f(CW\*(C`nt::Action\*(C'\fR callback, designed to map combo palette index into a \s-1RGB\s0 color.
\&\s-1INDEX\s0 is an integer from 0 to colors \- 1, \s-1COLOR_PTR\s0 is a reference to a
result scalar, where the notification is expected to write the resulting color.
.SS "Properties"
.IX Subsection "Properties"
.IP "colors \s-1INTEGER\s0" 4
.IX Item "colors INTEGER"
Defines amount of colors in the fixed palette of the combo box.
.IP "value \s-1COLOR\s0" 4
.IX Item "value COLOR"
Contains the color selection as 24\-bit integer value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::ComboBox, \fIexamples/cv.pl\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
