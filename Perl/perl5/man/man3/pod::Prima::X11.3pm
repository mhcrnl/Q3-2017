.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "pod::Prima::X11 3"
.TH pod::Prima::X11 3 "2015-01-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::X11 \- usage guide for X11 environment
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes subtle topics one must be aware when programming or
using Prima programs under X11.
.PP
The document covers various aspects of the toolkit and their implementation
details with guidelines of the expected use. Also, standard X11 user-level and
programming techniques are visited.
.SH "Basic command-line switches"
.IX Header "Basic command-line switches"
.ie n .IP """\-\-help""" 4
.el .IP "\f(CW\-\-help\fR" 4
.IX Item "--help"
Prints the command-line arguments available and exits.
.ie n .IP """\-\-display""" 4
.el .IP "\f(CW\-\-display\fR" 4
.IX Item "--display"
Sets X display address in Xlib notation. If not set, standard Xlib (
\&\f(CW\*(C`XOpenDisplay(null)\*(C'\fR ) behavior applies.
.Sp
Example:
.Sp
.Vb 1
\&   \-\-display=:0.1
.Ve
.ie n .IP """\-\-visual""" 4
.el .IP "\f(CW\-\-visual\fR" 4
.IX Item "--visual"
Sets X visual, to be used by default. Example:
.Sp
.Vb 1
\&   \-\-visual=0x23
.Ve
.ie n .IP """\-\-sync""" 4
.el .IP "\f(CW\-\-sync\fR" 4
.IX Item "--sync"
Turn off X synchronization
.ie n .IP """\-\-bg"", ""\-\-fg""" 4
.el .IP "\f(CW\-\-bg\fR, \f(CW\-\-fg\fR" 4
.IX Item "--bg, --fg"
Set default background and foreground colors. Example:
.Sp
.Vb 1
\&  \-\-bg=BlanchedAlmond
.Ve
.ie n .IP """\-\-font""" 4
.el .IP "\f(CW\-\-font\fR" 4
.IX Item "--font"
Sets default font. Example:
.Sp
.Vb 1
\&   \-\-font=\*(Aqadobe\-helvetica\-medium\-r\-*\-*\-\-*\-120\-*\-*\-*\-*\-*\-*\*(Aq
.Ve
.ie n .IP """\-\-no\-x11""" 4
.el .IP "\f(CW\-\-no\-x11\fR" 4
.IX Item "--no-x11"
Runs Prima without X11 display initialized. This switch can be used for programs
that use only OS-independent parts of Prima, such as image subsystem or PostScript
generator, in environments where X is not present, for example, a \s-1CGI\s0 script.
Obviously, any attempt to create instance of \f(CW\*(C`Prima::Application\*(C'\fR or otherwise
access X\-depended code under such conditions causes the program to abort.
.Sp
There are alternatives to use the command switch. First, there is module \f(CW\*(C`Prima::noX11\*(C'\fR
for the same purpose but more convenient to use as
.Sp
.Vb 1
\&   perl \-MPrima::noX11
.Ve
.Sp
construct. Second, there is a technique to continue execution even if connection
to a X server failed:
.Sp
.Vb 2
\&   use Prima::noX11;
\&   use Prima;
\&
\&   my $error = Prima::XOpenDisplay();
\&   if ( defined $error) {
\&        print "not connected to display: $error\en";
\&   } else {
\&        print "connected to display\en";
\&   }
.Ve
.Sp
The Prima::noX11 module exports a single function \f(CW\*(C`XOpenDisplay\*(C'\fR into
\&\f(CW\*(C`Prima\*(C'\fR namespace, to connect to the X display explicitly. The display to be
connected to is \f(CW$ENV{DISPLAY}\fR, unless started otherwise on command line ( with
\&\-\-display option) or with parameter to the \f(CW\*(C`XOpenDisplay\*(C'\fR function.
.Sp
This technique may be useful to programs that use Prima imaging functionality
and may or may not use windowing capabilites.
.SH "X resources database"
.IX Header "X resources database"
X11 provides \s-1XRDB,\s0 the X resource database, a keyed list of arbitrary string
values stored on the X server. Each key is a combination of names and classes
of widgets, each in string form. The key is constructed so the leftmost
substring ( name or class ) corresponds to the top-level item in the hierarchy,
usually the application name or class. Although the \s-1XRDB\s0 can be changed via
native X \s-1API,\s0 it is rarely done by applications. Instead, the user creates a
file, usually named .Xdefaults, which contains the database in the string form.
.PP
The format of .Xdefaults directly reflects \s-1XRDB\s0 capabilities, one of the most
important of which is globbing, manifested via * ( star ) character. Using
globbing, the user can set up a property value that corresponds to multiple
targets:
.PP
.Vb 1
\&   *.ListBox.backColor: yellow
.Ve
.PP
The string above means that all widgets of ListBox class must have yellow
background.
.PP
The application itself is responsible for parsing the strings and querying the
\&\s-1XRDB. \s0 Also, both class names and widget names, as well as database values are
fully defined in terms of the application. There are some guidelines though,
for example, colors and fonts best described in terms, native to the X server.
Also, classes and names are distinguished by the case: classes must begin with
the upper register letter. Also, not every character can be stored in the
\&\s-1XRDB\s0 database ( space, for example, cannot) , and therefore \s-1XRDB API\s0
automatically converts these to _ ( underscore ) characters.
.PP
Prima defines its all set of resources, divided in two parts: general toolkit
settings and per-widget settings. The general settings functionality is
partially overloaded by command-line arguments. Per-widget settings are fonts
and colors, definable for each Prima widget.
.PP
All of the general settings are applicable to the top-level item of widget
hierarchy, named after the application, and \f(CW\*(C`Prima\*(C'\fR class. Some of these,
though, are needed to be initialized before the application instance itself is
created, so these can be accessed via \f(CW\*(C`Prima\*(C'\fR class only, for example,
\&\f(CW\*(C`Prima.Visual\*(C'\fR.  Some, on the contrary, may occasionally overlap with
per-widget syntax.  In particular, one must vary not to mix
.PP
.Vb 1
\&   Prima.font: some\-font
.Ve
.PP
with
.PP
.Vb 1
\&   Prima*font: some\-font
.Ve
.PP
The former syntax is a general setting, and sets the default Prima font.  The
latter is a per-widget assignment, and explicitly sets font to \fBall\fR Prima
widgets, effectively ruining the toolkit font inheritance scheme. The same is
valid for an even more oppressive
.PP
.Vb 1
\&   *font: some\-font
.Ve
.PP
record.
.PP
The allowed per-widget settings are colors and font settings only ( see
corresponding sections ). It is an arguably useful feature to map all widget
properties onto \s-1XRDB,\s0 but Prima does not implement this, primarily because no
one asked for it, and also because this creates unnecessary latency when
enumeration of all properties for each widget takes place.
.PP
All global settings have identical class and name, varied in the case of the
first letter. For example, to set \f(CW\*(C`Submenudelay\*(C'\fR value, one can do it either
by
.PP
.Vb 1
\&   Prima.Submenudelay: 10
.Ve
.PP
or
.PP
.Vb 1
\&   Prima.submenudelay: 10
.Ve
.PP
syntax. Despite that these calls are different, in a way that one reaches for
the whole class and another for the name, for the majority of these properties it
does not matter. To avoid confusion, for all properties their names and class
are given as \f(CW\*(C`PropetyClass.propertyname\*(C'\fR index.
.SH "Fonts"
.IX Header "Fonts"
.SS "Default fonts"
.IX Subsection "Default fonts"
Prima::Application defines set of \f(CW\*(C`get_default_XXX_font\*(C'\fR functions, where each
returns some user-selected font, to be displayed correspondingly in menu,
message, window captions, all other widgets, and finally a default font. While
in other \s-1OS\s0'es these are indeed standard configurable user options, raw X11
doesn't define any. Nevertheless, as the high-level code relies on these,
corresponding resources are defined. These are:
.IP "\(bu" 4
font \- Application::get_default_font
.IP "\(bu" 4
caption_font \- Application::get_caption_font. Used in \f(CW\*(C`Prima::MDI\*(C'\fR.
.IP "\(bu" 4
menu_font \- Widget::get_default_menu_font. Default font for pull-down and
pop-up menus.
.IP "\(bu" 4
msg_font \- Application::get_message_font. Used in \f(CW\*(C`Prima::MsgBox\*(C'\fR.
.IP "\(bu" 4
widget_font \- Widget::get_default_font.
.PP
All of the global font properties can only be set via \f(CW\*(C`Prima\*(C'\fR class, no
application name is recognized. Also, these properties are identical to
\&\f(CW\*(C`\-\-font\*(C'\fR, \f(CW\*(C`\-\-menu\-font\*(C'\fR, \f(CW\*(C`\-\-caption\-font\*(C'\fR, \f(CW\*(C`\-\-msg\-font\*(C'\fR, and
\&\f(CW\*(C`\-\-widget\-font\*(C'\fR command-line arguments.  The per-widget properties are \f(CW\*(C`font\*(C'\fR
and \f(CW\*(C`popupFont\*(C'\fR, of class \f(CW\*(C`Font\*(C'\fR, settable via \s-1XRDB\s0 only:
.PP
.Vb 2
\&   Prima*Dialog.font: my\-fancy\-dialog\-font
\&   Prima.FontDialog.font: some\-conservative\-font
.Ve
.PP
By default, Prima font is 12.Helvetica .
.SS "X core fonts"
.IX Subsection "X core fonts"
The values of the font entries are standard \s-1XLFD\s0 strings, the default
\&\f(CW\*(C`*\-*\-*\-*\-*\-*\-*\-*\-*\-*\-*\-*\-*\-*\-*\*(C'\fR pattern, where each star character can be
replaced by a particular font property, as name, size, charset, and so on. To
interactively select an appropriate font, use standard \f(CW\*(C`xfontsel\*(C'\fR program from
X11 distribution.
.PP
Note, that encoding part of the font is recommended to left unspecified,
otherwise it may clash with \s-1LANG\s0 environment variable, which is used by Prima
font subsystem to determine which font to select when no encoding is given.
This advice, though, is correct only when both \s-1LANG\s0 and encoding part of a
desired font match. In order to force a particular font encoding, the property
\&\f(CW\*(C`Prima.font\*(C'\fR must contain one.
.PP
Alternatively, and/or to reduce X font traffic, one may set
\&\f(CW\*(C`IgnoreEncodings.ignoreEncodings\*(C'\fR property, which is a semicolon\- separated
list of encodings Prima must not account. This feature has limited usability
when for example fonts in Asian encodings result in large font requests.
Another drastic measure to decrease font traffic is a boolean property
\&\f(CW\*(C`Noscaledfonts.noscaledfonts\*(C'\fR, which, if set to 1, restricts the choice of
fonts to the non-scalable fonts only.
.SS "Xft fonts"
.IX Subsection "Xft fonts"
Recently, Prima was made to compile with Xft library, which contrary to core X
font \s-1API,\s0 can make use of client-side fonts. Plus, Xft offers appealing
features as font antialiasing, unicode, and arguably a better font syntax. The
Xft font syntax is inherited from \f(CW\*(C`fontconfig\*(C'\fR library and to be consulted
from \f(CW\*(C`man fonts\-conf\*(C'\fR, but currently ( November 2003 ) basic font descriptions
can be composed as follows:
.PP
.Vb 1
\&   Palatino\-12
.Ve
.PP
A font with name \f(CW\*(C`Palatino\*(C'\fR and size 12.
.PP
.Vb 1
\&   Arial\-10:BI
.Ve
.PP
A font with name \f(CW\*(C`Arial\*(C'\fR, size 10, bold, italic. The \f(CW\*(C`fontconfig\*(C'\fR syntax
allows more than that, for example, arbitrary matrix transformations, but
Prima can make use only of font name, size, and style flags.
.ie n .IP """\-\-no\-xft""" 4
.el .IP "\f(CW\-\-no\-xft\fR" 4
.IX Item "--no-xft"
\&\f(CW\*(C`\-\-no\-xft\*(C'\fR command-line argument, and boolean \f(CW\*(C`UseXFT.usexft\*(C'\fR \s-1XRDB\s0 property 
can be used to disable use of the Xft library.
.ie n .IP """\-\-no\-core\-fonts""" 4
.el .IP "\f(CW\-\-no\-core\-fonts\fR" 4
.IX Item "--no-core-fonts"
Disables all X11 core fonts, except \f(CW\*(C`fixed\*(C'\fR fonts. The \f(CW\*(C`fixed\*(C'\fR
font is selected for the same reasons that X server is designed
to provide at least one font, which usually is \f(CW\*(C`fixed\*(C'\fR.
.Sp
It is valid to combine \f(CW\*(C`\-\-no\-core\-fonts\*(C'\fR and \f(CW\*(C`\-\-no\-xft\*(C'\fR. Moreover,
adding \f(CW\*(C`\-\-noscaled\*(C'\fR to these gives Prima programs a 'classic' X look.
.ie n .IP """\-\-font\-priority""" 4
.el .IP "\f(CW\-\-font\-priority\fR" 4
.IX Item "--font-priority"
Can be set to either \f(CW\*(C`xft\*(C'\fR or \f(CW\*(C`core\*(C'\fR, to select a font provider mechanism
to match unknown or incompletely specified fonts against.
.Sp
Default value: \f(CW\*(C`xft\*(C'\fR ( if compiled in ), \f(CW\*(C`core\*(C'\fR otherwise.
.ie n .IP """\-\-no\-aa""" 4
.el .IP "\f(CW\-\-no\-aa\fR" 4
.IX Item "--no-aa"
If set, turns off Xft antialiasing.
.SH "Colors"
.IX Header "Colors"
.SS "\s-1XRDB\s0 conventions"
.IX Subsection "XRDB conventions"
X traditionally contains a color names database, usually a text file named
\&\fIrgb.txt\fR.  Check your X manual where exactly this file resides and what is
its format.  The idea behind it is that users can benefit from portable literal
color names, with color values transparently adjustable to displays
capabilities.  Thus, it is customary to write
.PP
.Vb 1
\&   color: green
.Ve
.PP
for many applications, and these in turn call \f(CW\*(C`XParseColor\*(C'\fR to convert strings
into \s-1RGB\s0 values.
.PP
Prima is no exception to the scheme. Each widget can be assigned eight color
properties: \f(CW\*(C`color\*(C'\fR, \f(CW\*(C`hiliteBackColor\*(C'\fR, \f(CW\*(C`disabledColor\*(C'\fR, \f(CW\*(C`dark3DColor\*(C'\fR
\&\f(CW\*(C`backColor\*(C'\fR, \f(CW\*(C`hiliteColor\*(C'\fR, \f(CW\*(C`disabledBackColor\*(C'\fR, \f(CW\*(C`light3DColor\*(C'\fR by their name:
.PP
.Vb 1
\&   Prima.backColor: #cccccc
.Ve
.PP
Additionally, set of command-line arguments allows overriding default values for these:
.IP "\(bu" 4
\&\f(CW\*(C`\-\-fg\*(C'\fR \- color
.IP "\(bu" 4
\&\f(CW\*(C`\-\-bg\*(C'\fR \- backColor
.IP "\(bu" 4
\&\f(CW\*(C`\-\-hilite\-fg\*(C'\fR \- hiliteColor
.IP "\(bu" 4
\&\f(CW\*(C`\-\-hilite\-bg\*(C'\fR \- hiliteBackColor
.IP "\(bu" 4
\&\f(CW\*(C`\-\-disabled\-fg\*(C'\fR \- disabledColor
.IP "\(bu" 4
\&\f(CW\*(C`\-\-disabled\-bg\*(C'\fR \- disabledBackColor
.IP "\(bu" 4
\&\f(CW\*(C`\-\-light\*(C'\fR \- light3DColor
.IP "\(bu" 4
\&\f(CW\*(C`\-\-dark\*(C'\fR \- dark3DColor
.SS "Visuals"
.IX Subsection "Visuals"
X protocol works with explicitly defined pixel values only.  A pixel value,
maximum 32\-bit value, represents a color in a display. There are two different
color coding schemes \- direct color and indexed color. The direct color-coded
pixel value can unambiguously be converted into a RGB-value, without any
external information.  The indexed-color scheme represents pixel value as an
index in a palette, which resided on X server. Depending on the color cell
value of the palette, \s-1RGB\s0 color representation can be computed. A X display can
contain more than one palette, and allow ( or disallow ) modification of
palette color cells depending on a visual, the palette is attributed to.
.PP
A visual is a X server resource, containing representation of color coding
scheme, color bit depth, and modificability of the palette. X server can ( and
usually does ) provide more than one visual, as well as different bit depths.
There are six classes of visuals in X paradigm. In each, Prima behaves
differently, also depending on display bit depth available.  In particular,
color dithering can be used on displays with less than 12\-bit color depth. On
displays with modifiable color palette, Prima can install its own values in
palettes, which may result in an effect known as display flashing. To switch to
a non-default visual, use \f(CW\*(C`Prima.Visual\*(C'\fR \s-1XRDB\s0 property or \f(CW\*(C`\-\-visual\*(C'\fR
command-line argument.  List of visuals can be produced interactively by
standard \f(CW\*(C`xdpyinfo\*(C'\fR command from X distribution, where each class of visual
corresponds to one of six visual classes:
.IP "StaticGray" 4
.IX Item "StaticGray"
All color cells are read-only, and contain monochrome values only.  A typical
example is a two-color, black-and-white monochrome display.  This visual is
extremely rarely met.
.IP "GrayScale" 4
.IX Item "GrayScale"
Contains modifiable color palette, and capable of displaying monochrome values
only. Theoretically, any paletted display on a monochrome monitor can be
treated as a GrayScale visual. For both \fIGrayScale\fR and \fIStaticGray\fR visuals
Prima resorts to dithering if it cannot get at least 32 evenly spaced gray
values from black to white.
.IP "StaticColor" 4
.IX Item "StaticColor"
All color cells are read-only.  A typical example is a \s-1PC\s0 display in a 16\-color
\&\s-1EGA\s0 mode.  This visual is rarely met.
.IP "PseudoColor" 4
.IX Item "PseudoColor"
All color cells are modifiable. Typically, 8\-bit displays define this class for
a default visual. For both \fIStaticColor\fR and \fIPseudoColor\fR visuals dithering
is always used, although for \f(CW\*(C`PseudoColor\*(C'\fR Prima resorts to that only if X
server cannot allocate another color.
.Sp
On \f(CW\*(C`PseudoColor\*(C'\fR and \f(CW\*(C`GrayScale\*(C'\fR Prima allocates a small set of colors, not
used in palette modifications. When a bitmap is to be exported via clipboard,
or displayed in menu, or sent to a window manager as an icon to be displayed,
it is downgraded to using these colors only, which are though guaranteedly to
stay permanent through life of the application.
.IP "TrueColor" 4
.IX Item "TrueColor"
Each pixel value is explicitly coded as \s-1RGB.\s0 Typical example are 16, 24, or 32\-bit
display modes. This visual class is the best in terms of visual quality.
.IP "DirectColor" 4
.IX Item "DirectColor"
Same as \fITrueColor\fR, but additionally each pixel value can be reprogrammed.
Not all hardware support this visual, and usually by default it is not set.
Prima supports this mode in exactly same way as \fITrueColor\fR without additional
features.
.SH "Images"
.IX Header "Images"
As described in the previous section, X does not standardize pixel memory
format for \fITrueColor\fR and \fIDirectColor\fR visuals, so there is a chance that
Prima wouldn't work on some bizarre hardware. Currently, Prima knows how to
compose pixels of 15, 16, 24, and 32 bit depth, of contiguous ( not
interspersed ) red-green-blue memory layout. Any other pixel memory layout
causes Prima to fail.
.PP
Prima supports shared memory image X extension, which speeds up image display
for X servers and clients running on same machine. The price for this is that
if Prima program aborts, the shared memory will never be returned to the \s-1OS.\s0
To remove the leftover segments, use your \s-1OS\s0 facilities, for example, \f(CW\*(C`ipcrm\*(C'\fR
on *BSD.
.PP
To disable shared memory with images, use \f(CW\*(C`\-\-no\-shmem\*(C'\fR switch in command-line
arguments.
.PP
The clipboard exchange of images is incompletely implemented, since Prima does
not accompany ( and neither reads ) \s-1COLORMAP, FOREGROUND,\s0 and \s-1BACKGROUND\s0
clipboard data, which contains pixel \s-1RGB\s0 values for a paletted image. As a
palliative, the clipboard-bound images are downgraded to a safe set of colors,
locked immutable either by X server or Prima core.
.PP
On images in the clipboard: contrary to the text in the clipboard, which can be
used several times, images seemingly cannot. The Bitmap or Pixmap descriptor,
stored in the clipboard, is rendered invalid after it has been read once.
.SH "Window managers"
.IX Header "Window managers"
The original design of X protocol did not include the notion of a window
manager, and latter is was implemented as an ad-hoc patch, which results in
race conditions when configuring widgets. The extreme situation may well happen
when even a non-top level widget may be influenced by a window manager, when
for example a top-level widget was reparented into another widget, but the
window manager is not aware or this yet.
.PP
The consequences of this, as well as programming guidances are described in
\&\f(CW\*(C`Prima::Window\*(C'\fR. Here, we describe other aspects of interactions with WMs, as
\&\s-1WM\s0 protocols, hints, and properties.
.PP
Prima was tested with alternating success under the following window managers:
mwm, kwin, wmaker, fvwm, fvwm2, enlightment, sawfish, blackbox, 9wm, olvm, twm,
and in no-WM environment.
.SS "Protocols"
.IX Subsection "Protocols"
Prima makes use of \f(CW\*(C`WM_DELETE_WINDOW\*(C'\fR and \f(CW\*(C`WM_TAKE_FOCUS\*(C'\fR protocols.  While
\&\f(CW\*(C`WM_DELETE_WINDOW\*(C'\fR use is straightforward and needs no further attention,
\&\f(CW\*(C`WM_TAKE_FOCUS\*(C'\fR can be tricky, since X defines several of input modes for a
widget, which behave differently for each \s-1WM. \s0 In particular, 'focus follows
pointer' gives pains under twm and mwm, where navigation of drop-down combo
boxes is greatly hindered by window manager. The drop-down list is programmed
so it is dismissed as soon its focus is gone; these window managers withdraw
focus even if the pointer is over the focused widget's border.
.SS "Hints"
.IX Subsection "Hints"
Size, position, icons, and other standard X hints are passed to \s-1WM\s0 in a
standard way, and, as inter-client communication manual ( \s-1ICCCM \s0) allows,
repeatedly misinterpreted by window managers. Many ( wmaker, for example )
apply the coordinates given from the program not to the top-level widget
itself, but to its decoration.  mwm defines list of accepted icon sizes so
these can be absurdly high, which adds confusion to a client who can create
icon of any size, but unable to determine the best one.
.SS "Non-standard properties"
.IX Subsection "Non-standard properties"
Prima tries to use WM-specific hints, known for two window managers: mwm and
kwin.  For mwm ( Motif window manager ) Prima sets hints of decoration border
width and icons only. For kwin ( and probably to others, who wish to conform to
specifications of http://www.freedesktop.org/ ) Prima uses \f(CW\*(C`NET_WM_STATE\*(C'\fR
property, in particular its maximization and task-bar visibility hints.
.PP
Use of these explicitly contradicts \s-1ICCCM,\s0 and definitely may lead to bugs in
future ( at least with \f(CW\*(C`NET_WM_STATE\*(C'\fR, since Motif interface can hardly
expected to be changed ).  To disable the use of non-standard \s-1WM\s0 properties,
\&\f(CW\*(C`\-\-icccm\*(C'\fR command-line argument can be set.
.SH "Unicode"
.IX Header "Unicode"
X does not support unicode, and number of patches were applied to X servers and
clients to make the situation change. Currently ( 2003 ) standard unicode
practices are not emerged yet, so Prima copes up with what ( in author's
opinion ) is most promising: Xft and iconv libraries.
.SS "Fonts"
.IX Subsection "Fonts"
X11 supports 8\-bit and 16\-bit text string display, and neither can be used
effectively to display unicode strings. A \f(CW\*(C`XCreateFontSet\*(C'\fR technique, which
combines several fonts under one descriptor, or a similarly implemented
technique is the only way to provide correct unicode display.
.PP
Also, core font transfer protocol suffers from ineffective memory
representation, which creates latency when fonts with large span
of glyphs is loaded. Such fonts, in still uncommon though standard iso10646
encoding, are the only media to display multi-encoding text without falling
back to hacks similar to \f(CW\*(C`XCreateFontSet\*(C'\fR.
.PP
These, and some other problems are efficiently solved by Xft library, a
superset of X core font functionality. Xft features Level 1 ( November 2003 )
unicode display and supports 32\-bit text strings as well as UTF8\-coded strings.
Xft does not operate with charset encodings, and these are implemented in Prima
using iconv charset convertor library.
.SS "Input"
.IX Subsection "Input"
Prima does not support extended input methods ( \s-1XIM\s0 etc ), primarily because
the authors are not acquainted with \s-1CIJK\s0 problem domain. Volunteers are
welcome.
.SS "Clipboard"
.IX Subsection "Clipboard"
Prima supports \s-1UTF8\s0 text in clipboard via \f(CW\*(C`UTF8_STRING\*(C'\fR transparently,
although not by default.
.PP
.Vb 1
\&   Prima::Application\-> wantUnicodeInput(1)
.Ve
.PP
is the easiest ( see Prima::Application ) way to initiate \s-1UTF8\s0 clipboard
text exchange.
.PP
Due to the fact that any application can take ownership over the clipboard
at any time, \f(CW\*(C`open\*(C'\fR/\f(CW\*(C`close\*(C'\fR brackets are not strictly respected in X11
implementation. Practically, this means that when modern X11 clipboard daemons
( \s-1KDE\s0 klipper, for example ) interfere with Prima clipboard, the results may
not be consistent from the programmer's view, for example, clipboard contains
data after \f(CW\*(C`clear\*(C'\fR call, and the like. It must be noted though that this
behavior is expected by the users.
.SH "Other XRDB resources"
.IX Header "Other XRDB resources"
.SS "Timeouts"
.IX Subsection "Timeouts"
Raw X11 provides no such \s-1GUI\s0 helpers as double-click event, cursor, or menu.
Neither does it provide the related time how often, for example, a cursor would
blink. Therefore Prima emulates these, but allows the user to reprogram the
corresponding timeouts. Prima recognizes the following properties, accessible
either via application name or Prima class key. All timeouts are integer
values, representing number of milliseconds for the corresponding timeout
property.
.IP "Blinkinvisibletime.blinkinvisibletime: \s-1MSEC\s0" 4
.IX Item "Blinkinvisibletime.blinkinvisibletime: MSEC"
Cursor stays invisible \s-1MSEC\s0 milliseconds.
.Sp
Default value: 500
.IP "Blinkvisibletime.blinkvisibletime: \s-1MSEC\s0" 4
.IX Item "Blinkvisibletime.blinkvisibletime: MSEC"
Cursor stays visible \s-1MSEC\s0 milliseconds.
.Sp
Default value: 500
.IP "Clicktimeframe.clicktimeframe \s-1MSEC\s0" 4
.IX Item "Clicktimeframe.clicktimeframe MSEC"
If 'mouse down' and 'mouse up' events are follow in \s-1MSEC, \s0'mouse click'
event is synthesized.
.Sp
Default value: 200
.IP "Doubleclicktimeframe.doubleclicktimeframe \s-1MSEC\s0" 4
.IX Item "Doubleclicktimeframe.doubleclicktimeframe MSEC"
If 'mouse click' and 'mouse down' events are follow in \s-1MSEC, \s0'mouse double click'
event is synthesized.
.Sp
Default value: 200
.IP "Submenudelay.submenudelay \s-1MSEC\s0" 4
.IX Item "Submenudelay.submenudelay MSEC"
When the used clicks on a menu item, which points to a lower-level menu window,
the latter is displayed after \s-1MSEC\s0 milliseconds.
.Sp
Default value: 200
.IP "Scrollfirst.scrollfirst \s-1MSEC\s0" 4
.IX Item "Scrollfirst.scrollfirst MSEC"
When an auto-repetitive action, similar to keystroke events resulting from a
long key press on the keyboard, is to be simulated, two timeout values are used
\&\- 'first' and 'next' delay. These actions are not simulated within Prima core,
and the corresponding timeouts are merely advisable to the programmer. Prima
widgets use it for automatic scrolling, either by a scrollbar or by any other
means.  Also, \f(CW\*(C`Prima::Button\*(C'\fR in \f(CW\*(C`autoRepeat\*(C'\fR mode uses these timeouts for
emulation of a key press.
.Sp
\&\f(CW\*(C`Scrollfirst\*(C'\fR is a 'first' timeout.
.Sp
Default value: 200
.IP "Scrollnext.scrollnext \s-1MSEC\s0" 4
.IX Item "Scrollnext.scrollnext MSEC"
A timeout used for same reasons as \f(CW\*(C`Scrollfirst\*(C'\fR, but after it is expired.
.Sp
Default value: 50
.SS "Miscellaneous"
.IX Subsection "Miscellaneous"
.IP "Visual.visual: \s-1VISUAL_ID\s0" 4
.IX Item "Visual.visual: VISUAL_ID"
Selects display visual by \s-1VISUAL_ID,\s0 which is usually has a form of \f(CW\*(C`0x??\*(C'\fR.
Various visuals provide different color depth and access scheme. Some X
stations have badly chosen default visuals (for example, default \s-1IRIX\s0
workstation setup has 8\-bit default visual selected), so this property can be
used to fix things. List of visuals, supported by a X display can be produced
interactively by standard \f(CW\*(C`xdpyinfo\*(C'\fR command from X distribution.
.Sp
Identical to \f(CW\*(C`\-\-visual\*(C'\fR command-line argument.
.Sp
See Color for more information.
.IP "Wheeldown.wheeldown \s-1BUTTON\s0" 4
.IX Item "Wheeldown.wheeldown BUTTON"
\&\s-1BUTTON\s0 is a number of X mouse button event, treated as 'mouse wheel down'
event.
.Sp
Default value: 5 ( default values for wheeldown and wheelup are current de-facto 
most popular settings ).
.IP "Wheelup.wheelup \s-1BUTTON\s0" 4
.IX Item "Wheelup.wheelup BUTTON"
\&\s-1BUTTON\s0 is a number of X mouse button event, treated as 'mouse wheel up' event.
.Sp
Default value: 4
.SH "Debugging"
.IX Header "Debugging"
The famous 'use the source' call is highly actual with Prima. However, some
debug information comes compiled in, and can be activated by \f(CW\*(C`\-\-debug\*(C'\fR
command-line key. Combination of letters to the key activates debug printouts
of different subsystems:
.IP "\(bu" 4
C \- clipboard
.IP "\(bu" 4
E \- events subsystem
.IP "\(bu" 4
F \- fonts
.IP "\(bu" 4
M \- miscellaneous debug info
.IP "\(bu" 4
P \- palettes and colors
.IP "\(bu" 4
X \- \s-1XRDB\s0
.IP "\(bu" 4
A \- all of the above
.PP
Example:
.PP
.Vb 1
\&   \-\-debug=xf
.Ve
.PP
Also, the built-in X \s-1API \s0\f(CW\*(C`XSynchronize\*(C'\fR call, which enables X protocol
synchronization ( at expense of operation slowdown though ) is activated with
\&\f(CW\*(C`\-\-sync\*(C'\fR command-line argument, and can be used to ease the debugging.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::gp\-problems, Prima::Widget, 
Nye A, Xlib programming manual. O'Reilly & Associates, 1995.
