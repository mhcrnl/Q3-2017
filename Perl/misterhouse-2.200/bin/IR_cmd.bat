@rem = '-*- Perl -*- 
@goto endofperl
';

package ir_cmd;

($path, $pgm) = $0 =~ /(.*)\\(.*).bat/;

require("newgetopt.pl");
if (!NGetOpt("verbose", "h", "help") or
    @ARGV == 0 or $opt_h or $opt_help) { 
    print<<eof;

  $pgm creates a IRDQw batch file then calls IRDQw to send IR commands

  Options:
    -help    -> help text
    -verbose -> runs IRDQw in non-quite mode

  Usage:
    $pgm key1,key2...
 
  Examples:
    $pgm TV,POWER,1,2

eof
  exit;
}

				# This needs to be replaced with socket communication
				#  - not dependent on dir. and we can get info (e.g. temp) back
@keys = @ARGV;

%xlate = qw(1      7
	    2      8
	    3      9
	    4      RECALL
	    5      0
	    6      ENTER
	    0      PLAY
	    RECALL FF
	    MUTE   VOL-
	    VOL-   MUTE
	    CH+    CH-
	    POWER  SAT
	    TV     CABLE);

				# Use the Z keys ... maps all the keys.
%xlate = qw(VOL+   Z1
	    MUTE   Z2
	    FF     Z3
	    PAUSE  Z4
	    POWER  Z7 
	    3      Z8 
	    PLAY   Z11 
	    STOP   Z12 
	    TV     Z15 
	    2      Z16 
	    TV/VCR Z20 
	    1      Z24 
	    REW    Z26 
	    RECORD Z28 
	    VCR    Z31 
	    VOL+   Z32 
	    CH+    Z34 
	    CH-    Z35 
	    100    Z38 
	    6      Z40 
	    9      Z41 
	    RECALL Z43 
	    5      Z48 
	    8      Z49 
	    0      Z50 
	    4      Z56 
	    7      Z57);

@keys = map{uc($_)} @keys;

@keys = map{($_ eq 'RECORD') ? ($_, $_): $_} @keys; # Record key must be pressed twice

@keys_mapped = map{($xlate{$_}) ? $xlate{$_} : $_} @keys;
print "keys = @keys\nkeys_mapped=@keys_mapped...\n" if $opt_verbose;

$keys_file = '\\\\house\d\utils\irdcw\IR_cmd.bf';
open(KEYS, ">$keys_file") or print "\nWarning, can not open file " .  $keys_file . ".  $!\n";
print KEYS "; auto generated by $pgm ... do not edit\n";

                                # add a dummy key to start of string ... otherwise IRDQw does not work!?!
                                # add vol+- cause it sometimes ignores the first few buttons :(
print KEYS join("\n", qw(1 1 VOL+ VOL-), @keys_mapped); 
close KEYS;

$quiet = '/Q' unless $opt_verbose;

$cmd = '\\\\house\d\utils\irdcw\irdqw.exe' . " $quiet /C1 /M12 /f:$keys_file";
print "Running $cmd\n";
system($cmd);

1;  # So require works OK

__END__

:endofperl


@echo off
@rem Loop so we can have more than 9 arguments (not sure what happens after %9)
set pgmargs=
:getargs
set pgmargs=%pgmargs% %1
shift
if not '%1'=='' goto getargs

@perl -S IR_cmd.bat %pgmargs%


