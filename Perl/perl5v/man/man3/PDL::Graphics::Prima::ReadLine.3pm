.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDL::Graphics::Prima::ReadLine 3"
.TH PDL::Graphics::Prima::ReadLine 3 "2015-11-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDL::Graphics::Prima::ReadLine \- allowing Prima and Term::ReadLine to play
together
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # This pulls in PDL::Graphics::Prima::ReadLine, and
\& # associate\*(Aqs the PDL Shell\*(Aqs readline object if it
\& # exists:
\& use PDL::Graphics::Prima;
\& 
\& # Did it set up the readline event loop callback?
\& print "Set up Prima/ReadLine interaction\en"
\&     if PDL::Graphics::Prima::ReadLine\->is_setup;
\& 
\& # If you are not in the PDL shell, you can supply
\& # your own ReadLine object.
\& if (PDL::Graphics::Prima::ReadLine\->is_happy_with($my_readline) {
\&     PDL::Graphics::Prima::ReadLine\->setup($my_readline);
\& }
\& 
\& # If you don\*(Aqt validate first, setup() may croak.
\& # In other words, instead of this:
\& if (PDL::Graphics::Prima::ReadLine\->is_happy_with($my_readline) {
\&     PDL::Graphics::Prima::ReadLine\->setup($my_readline);
\& }
\& else {
\&     die "Unable to setup Prima/ReadLine interaction\en";
\& }
\& # You could just say this instead:
\& PDL::Graphics::Prima::ReadLine\->setup($my_readline);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module's job is to encapsulate the vagaries of setting up interaction
between the Prima event loop and
Term::ReadLine's event loop. Loading the
module does not have any side-effects, and it is always loaded by
PDL::Graphics::Prima. Furthermore,
PDL::Graphics::Prima will set up the event loop
interaction with the \s-1PDL\s0 shell if it detects the shell's
ReadLine object.
.PP
Generally speaking, if you intend to have user interaction and want to use
PDL::Graphics::Prima, you should probably just use
Prima to build a simple interactive application. (Docmentation for
getting started with this is coming soon, I promise.) However, if you want
to integrate PDL::Graphics::Prima into a pluggable
application that already uses Term::ReadLine, this
module should make that procedure as straight-forward as one can hope.
.PP
\&\f(CW\*(C`PDL::Graphics::Prima::ReadLine\*(C'\fR can only hook into the event loop for
newer versions of Term::ReadLine (specifically, versions
that support event_loop). Also, due to current
limitations in my knowledge of Prima's monitoring of \s-1STDIN,\s0 this module
cannot hook into the event loop on Windows operating systems, both Cygwin
and Strawberry Perl.
.SS "is_happy_with"
.IX Subsection "is_happy_with"
If you want to set up the event loop interaction on your own ReadLine object,
you can ask \f(CW\*(C`PDL::Graphics::Prima::ReadLine\*(C'\fR if it can work with your
object by calling the \f(CW\*(C`is_happy_with\*(C'\fR class method and supplying your
objects. This method returns a boolean value indicating whether or not the
object can do what \f(CW\*(C`PDL::Graphics::Prima::ReadLine\*(C'\fR needs:
.PP
.Vb 4
\& if (PDL::Graphics::Prima::ReadLine\->is_happy_with($my_readline) {
\&     print "Setting up Prima/ReadLine interaction\en";
\&     PDL::Graphics::Prima::ReadLine\->setup($my_readline);
\& }
.Ve
.SS "setup"
.IX Subsection "setup"
To hook Prima's event loop into your ReadLine's event loop, you can call the
\&\f(CW\*(C`setup\*(C'\fR class method:
.PP
.Vb 1
\& PDL::Graphics::Prima::ReadLine\->setup($readline_obj);
.Ve
.PP
This method may (should) fail if the ReadLine object provided cannot support
the functionality needed for hooking Prima into ReadLine. This could happen
either because your version of ReadLine is too old or because you are running
on Windows, which is not (yet) supported by \f(CW\*(C`PDL::Graphics::Prima::ReadLine\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For purposes of this module, you should check out Term::ReadLine. This
module is implemented using Prima::File.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Mertens (dcmertens.perl@gmail.com)
.SH "ADDITIONAL MODULES"
.IX Header "ADDITIONAL MODULES"
Here is the full list of modules in this distribution:
.IP "PDL::Graphics::Prima" 4
.IX Item "PDL::Graphics::Prima"
Defines the Plot widget for use in Prima applications
.IP "PDL::Graphics::Prima::Axis" 4
.IX Item "PDL::Graphics::Prima::Axis"
Specifies the behavior of axes (but not the scaling)
.IP "PDL::Graphics::Prima::DataSet" 4
.IX Item "PDL::Graphics::Prima::DataSet"
Specifies the behavior of DataSets
.IP "PDL::Graphics::Prima::Limits" 4
.IX Item "PDL::Graphics::Prima::Limits"
Defines the lm:: namespace
.IP "PDL::Graphics::Prima::Palette" 4
.IX Item "PDL::Graphics::Prima::Palette"
Specifies a collection of different color palettes
.IP "PDL::Graphics::Prima::PlotType" 4
.IX Item "PDL::Graphics::Prima::PlotType"
Defines the different ways to visualize your data
.IP "PDL::Graphics::Prima::ReadLine" 4
.IX Item "PDL::Graphics::Prima::ReadLine"
Encapsulates all interaction with the Term::ReadLine family of
modules.
.IP "PDL::Graphics::Prima::Scaling" 4
.IX Item "PDL::Graphics::Prima::Scaling"
Specifies different kinds of scaling, including linear and logarithmic
.IP "PDL::Graphics::Prima::Simple" 4
.IX Item "PDL::Graphics::Prima::Simple"
Defines a number of useful functions for generating simple and not-so-simple
plots
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Unless otherwise stated, all contributions in code and documentation are
copyright (c) their respective authors, all rights reserved.
.PP
Portions of this module's code are copyright (c) 2011 The Board of
Trustees at the University of Illinois.
.PP
Portions of this module's code are copyright (c) 2011\-2013 Northwestern
University.
.PP
Portions of this module's code are copyright (c) 2013\-2014 Dickinson
College.
.PP
This module's documentation is copyright (c) 2011\-2014 David Mertens.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
