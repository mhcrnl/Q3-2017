.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDL::Graphics::Prima::Limits 3"
.TH PDL::Graphics::Prima::Limits 3 "2015-11-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDL::Graphics::Prima::Limits \- defining a few useful constants for setting axis limits
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You probably won't ever need to use this module explicitly, but you will likely
use the constants defined here to manipulate axis autoscaling. This module defines
the constants \f(CW\*(C`lm::Auto\*(C'\fR and \f(CW\*(C`lm::Hold\*(C'\fR. If the explanation below
does not make sense, these constants are also discussed in
PDL::Graphics::Prima::Axis, PDL::Graphics::Prima::Simple, and elsewhere.
.IP "lm::Auto" 4
.IX Item "lm::Auto"
When you set an axis's min or max to \f(CW\*(C`lm::Auto\*(C'\fR, you turn on min or max
autoscaling:
.Sp
.Vb 2
\& # Set the x\-min to \-5 for now...
\& $plot\->x\->min(\-5);
\& 
\& # Turn on autoscaling for x\-min:
\& $plot\->x\->min(lm::Auto);
.Ve
.IP "lm::Hold" 4
.IX Item "lm::Hold"
\&\s-1DEPRECATION CANDIDATE. I\s0 am considering deprecating this limit in favor of
a new limit, discussed below. If you use \f(CW\*(C`lm::Hold\*(C'\fR, please let me know so
that I can take your concerns into consideration. It presently serves as a
fairly simple shorthand that I have not actually used in any of my real
code. It is easy to create the desired effect with simple code, and I have
concocted a much more helpful meaning for this value, detailed under the
next item, \f(CW\*(C`lm::NextTick\*(C'\fR.
.RS 4
.Sp
.RS 4
This constant gives a shorthand for changing from autoscaling to non-autoscaling.
For example, suppose you are building a plot from multiple data sets and want
to autoscale based on the first few but not for the remaining. In that case you
might say:
.Sp
.Vb 3
\& $plot\->dataSets\->{\*(Aqdata\*(Aq} = ds::Pair($x, $y);
\& $plot\->y\->minmax(lm::Hold, lm::Hold);
\& $plot\->dataSets\->{\*(Aqmodel\*(Aq} = ds::Func(\e&my_func);
.Ve
.Sp
You can achieve the same ends like so:
.Sp
.Vb 3
\& $plot\->dataSets\->{\*(Aqdata\*(Aq} = ds::Pair($x, $y);
\& $plot\->y\->minmax($plot\->y\->minmax);
\& $plot\->dataSets\->{\*(Aqmodel\*(Aq} = ds::Func(\e&my_func);
.Ve
.Sp
If you just wanted to set the min to hold, you could use \f(CW\*(C`lm::Hold\*(C'\fR like this:
.Sp
.Vb 1
\& $plot\->y\->min(lm::Hold);
.Ve
.Sp
which is equivalent to:
.Sp
.Vb 1
\& $plot\->y\->min($plot\->y\->min);
.Ve
.Sp
Also note that the return value of \f(CW\*(C`$plot\->y\-\*(C'\fRmin> returns different things
depending on whether you are using scalar or list context. (Yes, that's an Axis
thing, not a Limits thing, but it bears repeating here anyway.)
.RE
.RE
.RS 4
.RE
.IP "lm::NextTick" 4
.IX Item "lm::NextTick"
\&\s-1PROPOSAL CANDIDATE. I\s0 am considering adding this functionality some time in
mid to late 2013. It would use the same bit representation as what is
currently \f(CW\*(C`lm::Hold\*(C'\fR, so this would be a backwards incompatible change.
However, I am not aware of any code that actually uses \f(CW\*(C`lm::Hold\*(C'\fR apart
from a few of my own example scripts (I don't use it in any of my production
code), so I suspect it will be fine. (Or, perhaps I should actually make
turning autoscaling on or off a separate axis method. Ah well, ideas, ideas.
Feedback welcome.)
.RS 4
.Sp
.RS 4
The proposed behavior of \f(CW\*(C`lm::NextTick\*(C'\fR is similar to that of \f(CW\*(C`lm::Auto\*(C'\fR
in that the axis limits would be computed automatically from the data. The
major difference is that \f(CW\*(C`lm::NextTick\*(C'\fR is that, having computed the \*(L"tight\*(R"
automatic min and/or max, the algorithm would actually set the min and/or
max to a value slightly lower and/or higher, corresponding to the value that
the Tick calculator would pick for the next major tick value. The goal here
would be better static figures without having to tweak the limits.
.Sp
For example, when I create a default diamond plot in a containing window of
400x400 pixels with inputs \f(CW\*(C`$x = pdl(1.1, 18.2)\*(C'\fR and \f(CW\*(C`$y = pdl(10, 20)\*(C'\fR,
the actual axis extrema are slightly wider thant the data's min and max and
come to 0.84 and 18.5, in order to accomodate the width of the diamonds. I
see three tick marks at 5, 10, and 15. When \f(CW\*(C`lm::NextTick\*(C'\fR gets implemented,
the extrema for that specification would be 0 and 20, showing tick marks at
0, 5, 10, 15, and 20.
.Sp
That, at least, is the proposed specification. I imagine this would get a
lot more use than \f(CW\*(C`lm::Hold\*(C'\fR, especially since it's not even possible at
the moment.
.RE
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
David Mertens (dcmertens.perl@gmail.com)
.SH "ADDITIONAL MODULES"
.IX Header "ADDITIONAL MODULES"
Here is the full list of modules in this distribution:
.IP "PDL::Graphics::Prima" 4
.IX Item "PDL::Graphics::Prima"
Defines the Plot widget for use in Prima applications
.IP "PDL::Graphics::Prima::Axis" 4
.IX Item "PDL::Graphics::Prima::Axis"
Specifies the behavior of axes (but not the scaling)
.IP "PDL::Graphics::Prima::DataSet" 4
.IX Item "PDL::Graphics::Prima::DataSet"
Specifies the behavior of DataSets
.IP "PDL::Graphics::Prima::Limits" 4
.IX Item "PDL::Graphics::Prima::Limits"
Defines the lm:: namespace
.IP "PDL::Graphics::Prima::Palette" 4
.IX Item "PDL::Graphics::Prima::Palette"
Specifies a collection of different color palettes
.IP "PDL::Graphics::Prima::PlotType" 4
.IX Item "PDL::Graphics::Prima::PlotType"
Defines the different ways to visualize your data
.IP "PDL::Graphics::Prima::ReadLine" 4
.IX Item "PDL::Graphics::Prima::ReadLine"
Encapsulates all interaction with the Term::ReadLine family of
modules.
.IP "PDL::Graphics::Prima::Scaling" 4
.IX Item "PDL::Graphics::Prima::Scaling"
Specifies different kinds of scaling, including linear and logarithmic
.IP "PDL::Graphics::Prima::Simple" 4
.IX Item "PDL::Graphics::Prima::Simple"
Defines a number of useful functions for generating simple and not-so-simple
plots
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Unless otherwise stated, all contributions in code and documentation are
copyright (c) their respective authors, all rights reserved.
.PP
Portions of this module's code are copyright (c) 2011 The Board of
Trustees at the University of Illinois.
.PP
Portions of this module's code are copyright (c) 2011\-2013 Northwestern
University.
.PP
Portions of this module's code are copyright (c) 2013\-2014 Dickinson
College.
.PP
This module's documentation is copyright (c) 2011\-2014 David Mertens.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
