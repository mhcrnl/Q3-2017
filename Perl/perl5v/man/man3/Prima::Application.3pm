.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::Application 3"
.TH Prima::Application 3 "2015-11-04" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::Application \- root of widget objects hierarchy
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Prima::Application class serves as a hierarchy root for
all objects with child-owner relationship. All toolkit
objects, existing with non-null owner property, belong 
by their top-level parental relationship to Prima::Application
object. There can be only one instance of Prima::Application
class at a time.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Prima;
\&        use Prima::Application;
.Ve
.PP
or
.PP
.Vb 1
\&        use Prima qw(Application);
\&
\&        Prima::MainWindow\-> create();
\&
\&        run Prima;
.Ve
.SH "USAGE"
.IX Header "USAGE"
Prima::Application class, and its only instance are 
treated specially throughout the toolkit. The object
instance is contained in
.PP
.Vb 1
\&        $::application
.Ve
.PP
scalar, defined in \fIPrima.pm\fR module. 
The application instance must be created whenever
widget and window, or event loop functionality is
desired. Usually
.PP
.Vb 1
\&        use Prima::Application;
.Ve
.PP
code is enough, but \fI\f(CI$::application\fI\fR can also
be assigned explicitly. The 'use' syntax has advantage
as more resistant to eventual changes in the toolkit design.
It can also be used in conjunction with custom parameters hash,
alike the general \fIcreate()\fR syntax:
.PP
.Vb 1
\&        use Prima::Application name => \*(AqTest application\*(Aq, icon => $icon;
.Ve
.PP
In addition to this functionality Prima::Application
is also a wrapper to a set of system functions, not
directly related to object classes. This functionality
is generally explained in \*(L"\s-1API\*(R"\s0.
.SS "Inherited functionality"
.IX Subsection "Inherited functionality"
Prima::Application is a descendant of Prima::Widget, but
it is designed so because their functional outliers are closest
to each other.
Prima::Application does not strictly conform ( in \s-1OO\s0 sense )
to any of the built-in classes. It has methods copied from both
Prima::Widget and Prima::Window at one time, and the inherited
Prima::Widget methods and properties function differently.
For example, \f(CW\*(C`::origin\*(C'\fR, a property from Prima::Widget, is
also implemented in Prima::Application, but returns always (0,0),
an expected but not much usable result.
\&\f(CW\*(C`::size\*(C'\fR, on the contrary, returns the extent of the screen in pixels.
There are few properties, inherited from Prima::Widget, which return
actual, but uninformative results, \- \f(CW\*(C`::origin\*(C'\fR is one of those, but
same are \f(CW\*(C`::buffered\*(C'\fR, \f(CW\*(C`::clipOwner\*(C'\fR, \f(CW\*(C`::enabled\*(C'\fR, \f(CW\*(C`::growMode\*(C'\fR,
\&\f(CW\*(C`::owner\*(C'\fR and owner-inheritance properties, \f(CW\*(C`::selectable\*(C'\fR, \f(CW\*(C`::shape\*(C'\fR,
\&\f(CW\*(C`::syncPaint\*(C'\fR, \f(CW\*(C`::tabOrder\*(C'\fR, \f(CW\*(C`::tabStop\*(C'\fR, \f(CW\*(C`::transparent\*(C'\fR, \f(CW\*(C`::visible\*(C'\fR.
To this group also belongs \f(CW\*(C`::modalHorizon\*(C'\fR, Prima::Window class property,
but defined for consistency and returning always 1. 
Other methods and properties, like \f(CW\*(C`::size\*(C'\fR, that provide different 
functionality are described in \*(L"\s-1API\*(R"\s0.
.SS "Global functionality"
.IX Subsection "Global functionality"
Prima::Application is a wrapper to functionality, that
is not related to one or another class clearly.
A notable example, paint mode, which is derived from Prima::Drawable
class, allows painting on the screen, overwriting the graphic information
created by the other programs. Although being subject to \fIbegin_paint()\fR/\fIend_paint()\fR
brackets, this functionality can not be attached to a class-shared
\&\s-1API,\s0 an therefore is considered global. All such functionality is gathered
in the Prima::Application class.
.PP
These topics enumerated below, related to the global scope, but
occupying more than one method or property \- such functions 
described in \*(L"\s-1API\*(R"\s0.
.IP "Painting" 4
.IX Item "Painting"
As stated above, Prima::Application provides interface to the 
on-screen painting. This mode is triggered by \fIbegin_paint()\fR/\fIend_paint()\fR
methods pair, and the other pair, \fIbegin_paint_info()\fR/\fIend_paint_info()\fR
triggers the information mode. This three-state paint functionality
is more thoroughly described in Prima::Drawable.
.IP "Hint" 4
.IX Item "Hint"
\&\f(CW$::application\fR hosts a special Prima::HintWidget class object,
accessible via \f(CW\*(C`get_hint_widget()\*(C'\fR, but with color and font functions
aliased ( \f(CW\*(C`::hintColor\*(C'\fR, \f(CW\*(C`::hintBackColor\*(C'\fR, \f(CW\*(C`::hintFont\*(C'\fR ).
.Sp
This widget serves as a hint label, floating over widgets
if the mouse pointer hovers longer than \f(CW\*(C`::hintPause\*(C'\fR milliseconds.
.Sp
Prima::Application internally manages all hint functionality.
The hint widget itself, however, can be replaced before application
object is created, using \f(CW\*(C`::hintClass\*(C'\fR create-only property.
.IP "Printer" 4
.IX Item "Printer"
Result of get_printer method points to an automatically
created printer object, responsible for the system-driven
printing. Depending on the operating system, it is either 
Prima::Printer, if the system provides \s-1GUI\s0 printing capabilities,
or generic Prima::PS::Printer, the PostScript document interface.
.Sp
See Prima::Printer for details.
.IP "Clipboard" 4
.IX Item "Clipboard"
\&\f(CW$::application\fR hosts set of Prima::Clipboard objects, created 
automatically to reflect the system-provided clipboard \s-1IPC\s0
functionality. Their number depends on the system, \- under X11
environment there is three clipboard objects, and only one 
under Win32.
.Sp
These are no methods to access these clipboard objects, except
\&\fIfetch()\fR ( or, the indirect name calling ) \- the clipboard objects
are named after the system clipboard names, which are
returned by Prima::Clipboard::get_standard_clipboards.
.Sp
The default clipboard is named \fIClipboard\fR, and is accessible via
.Sp
.Vb 1
\&        my $clipboard = $::application\-> Clipboard;
.Ve
.Sp
code.
.Sp
See Prima::Clipboard for details.
.IP "Help subsystem" 4
.IX Item "Help subsystem"
The toolkit has a built-in help viewer, that understands
perl's native \s-1POD \s0( plain old documentation ) format.
Whereas the viewer functionality itself is part of the toolkit,
and resides in \f(CW\*(C`Prima::HelpViewer\*(C'\fR module, any custom
help viewing module can be assigned. Create-only \f(CW\*(C`Prima::Application\*(C'\fR
properties \f(CW\*(C`::helpClass\*(C'\fR and \f(CW\*(C`::helpModule\*(C'\fR can be used to
set these options.
.Sp
\&\f(CW\*(C`Prima::Application\*(C'\fR provides two methods for communicating
with the help viewer window: \f(CW\*(C`open_help()\*(C'\fR opens a selected topic
in the help window, and \f(CW\*(C`close_help()\*(C'\fR closes the window.
.IP "System-dependent information" 4
.IX Item "System-dependent information"
A complex program will need eventually more information than the toolkit
provides. Or, knowing the toolkit boundaries in some platforms, the program
changes its behavior accordingly. Both these topics are facilitated by
extra system information, returned by Prima::Application methods.
\&\f(CW\*(C`get_system_value\*(C'\fR returns a system value for one of \f(CW\*(C`sv::XXX\*(C'\fR constants,
so the program can read the system-specific information. As well as
\&\f(CW\*(C`get_system_info\*(C'\fR method, that returns the short description of the system,
it is the portable call. 
To the contrary, \f(CW\*(C`sys_action\*(C'\fR method is a wrapper to system-dependent
functionality, called in non-portable way. This method is never used
within the toolkit, and its usage is discouraged, primarily because
its options do not serve the toolkit design, are subject to changes 
and cannot be relied upon.
.SH "API"
.IX Header "API"
.SS "Properties"
.IX Subsection "Properties"
.IP "autoClose \s-1BOOLEAN\s0" 4
.IX Item "autoClose BOOLEAN"
If set to 1, issues \f(CW\*(C`close()\*(C'\fR after the last top-level window
is destroyed. Does not influence anything if set to 0.
.Sp
This feature is designed to help with general 'one main window' 
application layouts.
.Sp
Default value: 0
.IP "icon \s-1OBJECT\s0" 4
.IX Item "icon OBJECT"
Holds the icon object, associated with the application.
If \f(CW\*(C`undef\*(C'\fR, a system-provided default icon is assumed.
Prima::Window object instances inherit the application
icon by default.
.IP "insertMode \s-1BOOLEAN\s0" 4
.IX Item "insertMode BOOLEAN"
A system boolean flag, showing whether text widgets
through the system should insert ( 1 ) or overwrite ( 0 )
text on user input. Not all systems provide the global state
of the flag.
.IP "helpClass \s-1STRING\s0" 4
.IX Item "helpClass STRING"
Specifies a class of object, used as a help viewing package.
The default value is Prima::HelpViewer.
.Sp
Run-time changes to the property do not affect the help
subsystem until \f(CW\*(C`close_help\*(C'\fR call is made.
.IP "helpModule \s-1STRING\s0" 4
.IX Item "helpModule STRING"
Specifies a perl module, loaded indirectly when a help viewing
call is made via \f(CW\*(C`open_help\*(C'\fR.
Used when \f(CW\*(C`::helpClass\*(C'\fR property is overridden and
the new class is contained in a third-party module.
.Sp
Run-time changes to the property do not affect the help
subsystem until \f(CW\*(C`close_help\*(C'\fR call is made.
.IP "hintClass \s-1STRING\s0" 4
.IX Item "hintClass STRING"
Create-only property.
.Sp
Specifies a class of widget, used as the hint label.
.Sp
Default value: Prima::HintWidget
.IP "hintColor \s-1COLOR\s0" 4
.IX Item "hintColor COLOR"
An alias to foreground color property for the hint label widget.
.IP "hintBackColor \s-1COLOR\s0" 4
.IX Item "hintBackColor COLOR"
An alias to background color property for the hint label widget.
.ie n .IP "hintFont %FONT" 4
.el .IP "hintFont \f(CW%FONT\fR" 4
.IX Item "hintFont %FONT"
An alias to font property for the hint label widget.
.IP "hintPause \s-1TIMEOUT\s0" 4
.IX Item "hintPause TIMEOUT"
Selects the timeout in milliseconds before the hint label is shown
when the mouse pointer hovers over a widget.
.IP "modalHorizon \s-1BOOLEAN\s0" 4
.IX Item "modalHorizon BOOLEAN"
A read-only property. Used as a landmark for
the lowest-level modal horizon.
Always returns 1.
.ie n .IP "palette [ @PALETTE ]" 4
.el .IP "palette [ \f(CW@PALETTE\fR ]" 4
.IX Item "palette [ @PALETTE ]"
Used only within paint and information modes.
Selects solid colors in a system palette, as many as possible.
\&\s-1PALETTE\s0 is an array of integer triplets, where each is red, green, and blue
component, with intensity range from 0 to 255.
.IP "printerClass \s-1STRING\s0" 4
.IX Item "printerClass STRING"
Create-only property.
.Sp
Specifies a class of object, used as a printer.
The default value is system-dependent, but is either
\&\f(CW\*(C`Prima::Printer\*(C'\fR or \f(CW\*(C`Prima::PS::Printer\*(C'\fR.
.IP "printerModule \s-1STRING\s0" 4
.IX Item "printerModule STRING"
Create-only property.
.Sp
Specifies a perl module, loaded indirectly before
a printer object of \f(CW\*(C`::printerClass\*(C'\fR class is created. 
Used when \f(CW\*(C`::printerClass\*(C'\fR property is overridden and
the new class is contained in a third-party module.
.IP "pointerVisible \s-1BOOLEAN\s0" 4
.IX Item "pointerVisible BOOLEAN"
Governs the system pointer visibility.
If 0, hides the pointer so it is not visible in all 
system windows. Therefore this property usage must be considered 
with care.
.IP "size \s-1WIDTH, HEIGHT\s0" 4
.IX Item "size WIDTH, HEIGHT"
A read-only property.
.Sp
Returns two integers, width and height of the screen.
.IP "showHint \s-1BOOLEAN\s0" 4
.IX Item "showHint BOOLEAN"
If 1, the toolkit is allowed to show the hint label over 
a widget. If 0, the display of the hint is forbidden. In addition to functionality
of \f(CW\*(C`::showHint\*(C'\fR property in Prima::Widget, Prima::Application::showHint
is another layer of hint visibility control \- if it is 0,
all hint actions are disabled, disregarding \f(CW\*(C`::showHint\*(C'\fR value
in widgets.
.IP "wantUnicodeInput \s-1BOOLEAN\s0" 4
.IX Item "wantUnicodeInput BOOLEAN"
Selects if the system is allowed to generate key codes in unicode. 
Returns the effective state of the unicode input flag, which cannot be
changed if perl or operating system do not support \s-1UTF8. \s0
.Sp
If 1, \f(CW\*(C`Prima::Clipboard::text\*(C'\fR property may return \s-1UTF8\s0 text
from system clipboards is available.
.Sp
Default value: 0
.SS "Events"
.IX Subsection "Events"
.ie n .IP "CopyImage $CLIPBOARD, $IMAGE" 4
.el .IP "CopyImage \f(CW$CLIPBOARD\fR, \f(CW$IMAGE\fR" 4
.IX Item "CopyImage $CLIPBOARD, $IMAGE"
The notification stores \f(CW$IMAGE\fR in clipboard.
.ie n .IP "CopyText $CLIPBOARD, $TEXT" 4
.el .IP "CopyText \f(CW$CLIPBOARD\fR, \f(CW$TEXT\fR" 4
.IX Item "CopyText $CLIPBOARD, $TEXT"
The notification stores \f(CW$TEXT\fR in clipboard.
.ie n .IP "PasteImage $CLIPBOARD, $$IMAGE_REF" 4
.el .IP "PasteImage \f(CW$CLIPBOARD\fR, $$IMAGE_REF" 4
.IX Item "PasteImage $CLIPBOARD, $$IMAGE_REF"
The notification queries \f(CW$CLIPBOARD\fR for image content and stores in
\&\f(CW$$IMAGE_REF\fR. Default action is that \f(CW\*(AqImage\*(Aq\fR format is queried.
On unix, encoded formats \f(CW\*(Aqimage/bmp\*(Aq\fR, \f(CW\*(Aqimage/png\*(Aq\fR etc are queried if
the default \f(CW\*(AqImage\*(Aq\fR is not found.
.Sp
The \f(CW\*(C`PasteImage\*(C'\fR mechanism is devised to read images from clipboard in 
\&\s-1GTK\s0 environment.
.ie n .IP "PasteText $CLIPBOARD, $$TEXT_REF" 4
.el .IP "PasteText \f(CW$CLIPBOARD\fR, $$TEXT_REF" 4
.IX Item "PasteText $CLIPBOARD, $$TEXT_REF"
The notification queries \f(CW$CLIPBOARD\fR for text content and stores in
\&\f(CW$$TEXT_REF\fR. Default action is that \f(CW\*(AqText\*(Aq\fR format is queried if
\&\f(CW\*(C`wantUnicodeInput\*(C'\fR is unset. Otherwise, \f(CW\*(AqUTF8\*(Aq\fR format is queried
beforehand.
.Sp
The \f(CW\*(C`PasteText\*(C'\fR mechanism is devised to ease defining text unicode/ascii
conversion between clipboard and standard widgets, in a standard way.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP "add_startup_notification @CALLBACK" 4
.el .IP "add_startup_notification \f(CW@CALLBACK\fR" 4
.IX Item "add_startup_notification @CALLBACK"
\&\s-1CALLBACK\s0 is an array of anonymous subs, which is executed when
Prima::Application object is created. If the application object 
is already created during the call, CALLBACKs called immediately.
.Sp
Useful for add-on packages initialization.
.IP "begin_paint" 4
.IX Item "begin_paint"
Enters the enabled ( active paint ) state, returns success flag.
Once the object is in enabled state, painting and drawing 
methods can perform write operations on the whole screen.
.IP "begin_paint_info" 4
.IX Item "begin_paint_info"
Enters the information state, returns success flag.
The object information state is same as enabled state ( see \f(CW\*(C`begin_paint()\*(C'\fR),
except that painting and drawing methods are not permitted to change
the screen.
.IP "close" 4
.IX Item "close"
Issues a system termination call, resulting in calling
\&\f(CW\*(C`close\*(C'\fR for all top-level windows. The call can be interrupted by these,
and thus canceled. If not canceled, stops the application event loop.
.IP "close_help" 4
.IX Item "close_help"
Closes the help viewer window.
.IP "end_paint" 4
.IX Item "end_paint"
Quits the enabled state and returns application object to the normal state.
.IP "end_paint_info" 4
.IX Item "end_paint_info"
Quits the information state and returns application object to the normal state.
.IP "font_encodings" 4
.IX Item "font_encodings"
Returns array of encodings, represented by strings, that are recognized by the system
and available for at least one font. Each system provides different
sets of encoding strings; the font encodings are not portable.
.IP "fonts \s-1NAME\s0 = '', \s-1ENCODING\s0 = ''" 4
.IX Item "fonts NAME = '', ENCODING = ''"
Returns hash of font hashes ( see \*(L"Fonts\*(R" in Prima::Drawable )
describing fonts of \s-1NAME\s0 font family and of \s-1ENCODING.\s0 If \s-1NAME\s0 is '' or \f(CW\*(C`undef\*(C'\fR,
returns one fonts hash for each of the font families that match the \s-1ENCODING\s0
string. If \s-1ENCODING\s0 is '' or \f(CW\*(C`undef\*(C'\fR, no encoding match is performed.
If \s-1ENCODING\s0 is not valid ( not present in \f(CW\*(C`font_encodings\*(C'\fR result), it is
treated as if it was '' or \f(CW\*(C`undef\*(C'\fR.
.Sp
In the special case, when both \s-1NAME\s0 and \s-1ENCODING\s0 are '' or \f(CW\*(C`undef\*(C'\fR,
each font metric hash contains element \f(CW\*(C`encodings\*(C'\fR, that points to
array of the font encodings, available for the fonts of \s-1NAME\s0 font family.
.IP "get_active_window" 4
.IX Item "get_active_window"
Returns object reference to a currently active window,
if any, that belongs to the program. If no such window exists,
\&\f(CW\*(C`undef\*(C'\fR is returned.
.Sp
The exact definition of 'active window' is system-dependent, but
it is generally believed that an active window is the one that
has keyboard focus on one of its children widgets.
.IP "get_caption_font" 4
.IX Item "get_caption_font"
Returns a title font, that the system uses to draw
top-level window captions.
The method can be called with a class string instead of an object instance.
.IP "get_default_cursor_width" 4
.IX Item "get_default_cursor_width"
Returns width of the system cursor in pixels.
The method can be called with a class string instead of an object instance.
.IP "get_default_font" 4
.IX Item "get_default_font"
Returns the default system font.
The method can be called with a class string instead of an object instance.
.IP "get_default_scrollbar_metrics" 4
.IX Item "get_default_scrollbar_metrics"
Returns dimensions of the system scrollbars \- width of the standard vertical
scrollbar and height of the standard horizon scrollbar.
The method can be called with a class string instead of an object instance.
.IP "get_default_window_borders \s-1BORDER_STYLE\s0 = bs::Sizeable" 4
.IX Item "get_default_window_borders BORDER_STYLE = bs::Sizeable"
Returns width and height of standard system window border
decorations for one of \f(CW\*(C`bs::XXX\*(C'\fR constants.
The method can be called with a class string instead of an object instance.
.IP "get_focused_widget" 4
.IX Item "get_focused_widget"
Returns object reference to a currently focused widget,
if any, that belongs to the program. If no such widget exists,
\&\f(CW\*(C`undef\*(C'\fR is returned.
.IP "get_hint_widget" 4
.IX Item "get_hint_widget"
Returns the hint label widget, attached automatically to
Prima::Application object during startup. The widget
is of \f(CW\*(C`::hintClass\*(C'\fR class, Prima::HintWidget by
default.
.IP "get_image X_OFFSET, Y_OFFSET, \s-1WIDTH, HEIGHT\s0" 4
.IX Item "get_image X_OFFSET, Y_OFFSET, WIDTH, HEIGHT"
Returns Prima::Image object with \s-1WIDTH\s0 and \s-1HEIGHT\s0 dimensions
filled with graphic content of the screen, copied from
X_OFFSET and Y_OFFSET coordinates. If \s-1WIDTH\s0 and \s-1HEIGHT\s0
extend beyond the screen dimensions, they are adjusted.
If the offsets are outside screen boundaries, or \s-1WIDTH\s0 and
\&\s-1HEIGHT\s0 are zero or negative, \f(CW\*(C`undef\*(C'\fR is returned.
.IP "get_indents" 4
.IX Item "get_indents"
Returns 4 integers that corresponds to extensions of eventual desktop
decorations that the windowing system may present on the left, bottom, right,
and top edges of the screen. For example, for win32 this reports the size
of the part of the scraan that windows taskbar may occupies, if any.
.IP "get_printer" 4
.IX Item "get_printer"
Returns the printer object, attached automatically to
Prima::Application object. The object is of \f(CW\*(C`::printerClass\*(C'\fR
class.
.IP "get_message_font" 4
.IX Item "get_message_font"
Returns the font the system uses to draw the message text.
The method can be called with a class string instead of an object instance.
.IP "get_modal_window \s-1MODALITY_TYPE\s0 = mt::Exclusive, \s-1TOPMOST\s0 = 1" 4
.IX Item "get_modal_window MODALITY_TYPE = mt::Exclusive, TOPMOST = 1"
Returns the modal window, that resides on an end of a
modality chain. \s-1MODALITY_TYPE\s0 selects the chain, and can be either
\&\f(CW\*(C`mt::Exclusive\*(C'\fR or \f(CW\*(C`mt::Shared\*(C'\fR. \s-1TOPMOST\s0 is a boolean flag, selecting
the lookup direction; if it is 1, the 'topmost' window is returned,
if 0, the 'lowest' one ( in a simple case when window A is made modal
(executed) after modal window B, the A window is the 'topmost' one ).
.Sp
If a chain is empty \f(CW\*(C`undef\*(C'\fR is returned. In case when a chain consists
of just one window, \s-1TOPMOST\s0 value is apparently irrelevant.
.IP "get_monitor_rects" 4
.IX Item "get_monitor_rects"
Returns set of rects in format [X,Y,WIDTH,HEIGHT] identifying monitor
configurations. Currently works under X11 only.
.IP "get_scroll_rate" 4
.IX Item "get_scroll_rate"
Returns two integer values of two system-specific
scrolling timeouts. The first is the initial timeout,
that is applied when the user drags the mouse from
a scrollable widget ( a text field, for example ), and
the widget is about to scroll, but the actual scroll
is performed after the timeout is expired. The second 
is the repetitive timeout, \- if the dragging condition
did not change, the scrolling performs automatically
after this timeout. The timeout values are in milliseconds.
.IP "get_system_info" 4
.IX Item "get_system_info"
Returns a hash with information about the system.
The hash result contains the following keys:
.RS 4
.IP "apc" 4
.IX Item "apc"
One of \f(CW\*(C`apc::XXX\*(C'\fR constants, reflecting the platform.
Currently, the list of the supported platforms is:
.Sp
.Vb 2
\&        apc::Win32  
\&        apc::Unix
.Ve
.IP "gui" 4
.IX Item "gui"
One of \f(CW\*(C`gui::XXX\*(C'\fR constants, reflecting the graphic
user interface used in the system:
.Sp
.Vb 5
\&        gui::Default
\&        gui::PM  
\&        gui::Windows
\&        gui::XLib 
\&        gui::GTK2
.Ve
.IP "guiDescription" 4
.IX Item "guiDescription"
Description of graphic user interface,
returned as an arbitrary string.
.IP "system" 4
.IX Item "system"
An arbitrary string, representing the operating
system software.
.IP "release" 4
.IX Item "release"
An arbitrary string, reflecting the \s-1OS\s0 version
information.
.IP "vendor" 4
.IX Item "vendor"
The \s-1OS\s0 vendor string
.IP "architecture" 4
.IX Item "architecture"
The machine architecture string
.RE
.RS 4
.Sp
The method can be called with a class string instead of an object instance.
.RE
.IP "get_system_value" 4
.IX Item "get_system_value"
Returns the system integer value, associated with one 
of \f(CW\*(C`sv::XXX\*(C'\fR constants. The constants are:
.Sp
.Vb 10
\&        sv::YMenu            \- height of menu bar in top\-level windows
\&        sv::YTitleBar        \- height of title bar in top\-level windows
\&        sv::XIcon            \- width and height of main icon dimensions, 
\&        sv::YIcon              acceptable by the system
\&        sv::XSmallIcon       \- width and height of alternate icon dimensions,  
\&        sv::YSmallIcon         acceptable by the system 
\&        sv::XPointer         \- width and height of mouse pointer icon
\&        sv::YPointer           acceptable by the system  
\&        sv::XScrollbar       \- width of the default vertical scrollbar
\&        sv::YScrollbar       \- height of the default horizontal scrollbar 
\&                                                                ( see get_default_scrollbar_metrics() )
\&        sv::XCursor          \- width of the system cursor
\&                                                                ( see get_default_cursor_width() )
\&        sv::AutoScrollFirst  \- the initial and the repetitive 
\&        sv::AutoScrollNext     scroll timeouts
\&                                                                ( see get_scroll_rate() )
\&        sv::InsertMode       \- the system insert mode
\&                                                                ( see insertMode )
\&        sv::XbsNone          \- widths and heights of the top\-level window
\&        sv::YbsNone            decorations, correspondingly, with borderStyle
\&        sv::XbsSizeable        bs::None, bs::Sizeable, bs::Single, and
\&        sv::YbsSizeable        bs::Dialog. 
\&        sv::XbsSingle          ( see get_default_window_borders() )
\&        sv::YbsSingle
\&        sv::XbsDialog
\&        sv::YbsDialog
\&        sv::MousePresent     \- 1 if the mouse is present, 0 otherwise
\&        sv::MouseButtons     \- number of the mouse buttons
\&        sv::WheelPresent     \- 1 if the mouse wheel is present, 0 otherwise
\&        sv::SubmenuDelay     \- timeout ( in ms ) before a sub\-menu shows on 
\&                                                                an implicit selection
\&        sv::FullDrag         \- 1 if the top\-level windows are dragged dynamically, 
\&                                                                0 \- with marquee mode
\&        sv::DblClickDelay    \- mouse double\-click timeout in milliseconds
\&        sv::ShapeExtension   \- 1 if Prima::Widget::shape functionality is supported, 
\&                                                                0 otherwise
\&        sv::ColorPointer     \- 1 if system accepts color pointer icons.
\&        sv::CanUTF8_Input    \- 1 if system can generate key codes in unicode 
\&        sv::CanUTF8_Output   \- 1 if system can output utf8 text
\&        sv::CompositeDisplay \- 1 if system uses double\-buffering for the desktop
.Ve
.Sp
The method can be called with a class string instead of an object instance.
.IP "get_widget_from_handle \s-1HANDLE\s0" 4
.IX Item "get_widget_from_handle HANDLE"
\&\s-1HANDLE\s0 is an integer value of a toolkit widget. It is usually
passed to the program by other \s-1IPC\s0 means, so it returns
the associated widget. If no widget is associated with 
\&\s-1HANDLE, \s0\f(CW\*(C`undef\*(C'\fR is returned.
.IP "get_widget_from_point X_OFFSET, Y_OFFSET" 4
.IX Item "get_widget_from_point X_OFFSET, Y_OFFSET"
Returns the widget that occupies screen area under (X_OFFSET,Y_OFFSET)
coordinates. If no toolkit widget are found, \f(CW\*(C`undef\*(C'\fR is returned.
.IP "go" 4
.IX Item "go"
The main event loop. Called by
.Sp
run Prima;
.Sp
standard code. Returns when the program is about to
terminate, or if the exception was signaled. In the
latter case, the loop can be safely re-started.
.IP "lock" 4
.IX Item "lock"
Effectively blocks the graphic output for all widgets.
The output can be restored with \f(CW\*(C`unlock()\*(C'\fR.
.IP "open_help \s-1TOPIC\s0" 4
.IX Item "open_help TOPIC"
Opens the help viewer window with \s-1TOPIC\s0 string in 
link \s-1POD\s0 format ( see perlpod ) \- the string is treated
as \*(L"manpage/section\*(R", where 'manpage' is the file with \s-1POD \s0
content and 'section' is the topic inside the manpage.
.IP "sync" 4
.IX Item "sync"
Synchronizes all pending requests where there are any. Is
an effective \f(CW\*(C`XSync(false)\*(C'\fR on X11, and is a no-op otherwise.
.IP "sys_action \s-1CALL\s0" 4
.IX Item "sys_action CALL"
\&\s-1CALL\s0 is an arbitrary string of the system
service name and the parameters to it.
This functionality is non-portable, and its usage should be avoided.
The system services provided are not documented and
subject to change. The actual services
can be looked in the toolkit source code under
\&\fIapc_system_action\fR tag.
.IP "unlock" 4
.IX Item "unlock"
Unblocks the graphic output for all widgets,
previously locked with \f(CW\*(C`lock()\*(C'\fR.
.IP "yield" 4
.IX Item "yield"
An event dispatcher, called from within the event loop.
If the event loop can be schematized, then in
.Sp
.Vb 3
\&        while ( application not closed ) {
\&                yield
\&        }
.Ve
.Sp
draft \fIyield()\fR is the only function, called repeatedly
within the event loop. \fIyield()\fR cannot be used to
organize event loops, but it can be employed to
process stacked system events explicitly, to 
increase responsiveness of a program, for example,
inside a long calculation cycle.
.Sp
The method can be called with a class string instead of an object instance;
however, the \f(CW$::application\fR object must be initialized.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::Object, Prima::Widget, Prima::Window
