.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::Label 3"
.TH Prima::Label 3 "2015-11-04" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::Label \- static text widget
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The class is designed for display of text, and assumes no
user interaction. The text output capabilities include wrapping,
horizontal and vertical alignment, and automatic widget resizing to 
match text extension. If text contains a tilde-escaped ( hot ) character, the label can
explicitly focus the specified widget upon press of the character key, what feature 
is useful for dialog design.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&        my $label = Prima::Label\-> create(
\&                text      => \*(AqEnter ~name:\*(Aq,
\&                focusLink => $name_inputline,
\&                alignment => ta::Center,
\&        );
.Ve
.SH "API"
.IX Header "API"
.SS "Properties"
.IX Subsection "Properties"
.IP "alignment \s-1INTEGER\s0" 4
.IX Item "alignment INTEGER"
One of the following \f(CW\*(C`ta::XXX\*(C'\fR constants:
.Sp
.Vb 3
\&        ta::Left
\&        ta::Center 
\&        ta::Right
.Ve
.Sp
Selects the horizontal text alignment.
.Sp
Default value: \f(CW\*(C`ta::Left\*(C'\fR
.IP "autoHeight \s-1BOOLEAN\s0" 4
.IX Item "autoHeight BOOLEAN"
If 1, the widget height is automatically changed as text extensions
change.
.Sp
Default value: 0
.IP "autoWidth \s-1BOOLEAN\s0" 4
.IX Item "autoWidth BOOLEAN"
If 1, the widget width is automatically changed as text extensions
change.
.Sp
Default value: 1
.IP "focusLink \s-1WIDGET\s0" 4
.IX Item "focusLink WIDGET"
Points to a widget or a widget name (has to be a sibling widget), which is
explicitly focused when the user presses the combination of a hot key with the
\&\f(CW\*(C`Alt\*(C'\fR key.
.Sp
Prima::Label does not provide a separate property to access the
hot key value, however it can be read from the \f(CW\*(C`{accel}\*(C'\fR variable.
.Sp
Default value: \f(CW\*(C`undef\*(C'\fR.
.IP "showAccelChar \s-1BOOLEAN\s0" 4
.IX Item "showAccelChar BOOLEAN"
If 0, the tilde ( ~ ) character is collapsed from the text,
and the hot character is underlined. When the user presses combination
of the escaped character with the \f(CW\*(C`Alt\*(C'\fR key, the \f(CW\*(C`focusLink\*(C'\fR
widget is explicitly focused.
.Sp
If 1, the text is showed as is, and no hot character is underlined.
Key combinations with \f(CW\*(C`Alt\*(C'\fR key are not recognized.
.Sp
Default value: 0
.IP "showPartial \s-1BOOLEAN\s0" 4
.IX Item "showPartial BOOLEAN"
Used to determine if the last line of text should be drawn if
it can not be vertically fit in the widget interior. If 1, the 
last line is shown even if not visible in full. If 0, only full 
lines are drawn.
.Sp
Default value: 1
.IP "wordWrap \s-1BOOLEAN\s0" 4
.IX Item "wordWrap BOOLEAN"
If 1, the text is wrapped if it can not be horizontally fit in the
widget interior.
.Sp
If 0, the text is not wrapped unless new line characters are present
in the text.
.Sp
New line characters signal line wrapping with no respect to \f(CW\*(C`wordWrap\*(C'\fR
property value.
.Sp
Default value: 0
.IP "valignment \s-1INTEGER\s0" 4
.IX Item "valignment INTEGER"
One of the following \f(CW\*(C`ta::XXX\*(C'\fR constants:
.Sp
.Vb 3
\&        ta::Top
\&        ta::Middle or ta::Center
\&        ta::Bottom
.Ve
.Sp
Selects the vertical text alignment.
.Sp
\&\s-1NB: \s0\f(CW\*(C`ta::Middle\*(C'\fR value is not equal to \f(CW\*(C`ta::Center\*(C'\fR's, however
the both constants produce equal effect here.
.Sp
Default value: \f(CW\*(C`ta::Top\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::Widget, \fIexamples/label.pl\fR
