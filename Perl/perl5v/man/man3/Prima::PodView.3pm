.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::PodView 3"
.TH Prima::PodView 3 "2015-11-04" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::PodView \- POD browser widget
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Prima qw(Application);
\&        use Prima::PodView;
\&
\&        my $window = Prima::MainWindow\-> create;
\&        my $podview = $window\-> insert( \*(AqPrima::PodView\*(Aq,
\&                pack => { fill => \*(Aqboth\*(Aq, expand => 1 }
\&        );
\&        $podview\-> open_read;
\&        $podview\-> read("=head1 NAME\en\enI\*(Aqm also a pod!\en\en");
\&        $podview\-> close_read;
\&
\&        run Prima;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Prima::PodView contains a formatter ( in terms of perlpod ) and viewer of
\&\s-1POD\s0 content. It heavily employs its ascendant class Prima::TextView, 
and is in turn base for the toolkit's default help viewer Prima::HelpViewer.
.SH "USAGE"
.IX Header "USAGE"
The package consists of the several logically separated parts. These include
file locating and loading, formatting and navigation.
.SS "Content methods"
.IX Subsection "Content methods"
The basic access to the content is not bound to the file system. The \s-1POD\s0
content can be supplied without any file to the viewer. Indeed, the file
loading routine \f(CW\*(C`load_file\*(C'\fR is a mere wrapper to the content loading
functions:
.ie n .IP "open_read %OPTIONS" 4
.el .IP "open_read \f(CW%OPTIONS\fR" 4
.IX Item "open_read %OPTIONS"
Clears the current content and enters the reading mode. In this mode
the content can be appended by calling read that pushes the raw \s-1POD\s0
content to the parser.
.IP "read \s-1TEXT\s0" 4
.IX Item "read TEXT"
Supplies \s-1TEXT\s0 string to the parser. Manages basic indentation,
but the main formatting is performed inside add and add_formatted
.Sp
Must be called only within open_read/close_read brackets
.IP "add \s-1TEXT, STYLE, INDENT\s0" 4
.IX Item "add TEXT, STYLE, INDENT"
Formats \s-1TEXT\s0 string of a given \s-1STYLE \s0( one of \f(CW\*(C`STYLE_XXX\*(C'\fR constants) with
\&\s-1INDENT\s0 space.
.Sp
Must be called only within open_read/close_read brackets.
.IP "add_formatted \s-1FORMAT, TEXT\s0" 4
.IX Item "add_formatted FORMAT, TEXT"
Adds a pre-formatted \s-1TEXT\s0 with a given \s-1FORMAT,\s0 supplied by \f(CW\*(C`=begin\*(C'\fR or \f(CW\*(C`=for\*(C'\fR
\&\s-1POD\s0 directives. Prima::PodView understands 'text' and 'podview' FORMATs;
the latter format is for Prima::PodView itself and contains small number
of commands, aimed at inclusion of images into the document.
.Sp
The 'podview' commands are:
.RS 4
.IP "cut" 4
.IX Item "cut"
Example:
.Sp
.Vb 1
\&        =for podview <cut>
\&
\&        =for text just text\-formatter info
\&
\&                ....
\&                text\-only info
\&                ...
\&
\&        =for podview </cut>
.Ve
.Sp
The <cut<gt> clause skips all \s-1POD\s0 input until cancelled.
It is used in conjunction with the following command, img, to allow
a \s-1POD\s0 manpage provide both graphic ('podview', 'html', etc ) and text ( 'text' )
content.
.ie n .IP "img src=""\s-1SRC""\s0 [width=""\s-1WIDTH""\s0] [height=""\s-1HEIGHT""\s0] [cut=""\s-1CUT""\s0] [frame=""\s-1FRAME""\s0]" 4
.el .IP "img src=``\s-1SRC''\s0 [width=``\s-1WIDTH''\s0] [height=``\s-1HEIGHT''\s0] [cut=``\s-1CUT''\s0] [frame=``\s-1FRAME''\s0]" 4
.IX Item "img src=SRC [width=WIDTH] [height=HEIGHT] [cut=CUT] [frame=FRAME]"
An image inclusion command, where src is a relative or an absolute path to
an image file. In case if scaling is required, \f(CW\*(C`width\*(C'\fR and \f(CW\*(C`height\*(C'\fR options
can be set. When the image is a multiframe image, the frame index can be
set by \f(CW\*(C`frame\*(C'\fR option. Special \f(CW\*(C`cut\*(C'\fR option, if set to a true value, activates the 
cut behavior if ( and only if ) the image load operation was unsuccessful.
This makes possible simultaneous use of 'podview' and 'text' :
.Sp
.Vb 1
\&        =for podview <img src="graphic.gif" cut=1 >
\&
\&        =begin text
\&
\&        y     .
\&        |  .
\&        |.
\&        +\-\-\-\-\- x
\&
\&        =end text
\&
\&        =for podview </cut>
.Ve
.Sp
In the example above 'graphic.gif' will be shown if it can be found and loaded,
otherwise the poor-man-drawings would be selected.
.RE
.RS 4
.RE
.IP "close_read" 4
.IX Item "close_read"
Closes the reading mode and starts the text rendering by calling \f(CW\*(C`format\*(C'\fR.
Returns \f(CW\*(C`undef\*(C'\fR if there is no \s-1POD\s0 context, 1 otherwise.
.SS "Rendering"
.IX Subsection "Rendering"
The rendering is started by \f(CW\*(C`format\*(C'\fR call, which returns ( almost ) immediately,
initiating the mechanism of delayed rendering, which is often time-consuming.
\&\f(CW\*(C`format\*(C'\fR's only parameter \s-1KEEP_OFFSET\s0 is a boolean flag, which, if set to 1,
remembers the current location on a page, and when the rendered text approaches
the location, scrolls the document automatically.
.PP
The rendering is based an a document model, generated by open_read/close_read session.
The model is a set of same text blocks defined by Prima::TextView, except 
that the header length is only three integers:
.PP
.Vb 4
\&        M_INDENT       \- the block X\-axis indent
\&        M_TEXT_OFFSET  \- same as BLK_TEXT_OFFSET
\&        M_FONT_ID      \- 0 or 1, because PodView\*(Aqs fontPalette contains only two fonts \-
\&                         variable ( 0 ) and fixed ( 1 ).
.Ve
.PP
The actual rendering is performed in \f(CW\*(C`format_chunks\*(C'\fR, where model blocks are
transformed to the full text blocks, wrapped and pushed into TextView-provided
storage. In parallel, links and the corresponding event rectangles are calculated
on this stage.
.SS "Topics"
.IX Subsection "Topics"
Prima::PodView provides the \f(CW\*(C`::topicView\*(C'\fR property, which governs whether
the man page is viewed by topics or as a whole. When it is viewed as topics,
\&\f(CW\*(C`{modelRange}\*(C'\fR array selects the model blocks that include the topic.
Thus, having a single model loaded, text blocks change dynamically.
.PP
Topics contained in \f(CW\*(C`{topics}\*(C'\fR array, each is an array with indices of \f(CW\*(C`T_XXX\*(C'\fR
constants:
.PP
.Vb 6
\&        T_MODEL_START \- beginning of topic
\&        T_MODEL_END   \- length of a topic
\&        T_DESCRIPTION \- topic name
\&        T_STYLE       \- STYLE_XXX constant
\&        T_ITEM_DEPTH  \- depth of =item recursion
\&        T_LINK_OFFSET \- offset in links array, started in the topic
.Ve
.SS "Styles"
.IX Subsection "Styles"
\&\f(CW\*(C`::styles\*(C'\fR property provides access to the styles, applied to different pod
text parts. These styles are:
.PP
.Vb 8
\&        STYLE_CODE   \- style for pre\-formatted text and C<>
\&        STYLE_TEXT   \- normal text
\&        STYLE_HEAD_1 \- =head1
\&        STYLE_HEAD_2 \- =head2
\&        STYLE_HEAD_3 \- =head3
\&        STYLE_HEAD_4 \- =head4
\&        STYLE_ITEM   \- =item
\&        STYLE_LINK   \- style for L<> text
.Ve
.PP
Each style is a hash with the following keys: \f(CW\*(C`fontId\*(C'\fR, \f(CW\*(C`fontSize\*(C'\fR, \f(CW\*(C`fontStyle\*(C'\fR,
\&\f(CW\*(C`color\*(C'\fR, \f(CW\*(C`backColor\*(C'\fR, fully analogous to the tb::BLK_DATA_XXX options.
This functionality provides another layer of accessibility to the pod formatter.
.PP
In addition to styles, Prima::PodView defined \f(CW\*(C`colormap\*(C'\fR entries for
\&\f(CW\*(C`STYLE_LINK\*(C'\fR and \f(CW\*(C`STYLE_CODE\*(C'\fR:
.PP
.Vb 4
\&        COLOR_LINK_FOREGROUND 
\&        COLOR_LINK_BACKGROUND 
\&        COLOR_CODE_FOREGROUND 
\&        COLOR_CODE_BACKGROUND
.Ve
.PP
The default colors in the styles are mapped into these entries.
.SS "Link and navigation methods"
.IX Subsection "Link and navigation methods"
Prima::PodView provides a hand-icon mouse pointer highlight for the link
entries and as an interactive part, the link documents or topics are loaded
when the user presses the mouse button on the link. The mechanics below that
is as follows. \f(CW\*(C`{contents}\*(C'\fR of event rectangles, ( see Prima::TextView )
is responsible for distinguishing whether a mouse is inside a link or not.
When the link is activated, \f(CW\*(C`link_click\*(C'\fR is called, which, in turn, calls
\&\f(CW\*(C`load_link\*(C'\fR method. If the page is loaded successfully, depending on \f(CW\*(C`::topicView\*(C'\fR
property value, either \f(CW\*(C`select_topic\*(C'\fR or \f(CW\*(C`select_text_offset\*(C'\fR method is called.
.PP
The family of file and link access functions consists of the following methods:
.IP "load_file \s-1MANPAGE\s0" 4
.IX Item "load_file MANPAGE"
Loads a manpage, if it can be found in the \s-1PATH\s0 or perl installation directories.
If unsuccessful, displays an error.
.IP "load_link \s-1LINK\s0" 4
.IX Item "load_link LINK"
\&\s-1LINK\s0 is a text in format of perlpod \f(CW\*(C`L<>\*(C'\fR link: \*(L"manpage/section\*(R".
Loads the manpage, if necessary, and selects the section.
.IP "load_bookmark \s-1BOOKMARK\s0" 4
.IX Item "load_bookmark BOOKMARK"
Loads a bookmark string, prepared by make_bookmark function. 
Used internally.
.IP "load_content \s-1CONTENT\s0" 4
.IX Item "load_content CONTENT"
Loads content into the viewer. Returns \f(CW\*(C`undef\*(C'\fR is there is no \s-1POD \s0
context, 1 otherwise.
.IP "make_bookmark [ \s-1WHERE \s0]" 4
.IX Item "make_bookmark [ WHERE ]"
Combines the information about the currently viewing manpage, topic and text offset
into a storable string. \s-1WHERE,\s0 an optional string parameter, can be either omitted,
in such case the current settings are used, or be one of 'up', 'next' or 'prev' strings.
.Sp
The 'up' string returns a bookmark to the upper level of the manpage.
.Sp
The 'next' and 'prev' return a bookmark to the next or the previous topics in a manpage.
.Sp
If the location cannot be stored or defined, \f(CW\*(C`undef\*(C'\fR is returned.
