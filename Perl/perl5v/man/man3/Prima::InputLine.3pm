.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::InputLine 3"
.TH Prima::InputLine 3 "2015-11-04" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::InputLine \- standard input line widget
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The class provides basic functionality of an input line,
including hidden input, read-only state, selection, and
clipboard operations. The input line text data is 
contained in text property.
.SH "API"
.IX Header "API"
.SS "Events"
.IX Subsection "Events"
.IP "Change" 4
.IX Item "Change"
The notification is called when the text property is changed, either 
interactively or as a result of direct call.
.SS "Properties"
.IX Subsection "Properties"
.IP "alignment \s-1INTEGER\s0" 4
.IX Item "alignment INTEGER"
One of the following \f(CW\*(C`ta::\*(C'\fR constants, defining the text alignment:
.Sp
.Vb 3
\&        ta::Left
\&        ta::Right
\&        ta::Center
.Ve
.Sp
Default value: \f(CW\*(C`ta::Left\*(C'\fR
.IP "autoHeight \s-1BOOLEAN\s0" 4
.IX Item "autoHeight BOOLEAN"
If 1, adjusts the height of the widget automatically when its font changes.
.Sp
Default value: 1
.IP "autoSelect \s-1BOOLEAN\s0" 4
.IX Item "autoSelect BOOLEAN"
If 1, all the text is selected when the widget becomes focused.
.Sp
Default value: 1
.IP "autoTab \s-1BOOLEAN\s0" 4
.IX Item "autoTab BOOLEAN"
If 1, the keyboard \f(CW\*(C`kb::Left\*(C'\fR and \f(CW\*(C`kb::Right\*(C'\fR commands, if received
when the cursor is at the beginning or at the end of text, and cannot be
mover farther, not processed. The result of this is that the default handler
moves focus to a neighbor widget, in a way as if the Tab key
was pressed.
.Sp
Default value: 0
.IP "borderWidth \s-1INTEGER\s0" 4
.IX Item "borderWidth INTEGER"
Width of 3d\-shade border around the widget.
.Sp
Default value: 2
.IP "charOffset \s-1INTEGER\s0" 4
.IX Item "charOffset INTEGER"
Selects the position of the cursor in characters starting from
the beginning of visual text.
.IP "firstChar" 4
.IX Item "firstChar"
Selects the first visible character of text
.IP "insertMode \s-1BOOLEAN\s0" 4
.IX Item "insertMode BOOLEAN"
Governs the typing mode \- if 1, the typed text is inserted, if 0, the text overwrites
the old text. When \f(CW\*(C`insertMode\*(C'\fR is 0, the cursor shape is thick and covers the whole
character; when 1, it is of default width.
.Sp
Default toggle key: Insert
.IP "maxLen \s-1INTEGER\s0" 4
.IX Item "maxLen INTEGER"
The maximal length of the text, that can be stored into text or typed by the user.
.Sp
Default value: 256
.IP "passwordChar \s-1CHARACTER\s0" 4
.IX Item "passwordChar CHARACTER"
A character to be shown instead of the text letters when writeOnly property value is 1.
.Sp
Default value: \f(CW\*(Aq*\*(Aq\fR
.IP "readOnly \s-1BOOLEAN\s0" 4
.IX Item "readOnly BOOLEAN"
If 1, the text cannot be edited by the user.
.Sp
Default value: 0
.IP "selection \s-1START, END\s0" 4
.IX Item "selection START, END"
Two integers, specifying the beginning and the end of the selected text.
A case with no selection is when \s-1START\s0 equals \s-1END.\s0
.IP "selStart \s-1INTEGER\s0" 4
.IX Item "selStart INTEGER"
Selects the start of text selection.
.IP "selEnd \s-1INTEGER\s0" 4
.IX Item "selEnd INTEGER"
Selects the end of text selection.
.IP "textDirection \s-1BOOLEAN.\s0" 4
.IX Item "textDirection BOOLEAN."
If set, indicates \s-1RTL\s0 text input.
.IP "textRef \s-1SCALAR_REF\s0" 4
.IX Item "textRef SCALAR_REF"
If not undef, contains reference to the scalar that holds the text
of the input line. All changes to ::text property are reflected there.
The direct write access to the scalar is not recommended because it 
leaves internal structures inconsistent, and the only way to synchronize
structures is to set-call either ::textRef or ::text after every such change.
.Sp
If undef, the internal text container is used.
.Sp
Default value: undef
.IP "wordDelimiters \s-1STRING\s0" 4
.IX Item "wordDelimiters STRING"
Contains string of character that are used for locating a word break. 
Default \s-1STRING\s0 value consists of punctuation marks, space and tab characters,
and \f(CW\*(C`\exff\*(C'\fR character.
.IP "writeOnly \s-1BOOLEAN\s0" 4
.IX Item "writeOnly BOOLEAN"
If 1, the input is not shown but mapped to passwordChar characters.
Useful for a password entry.
.Sp
Default value: 0
.SS "Methods"
.IX Subsection "Methods"
.IP "copy" 4
.IX Item "copy"
Copies the selected text, if any, to the clipboard.
.Sp
Default key: Ctrl+Insert
.IP "cut" 4
.IX Item "cut"
Cuts the selected text into the clipboard.
.Sp
Default key: Shift+Delete
.IP "delete" 4
.IX Item "delete"
Removes the selected text.
.Sp
Default key: Delete
.IP "paste" 4
.IX Item "paste"
Copies text from the clipboard and inserts it in the cursor position.
.Sp
Default key: Shift+Insert
.IP "select_all" 4
.IX Item "select_all"
Selects all text
.SS "Bi-directional input and output"
.IX Subsection "Bi-directional input and output"
When bidi is enabled, methods \f(CW\*(C`firstChar\*(C'\fR, \f(CW\*(C`charOffset\*(C'\fR, \f(CW\*(C`selection\*(C'\fR etc
change their meaning, so that these cannot be used to calculate text offsets
f.ex. via \f(CW\*(C`substr\*(C'\fR.  Also, selection ranges of bidi text are not
straighforward.  Use the following methods whenever text manipulations are
needed:
.IP "has_bidi_data" 4
.IX Item "has_bidi_data"
Returns 1 if visual layout does not correspond to storage layout.
.IP "char_at \s-1OFFSET\s0" 4
.IX Item "char_at OFFSET"
Returns character at \s-1OFFSET\s0
.IP "offset2strpos" 4
.IX Item "offset2strpos"
Converts visual offset to storage offset
.IP "char_offset_strpos" 4
.IX Item "char_offset_strpos"
Returns the character offset in storage directly under the cursor.
.IP "selection_strpos" 4
.IX Item "selection_strpos"
Returns range of characters covered by the selection.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::Widget, Prima::Bidi, \fIexamples/edit.pl\fR.
