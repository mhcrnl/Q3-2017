.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Prima::EditDialog 3"
.TH Prima::EditDialog 3 "2015-11-04" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Prima::FindDialog, Prima::ReplaceDialog \- standard interface dialogs
to find and replace options selection.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Prima::StdDlg;
\&
\&        my $dlg = Prima::FindDialog\-> create( findStyle => 0);
\&        my $res = $dlg\-> execute;
\&        if ( $res == mb::Ok) {
\&                print $dlg\-> findText, " is to be found\en";
\&        } elsif ( $res == mb::ChangeAll) {
\&                print "all occurences of ", $dlg\-> findText, 
\&                        " is to be replaced by ", $dlg\-> replaceText;
\&        }
.Ve
.PP
The \f(CW\*(C`mb::ChangeAll\*(C'\fR constant, one of possible results of \f(CW\*(C`execute\*(C'\fR method, is
defined in Prima::StdDlg module. Therefore it is recommended to include this
module instead.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module provides two classes \- Prima::FindDialog and Prima::ReplaceDialog;
Prima::ReplaceDialog is exactly same as Prima::FindDialog except that 
its default findStyle property value is set to 0. One can use a dialog-caching
technique, arbitrating between findStyle value 0 and 1, and use only one
instance of Prima::FindDialog.
.PP
The module does not provide the actual search algorithm; this must be implemented
by the programmer. The toolkit currently include some facilitation to the problem \- 
the part of algorithm for \f(CW\*(C`Prima::Edit\*(C'\fR class is found in \*(L"find\*(R" in Prima::Edit,
and the another part \- in \fIexamples/editor.pl\fR example program. Prima::HelpWindow
also uses the module, and realizes its own searching algorithm.
.SH "API"
.IX Header "API"
.SS "Properties"
.IX Subsection "Properties"
All the properties select the user-assigned values, except
findStyle.
.IP "findText \s-1STRING\s0" 4
.IX Item "findText STRING"
Selects the text string to be found.
.Sp
Default value: ''
.IP "findStyle \s-1BOOLEAN\s0" 4
.IX Item "findStyle BOOLEAN"
If 1, the dialog provides only 'find text' interface. If 0,
the dialog provides also 'replace text' interface.
.Sp
Default value: 1 for \f(CW\*(C`Prima::FindDialog\*(C'\fR, 0 for \f(CW\*(C`Prima::ReplaceDialog\*(C'\fR.
.IP "options \s-1INTEGER\s0" 4
.IX Item "options INTEGER"
Combination of \f(CW\*(C`fdo::\*(C'\fR constants. For the detailed description see \*(L"find\*(R" in Prima::Edit.
.Sp
.Vb 5
\&        fdo::MatchCase
\&        fdo::WordsOnly
\&        fdo::RegularExpression
\&        fdo::BackwardSearch
\&        fdo::ReplacePrompt
.Ve
.Sp
Default value: 0
.IP "replaceText \s-1STRING\s0" 4
.IX Item "replaceText STRING"
Selects the text string that is to replace the found text.
.Sp
Default value: ''
.IP "scope" 4
.IX Item "scope"
One of \f(CW\*(C`fds::\*(C'\fR constants. Represents the scope of the search: it can be started
from the cursor position, of from the top or of the bottom of the text.
.Sp
.Vb 3
\&        fds::Cursor
\&        fds::Top
\&        fds::Bottom
.Ve
.Sp
Default value: \f(CW\*(C`fds::Cursor\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::Window, Prima::StdDlg, Prima::Edit, Prima::HelpWindow, \fIexamples/editor.pl\fR
