.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VB 1"
.TH VB 1 "2015-11-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VB \- Visual Builder for the Prima toolkit
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Visual Builder is a RAD-style suite for designing forms under
the Prima toolkit. It provides rich set of perl-composed widgets,
whose can be inserted into a form by simple actions. The form
can be stored in a file and loaded by either user program or
a simple wrapper, \f(CW\*(C`utils/fmview.pl\*(C'\fR; the form can be also stored as
a valid perl program.
.PP
A form file typically has \fI.fm\fR extension, an can be loaded
by using Prima::VB::VBLoader module. The following example
is the only content of \f(CW\*(C`fmview.pl\*(C'\fR:
.PP
.Vb 4
\&        use Prima qw(Application VB::VBLoader);
\&        my $ret = Prima::VBLoad( $ARGV[0] );
\&        die "$@\en" unless $ret;
\&        $ret\-> execute;
.Ve
.PP
and is usually sufficient for executing a form file.
.SH "Help"
.IX Header "Help"
The builder provides three main windows, that are used
for designing. These are called \fImain panel\fR, \fIobject inspector\fR
and \fIform window\fR. When the builder is started, the form window is empty.
.PP
The main panel consists of the menu bar, speed buttons and the widget 
buttons. If the user presses a widget button, and then clicks the mouse
on the form window, the designated widget is inserted into the form
and becomes a child of the form window.  If the click was made on a visible 
widget in the form window, the newly inserted widget becomes a children of 
that widget. After the widget is inserted, its properties are accessible 
via the object inspector window.
.PP
The menu bar contains the following commands:
.IP "File" 4
.IX Item "File"
.RS 4
.PD 0
.IP "New" 4
.IX Item "New"
.PD
Closes the current form and opens a new, empty form.
If the old form was not saved, the user is asked if the changes made 
have to be saved.
.Sp
This command is an alias to a 'new file' icon on the panel.
.IP "Open" 4
.IX Item "Open"
Invokes a file open dialog, so a \fI.fm\fR form file can be opened.
After the successful file load, all form widgets are visible and 
available for editing.
.Sp
This command is an alias to an 'open folder' icon on the panel.
.IP "Save" 4
.IX Item "Save"
Stores the form into a file. The user here can select a type 
of the file to be saved. If the form is saved as \fI.fm\fR form
file, then it can be re-loaded either in the builder or in the
user program ( see Prima::VB::VBLoader for details ). 
If the form is saved as \fI.pl\fR program, then it
can not be loaded; instead, the program can be run immediately
without the builder or any supplementary code.
.Sp
Once the user assigned a name and a type for the form, it is
never asked when selecting this command.
.Sp
This command is an alias to a 'save on disk' icon on the panel.
.IP "Save as" 4
.IX Item "Save as"
Same as Save, except that a new name or type of file are
asked every time the command is invoked.
.IP "Close" 4
.IX Item "Close"
Closes the form and removes the form window. If the form window
was changed, the user is asked if the changes made 
have to be saved.
.RE
.RS 4
.RE
.IP "Edit" 4
.IX Item "Edit"
.RS 4
.PD 0
.IP "Copy" 4
.IX Item "Copy"
.PD
Copies the selected widgets into the clipboard, so they can be
inserted later by using Paste command. 
The form window can not be copied.
.IP "Paste" 4
.IX Item "Paste"
Reads the information, put by the builder Copy command into the
clipboard, and inserts the widgets into the form window. The child-parent
relation is kept by names of the widgets; if the widget with the name of
the parent of the clipboard-read widgets is not found, the widgets are inserted
into the form window.
The form window is not affected by this command.
.IP "Delete" 4
.IX Item "Delete"
Deletes the selected widgets.
The form window can not be deleted.
.IP "Select all" 4
.IX Item "Select all"
Selects all of the widgets, inserted in the form window, except the 
form window itself.
.IP "Duplicate" 4
.IX Item "Duplicate"
Duplicates the selected widgets.
The form window is not affected by this command.
.IP "Align" 4
.IX Item "Align"
This menu item contains z\-ordering actions, that
are performed on selected widgets.
These are:
.Sp
Bring to front
Send to back
Step forward
Step backward
Restore order
.RE
.RS 4
.RE
.IP "Change class" 4
.IX Item "Change class"
Changes the class of an inserted widget. This is an advanced
option, and can lead to confusions or errors, if the default widget
class and the supplied class differ too much. It is used when
the widget that has to be inserted is not present in the builder
installation. Also, it is called implicitly when a loaded form
does not contain a valid widget class; in such case \fIPrima::Widget\fR
class is assigned.
.IP "Creation order" 4
.IX Item "Creation order"
Opens the dialog, that manages the creation order of the widgets.
It is not that important for the widget child-parent relation, since
the builder tracks these, and does not allow a child to be created
before its parent. However, the explicit order might be helpful
in a case, when, for example, \f(CW\*(C`tabOrder\*(C'\fR property is left to its default
value, so it is assigned according to the order of widget creation.
.IP "Toggle lock" 4
.IX Item "Toggle lock"
Changes the lock status for selected widgets. The lock, if set, prevents
a widget from being selected by mouse, to avoid occasional positional changes.
This is useful when a widget is used as owner for many sub-widgets.
.Sp
Ctrl+mouse click locks and unlocks a widget.
.IP "View" 4
.IX Item "View"
.RS 4
.PD 0
.IP "Object inspector" 4
.IX Item "Object inspector"
.PD
Brings the object inspector window, if it was hidden or closed.
.IP "Add widgets" 4
.IX Item "Add widgets"
Opens a file dialog, where the additional \s-1VB\s0 modules can be located.
The modules are used for providing custom widgets and properties
for the builder. As an example, the \fIPrima/VB/examples/Widgety.pm\fR
module is provided with the builder and the toolkit. Look inside this
file for the implementation details.
.IP "Reset guidelines" 4
.IX Item "Reset guidelines"
Reset the guidelines on the form window into a center position.
.IP "Snap to guidelines" 4
.IX Item "Snap to guidelines"
Specifies if the moving and resizing widget actions must treat
the form window guidelines as snapping areas.
.IP "Snap to grid" 4
.IX Item "Snap to grid"
Specifies if the moving and resizing widget actions must use
the form window grid granularity instead of the pixel granularity.
.IP "Run" 4
.IX Item "Run"
This command hides the form and object inspector windows and
\&'executes' the form, as if it would be run by \f(CW\*(C`fmview.pl\*(C'\fR.
The execution session ends either by closing the form window
or by calling Break command.
.Sp
This command is an alias to a 'run' icon on the panel.
.IP "Break" 4
.IX Item "Break"
Explicitly terminates the execution session, initiated by Run
command.
.RE
.RS 4
.RE
.IP "Help" 4
.IX Item "Help"
.RS 4
.PD 0
.IP "About" 4
.IX Item "About"
.PD
Displays the information about the visual builder.
.IP "Help" 4
.IX Item "Help"
Displays the information about the usage of the visual builder.
.IP "Widget property" 4
.IX Item "Widget property"
Invokes a help viewer on Prima::Widget manpage and tries
to open a topic, corresponding to the current selection
of the object inspector property or event list. While
this manpage covers far not all ( but still many ) properties
and events, it is still a little bit more convenient than nothing.
.RE
.RS 4
.RE
.SS "Form window"
.IX Subsection "Form window"
The form widget is a common parent for all widgets, created by the 
builder. The form window provides the following basic navigation
functionality.
.IP "Guidelines" 4
.IX Item "Guidelines"
The form window contains two guidelines, the horizontal and the vertical,
drawn as blue dashed lines. Dragging with the mouse can move these lines.
If menu option \*(L"Snap to guidelines\*(R" is on, the widgets moving and sizing
operations treat the guidelines as the snapping areas.
.IP "Selection" 4
.IX Item "Selection"
A widget can be selected by clicking with the mouse on it. There
can be more than one selected widget at a time, or none at all.
To explicitly select a widget in addition to the already selected
ones, hold the \f(CW\*(C`shift\*(C'\fR key while clicking on a widget. This combination
also deselects the widget. To select all widgets on the form window,
call \*(L"Select all\*(R" command from the menu. To prevent widgets from being
occasionally selected, lock them with \*(L"Edit/Toggle lock\*(R" command or 
Ctrl+mouse click.
.IP "Moving" 4
.IX Item "Moving"
Dragging the mouse can move the selected widgets. The widgets
can be snapped to the grid or the guidelines during the move. If one of
the moving widgets is selected in the object inspector window, 
the coordinate changes are reflected in the \f(CW\*(C`origin\*(C'\fR property.
.Sp
If the \f(CW\*(C`Tab\*(C'\fR key is pressed during the move, the mouse pointer is changed
between three states, each reflecting the currently accessible coordinates for
dragging. The default accessible coordinates are both the horizontal and
the vertical; other two are the horizontal only and the vertical only.
.IP "Sizing" 4
.IX Item "Sizing"
The sizeable widgets can be dynamically resized. Regardless to the
amount of the selected widgets, only one widget at a time can be resized.
If the resized widget is selected in the object inspector window, 
the size changes are reflected in the \f(CW\*(C`size\*(C'\fR property.
.IP "Context menus" 4
.IX Item "Context menus"
The right-click ( or the other system-defined pop-up menu invocation command)
provides the menu, identical to the main panel's Edit submenu.
.Sp
The alternative context menus can be provided with some widgets ( for
example, \f(CW\*(C`TabbedNotebook\*(C'\fR ), and are accessible with \f(CW\*(C`control + right click\*(C'\fR
combination.
.SS "Object inspector window"
.IX Subsection "Object inspector window"
The inspector window reflects the events and properties of a widget.
To explicitly select a widget, it must be either clicked by the mouse on
the form window, or selected in the widget combo-box. Depending on whether
the properties or the events are selected, the left panel of the inspector
provides the properties or events list, and the right panel \- a value
of the currently selected property or event. To toggle between the properties
and the events, use the button below the list.
.PP
The adjustable properties of a widget include an incomplete set of the properties,
returned by the class method \f(CW\*(C`profile_default\*(C'\fR ( the detailed explanation
see in Prima::Object). Among these are such basic properties as \f(CW\*(C`origin\*(C'\fR, \f(CW\*(C`size\*(C'\fR,
\&\f(CW\*(C`name\*(C'\fR, \f(CW\*(C`color\*(C'\fR, \f(CW\*(C`font\*(C'\fR, \f(CW\*(C`visible\*(C'\fR, \f(CW\*(C`enabled\*(C'\fR, \f(CW\*(C`owner\*(C'\fR and many others.
All the widgets share some common denominator, but almost all provide their own
intrinsic properties. Each property can be selected by the right-pane hosted property
selector; in such case, the name of a property is highlighted in the list \- that means,
that the property is initialized. To remove a property from the initialization list,
double-click on it, so it is grayed again. Some very basic properties as \f(CW\*(C`name\*(C'\fR
can not be deselected. This is because the builder keeps a name-keyed list; another
consequence of this fact is that no widgets of same name can exist simultaneously
within the builder.
.PP
The events, much like the properties, are accessible for direct change. 
All the events provide a small editor, so the custom code can be supplied.
This code is executed when the form is run or loaded via \f(CW\*(C`Prima::VB::VBLoader\*(C'\fR
interface.
.PP
The full explanation of properties and events is not provided here. It is
not even the goal of this document, because the builder can work with the
widgets irrespective of their property or event capabilities; this information
is extracted by native toolkit functionality. To read on what each property or
event means, use the documentation on the class of interest; Prima::Widget is a good
start because it encompasses the ground \f(CW\*(C`Prima::Widget\*(C'\fR functionality. 
The other widgets are ( hopefully ) documented in their modules, for example,
\&\f(CW\*(C`Prima::ScrollBar\*(C'\fR documentation can be found in Prima::ScrollBar.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Prima, Prima::VB::VBLoader
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Karasik, <dmitry@karasik.eu.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is distributed under the \s-1BSD\s0 License.
